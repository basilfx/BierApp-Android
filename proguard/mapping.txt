com.google.common.base.Function -> com.a.a.a.a:
    java.lang.Object apply(java.lang.Object) -> a
com.google.common.base.Joiner -> com.a.a.a.b:
    java.lang.String separator -> a
    com.google.common.base.Joiner on(java.lang.String) -> a
    com.google.common.base.Joiner on(char) -> a
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> a
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> a
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> a
    java.lang.String join(java.lang.Iterable) -> a
    java.lang.String join(java.util.Iterator) -> a
    java.lang.String join(java.lang.Object[]) -> a
    com.google.common.base.Joiner useForNull(java.lang.String) -> b
    com.google.common.base.Joiner skipNulls() -> a
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> c
    java.lang.CharSequence toString(java.lang.Object) -> a
    java.lang.String access$100(com.google.common.base.Joiner) -> a
com.google.common.base.Joiner$1 -> com.a.a.a.c:
    java.lang.String val$nullText -> a
    com.google.common.base.Joiner this$0 -> b
    java.lang.CharSequence toString(java.lang.Object) -> a
    com.google.common.base.Joiner useForNull(java.lang.String) -> b
    com.google.common.base.Joiner skipNulls() -> a
com.google.common.base.Joiner$2 -> com.a.a.a.d:
    com.google.common.base.Joiner this$0 -> a
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> a
    com.google.common.base.Joiner useForNull(java.lang.String) -> b
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> c
com.google.common.base.Joiner$MapJoiner -> com.a.a.a.e:
    com.google.common.base.Joiner joiner -> a
    java.lang.String keyValueSeparator -> b
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Map) -> a
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> a
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> a
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> a
com.google.common.base.Objects -> com.a.a.a.f:
    boolean equal(java.lang.Object,java.lang.Object) -> a
com.google.common.base.Preconditions -> com.a.a.a.g:
    void checkArgument(boolean) -> a
    void checkArgument(boolean,java.lang.Object) -> a
    void checkArgument(boolean,java.lang.String,java.lang.Object[]) -> a
    void checkState(boolean,java.lang.Object) -> b
    java.lang.Object checkNotNull(java.lang.Object) -> a
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> a
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> a
    int checkElementIndex(int,int) -> a
    int checkElementIndex(int,int,java.lang.String) -> a
    java.lang.String badElementIndex(int,int,java.lang.String) -> c
    int checkPositionIndex(int,int) -> b
    int checkPositionIndex(int,int,java.lang.String) -> b
    java.lang.String badPositionIndex(int,int,java.lang.String) -> d
    void checkPositionIndexes(int,int,int) -> a
    java.lang.String badPositionIndexes(int,int,int) -> b
    java.lang.String format(java.lang.String,java.lang.Object[]) -> a
com.google.common.base.Strings -> com.a.a.a.h:
    java.lang.String nullToEmpty(java.lang.String) -> a
    boolean isNullOrEmpty(java.lang.String) -> b
com.google.common.collect.AbstractIndexedListIterator -> com.a.a.b.a:
    int size -> a
    int position -> b
    java.lang.Object get(int) -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
com.google.common.collect.AbstractMapEntry -> com.a.a.b.b:
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.BiMap -> com.a.a.b.c:
com.google.common.collect.Collections2 -> com.a.a.b.d:
    com.google.common.base.Joiner STANDARD_JOINER -> a
    boolean containsAllImpl(java.util.Collection,java.util.Collection) -> a
    java.lang.String toStringImpl(java.util.Collection) -> a
    java.lang.StringBuilder newStringBuilderForCollection(int) -> a
com.google.common.collect.Collections2$1 -> com.a.a.b.e:
    java.util.Collection val$collection -> a
    java.lang.Object apply(java.lang.Object) -> a
com.google.common.collect.EmptyImmutableBiMap -> com.a.a.b.f:
    com.google.common.collect.EmptyImmutableBiMap INSTANCE -> a
    com.google.common.collect.ImmutableBiMap inverse() -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet entrySet() -> b
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet keySet() -> d
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
com.google.common.collect.EmptyImmutableList -> com.a.a.b.g:
    com.google.common.collect.EmptyImmutableList INSTANCE -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subList(int,int) -> a
    com.google.common.collect.UnmodifiableListIterator listIterator() -> a_
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.EmptyImmutableSet -> com.a.a.b.h:
    com.google.common.collect.EmptyImmutableSet INSTANCE -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    com.google.common.collect.ImmutableList asList() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> c
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable -> com.a.a.b.i:
    java.lang.Iterable iterable -> a
    java.lang.String toString() -> toString
com.google.common.collect.Hashing -> com.a.a.b.j:
    int MAX_TABLE_SIZE -> a
    int smear(int) -> a
    int closedTableSize(int,double) -> a
com.google.common.collect.ImmutableAsList -> com.a.a.b.k:
    com.google.common.collect.ImmutableCollection delegateCollection() -> c
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    boolean isEmpty() -> isEmpty
com.google.common.collect.ImmutableBiMap -> com.a.a.b.l:
    com.google.common.collect.ImmutableBiMap of() -> e
    com.google.common.collect.ImmutableBiMap inverse() -> a
    com.google.common.collect.ImmutableSet values() -> f
    com.google.common.collect.ImmutableCollection values() -> g
    java.util.Collection values() -> values
com.google.common.collect.ImmutableCollection -> com.a.a.b.m:
    com.google.common.collect.ImmutableCollection EMPTY_IMMUTABLE_COLLECTION -> b
    com.google.common.collect.ImmutableList asList -> a
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    com.google.common.collect.ImmutableList asList() -> b
    com.google.common.collect.ImmutableList createAsList() -> d
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableCollection$1 -> com.a.a.b.n:
com.google.common.collect.ImmutableCollection$EmptyImmutableCollection -> com.a.a.b.o:
    java.lang.Object[] EMPTY_ARRAY -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    com.google.common.collect.ImmutableList createAsList() -> d
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableEntry -> com.a.a.b.p:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ImmutableList -> com.a.a.b.q:
    com.google.common.collect.ImmutableList of() -> e
    com.google.common.collect.ImmutableList of(java.lang.Object) -> a
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]) -> a
    com.google.common.collect.ImmutableList construct(java.lang.Object[]) -> b
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    com.google.common.collect.UnmodifiableListIterator listIterator() -> a_
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> a
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList subList(int,int) -> a
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> b
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    com.google.common.collect.ImmutableList asList() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
com.google.common.collect.ImmutableList$1 -> com.a.a.b.r:
    com.google.common.collect.ImmutableList this$0 -> a
    java.lang.Object get(int) -> a
com.google.common.collect.ImmutableList$SubList -> com.a.a.b.s:
    int offset -> a
    int length -> c
    com.google.common.collect.ImmutableList this$0 -> d
    int size() -> size
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList subList(int,int) -> a
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMap -> com.a.a.b.t:
    com.google.common.collect.ImmutableSet entrySet -> a
    com.google.common.collect.ImmutableSet keySet -> b
    com.google.common.collect.ImmutableCollection values -> c
    com.google.common.collect.ImmutableMap of() -> h
    com.google.common.collect.ImmutableMap$Builder builder() -> i
    java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet entrySet() -> b
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet keySet() -> d
    com.google.common.collect.ImmutableSet createKeySet() -> j
    com.google.common.collect.ImmutableCollection values() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
com.google.common.collect.ImmutableMap$Builder -> com.a.a.b.u:
    java.util.ArrayList entries -> a
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> a
    com.google.common.collect.ImmutableMap build() -> a
    com.google.common.collect.ImmutableMap fromEntryList(java.util.List) -> a
com.google.common.collect.ImmutableMapEntrySet -> com.a.a.b.v:
    com.google.common.collect.ImmutableMap map() -> e
    int size() -> size
    boolean contains(java.lang.Object) -> contains
com.google.common.collect.ImmutableMapKeySet -> com.a.a.b.w:
    com.google.common.collect.ImmutableMap map -> a
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList createAsList() -> d
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMapKeySet$1 -> com.a.a.b.x:
    com.google.common.collect.ImmutableList val$entryList -> a
    com.google.common.collect.ImmutableMapKeySet this$0 -> c
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> c
com.google.common.collect.ImmutableMapValues -> com.a.a.b.y:
    com.google.common.collect.ImmutableMap map -> a
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList createAsList() -> d
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMapValues$1 -> com.a.a.b.z:
    com.google.common.collect.ImmutableList val$entryList -> a
    com.google.common.collect.ImmutableMapValues this$0 -> c
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> c
com.google.common.collect.ImmutableSet -> com.a.a.b.aa:
    int CUTOFF -> a
    com.google.common.collect.ImmutableSet of() -> f
    com.google.common.collect.ImmutableSet of(java.lang.Object) -> a
    boolean isHashCodeFast() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables -> com.a.a.b.ab:
    java.lang.String toString(java.lang.Iterable) -> a
    java.lang.Object getOnlyElement(java.lang.Iterable) -> b
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable) -> a
    java.lang.Iterable concat(java.lang.Iterable) -> c
    com.google.common.collect.UnmodifiableIterator iterators(java.lang.Iterable) -> e
    java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function) -> a
    com.google.common.collect.UnmodifiableIterator access$100(java.lang.Iterable) -> d
com.google.common.collect.Iterables$2 -> com.a.a.b.ac:
    java.lang.Iterable val$inputs -> a
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$3 -> com.a.a.b.ad:
    java.util.Iterator val$iterableIterator -> a
    boolean hasNext() -> hasNext
    java.util.Iterator next() -> a
    java.lang.Object next() -> next
com.google.common.collect.Iterables$8 -> com.a.a.b.ae:
    java.lang.Iterable val$fromIterable -> a
    com.google.common.base.Function val$function -> b
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterators -> com.a.a.b.af:
    com.google.common.collect.UnmodifiableListIterator EMPTY_LIST_ITERATOR -> a
    java.util.Iterator EMPTY_MODIFIABLE_ITERATOR -> b
    com.google.common.collect.UnmodifiableIterator emptyIterator() -> a
    com.google.common.collect.UnmodifiableListIterator emptyListIterator() -> b
    boolean contains(java.util.Iterator,java.lang.Object) -> a
    boolean elementsEqual(java.util.Iterator,java.util.Iterator) -> a
    java.lang.String toString(java.util.Iterator) -> a
    java.lang.Object getOnlyElement(java.util.Iterator) -> b
    java.util.Iterator concat(java.util.Iterator) -> c
    java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function) -> a
    com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[],int,int,int) -> a
    com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object) -> a
com.google.common.collect.Iterators$1 -> com.a.a.b.ag:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
com.google.common.collect.Iterators$12 -> com.a.a.b.ah:
    java.lang.Object[] val$array -> a
    int val$offset -> b
    java.lang.Object get(int) -> a
com.google.common.collect.Iterators$13 -> com.a.a.b.ai:
    boolean done -> a
    java.lang.Object val$value -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$2 -> com.a.a.b.aj:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$5 -> com.a.a.b.ak:
    java.util.Iterator current -> a
    java.util.Iterator removeFrom -> b
    java.util.Iterator val$inputs -> c
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$8 -> com.a.a.b.al:
    com.google.common.base.Function val$function -> a
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Lists -> com.a.a.b.am:
    java.util.ArrayList newArrayList() -> a
    int hashCodeImpl(java.util.List) -> a
    boolean equalsImpl(java.util.List,java.lang.Object) -> a
    int indexOfImpl(java.util.List,java.lang.Object) -> b
    int lastIndexOfImpl(java.util.List,java.lang.Object) -> c
com.google.common.collect.Maps -> com.a.a.b.an:
    com.google.common.base.Joiner$MapJoiner STANDARD_JOINER -> a
    java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object) -> a
    boolean equalsImpl(java.util.Map,java.lang.Object) -> a
    java.lang.String toStringImpl(java.util.Map) -> a
    boolean containsValueImpl(java.util.Map,java.lang.Object) -> b
    java.util.Iterator valueIterator(java.util.Iterator) -> a
    com.google.common.collect.UnmodifiableIterator valueIterator(com.google.common.collect.UnmodifiableIterator) -> a
com.google.common.collect.Maps$8 -> com.a.a.b.ao:
    java.lang.Object transform(java.util.Map$Entry) -> a
    java.lang.Object transform(java.lang.Object) -> a
com.google.common.collect.Maps$9 -> com.a.a.b.ap:
    com.google.common.collect.UnmodifiableIterator val$entryIterator -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.ObjectArrays -> com.a.a.b.aq:
    java.lang.Object[] EMPTY_ARRAY -> a
    java.lang.Object[] newArray(java.lang.Object[],int) -> a
    java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[]) -> a
    java.lang.Object[] toArrayImpl(java.util.Collection) -> a
    java.lang.Object[] fillArray(java.lang.Iterable,java.lang.Object[]) -> a
    java.lang.Object checkElementNotNull(java.lang.Object,int) -> a
com.google.common.collect.Platform -> com.a.a.b.ar:
    java.lang.Object[] newArray(java.lang.Object[],int) -> a
com.google.common.collect.RegularImmutableAsList -> com.a.a.b.as:
    com.google.common.collect.ImmutableCollection delegate -> a
    com.google.common.collect.ImmutableList delegateList -> c
    com.google.common.collect.ImmutableCollection delegateCollection() -> c
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object get(int) -> get
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.RegularImmutableList -> com.a.a.b.at:
    int offset -> a
    int size -> c
    java.lang.Object[] array -> d
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> b
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.RegularImmutableMap -> com.a.a.b.au:
    com.google.common.collect.RegularImmutableMap$LinkedEntry[] entries -> a
    com.google.common.collect.RegularImmutableMap$LinkedEntry[] table -> b
    int mask -> c
    com.google.common.collect.RegularImmutableMap$LinkedEntry[] createEntryArray(int) -> a
    com.google.common.collect.RegularImmutableMap$LinkedEntry newLinkedEntry(java.lang.Object,java.lang.Object,com.google.common.collect.RegularImmutableMap$LinkedEntry) -> a
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.RegularImmutableMap$LinkedEntry[] access$100(com.google.common.collect.RegularImmutableMap) -> a
com.google.common.collect.RegularImmutableMap$1 -> com.a.a.b.av:
com.google.common.collect.RegularImmutableMap$EntrySet -> com.a.a.b.aw:
    com.google.common.collect.RegularImmutableMap this$0 -> a
    com.google.common.collect.ImmutableMap map() -> e
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    com.google.common.collect.ImmutableList createAsList() -> d
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableMap$LinkedEntry -> com.a.a.b.ax:
    com.google.common.collect.RegularImmutableMap$LinkedEntry next() -> a
com.google.common.collect.RegularImmutableMap$NonTerminalEntry -> com.a.a.b.ay:
    com.google.common.collect.RegularImmutableMap$LinkedEntry next -> a
    com.google.common.collect.RegularImmutableMap$LinkedEntry next() -> a
com.google.common.collect.RegularImmutableMap$TerminalEntry -> com.a.a.b.az:
    com.google.common.collect.RegularImmutableMap$LinkedEntry next() -> a
com.google.common.collect.Sets -> com.a.a.b.ba:
    int hashCodeImpl(java.util.Set) -> a
    boolean equalsImpl(java.util.Set,java.lang.Object) -> a
com.google.common.collect.SingletonImmutableBiMap -> com.a.a.b.bb:
    java.lang.Object singleKey -> a
    java.lang.Object singleValue -> b
    com.google.common.collect.ImmutableBiMap inverse -> c
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    com.google.common.collect.ImmutableSet createEntrySet() -> c
    com.google.common.collect.ImmutableSet createKeySet() -> j
    com.google.common.collect.ImmutableBiMap inverse() -> a
com.google.common.collect.SingletonImmutableList -> com.a.a.b.bc:
    java.lang.Object element -> a
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    int size() -> size
    com.google.common.collect.ImmutableList subList(int,int) -> a
    boolean contains(java.lang.Object) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isEmpty() -> isEmpty
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SingletonImmutableSet -> com.a.a.b.bd:
    java.lang.Object element -> a
    int cachedHashCode -> c
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> a
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> c
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.common.collect.TransformedIterator -> com.a.a.b.be:
    java.util.Iterator backingIterator -> b
    java.lang.Object transform(java.lang.Object) -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.UnmodifiableIterator -> com.a.a.b.bf:
    void remove() -> remove
com.google.common.collect.UnmodifiableListIterator -> com.a.a.b.bg:
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
com.google.gson.DefaultDateTypeAdapter -> com.a.b.a:
    java.text.DateFormat enUsFormat -> a
    java.text.DateFormat localFormat -> b
    java.text.DateFormat iso8601Format -> c
    com.google.gson.JsonElement serialize(java.util.Date,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    java.util.Date deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    java.util.Date deserializeToDate(com.google.gson.JsonElement) -> a
    java.lang.String toString() -> toString
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> b
com.google.gson.ExclusionStrategy -> com.a.b.b:
    boolean shouldSkipField(com.google.gson.FieldAttributes) -> a
    boolean shouldSkipClass(java.lang.Class) -> a
com.google.gson.FieldAttributes -> com.a.b.c:
    java.lang.reflect.Field field -> a
com.google.gson.FieldNamingPolicy -> com.a.b.d:
    com.google.gson.FieldNamingPolicy IDENTITY -> a
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE -> b
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES -> c
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES -> d
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES -> e
    com.google.gson.FieldNamingPolicy[] $VALUES -> f
    com.google.gson.FieldNamingPolicy[] values() -> values
    com.google.gson.FieldNamingPolicy valueOf(java.lang.String) -> valueOf
    java.lang.String separateCamelCase(java.lang.String,java.lang.String) -> b
    java.lang.String upperCaseFirstLetter(java.lang.String) -> b
    java.lang.String modifyString(char,java.lang.String,int) -> a
    java.lang.String access$100(java.lang.String) -> a
    java.lang.String access$200(java.lang.String,java.lang.String) -> a
com.google.gson.FieldNamingPolicy$1 -> com.a.b.e:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$2 -> com.a.b.f:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$3 -> com.a.b.g:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$4 -> com.a.b.h:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$5 -> com.a.b.i:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingStrategy -> com.a.b.j:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.Gson -> com.a.b.k:
    java.lang.ThreadLocal calls -> c
    java.util.Map typeTokenCache -> d
    java.util.List factories -> e
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> f
    boolean serializeNulls -> g
    boolean htmlSafe -> h
    boolean generateNonExecutableJson -> i
    boolean prettyPrinting -> j
    com.google.gson.JsonDeserializationContext deserializationContext -> a
    com.google.gson.JsonSerializationContext serializationContext -> b
    com.google.gson.TypeAdapter doubleAdapter(boolean) -> a
    com.google.gson.TypeAdapter floatAdapter(boolean) -> b
    void checkValidFloatingPoint(double) -> a
    com.google.gson.TypeAdapter longAdapter(com.google.gson.LongSerializationPolicy) -> a
    com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getAdapter(java.lang.Class) -> a
    java.lang.String toJson(java.lang.Object) -> a
    java.lang.String toJson(java.lang.Object,java.lang.reflect.Type) -> a
    void toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable) -> a
    void toJson(java.lang.Object,java.lang.reflect.Type,com.google.gson.stream.JsonWriter) -> a
    java.lang.String toJson(com.google.gson.JsonElement) -> a
    void toJson(com.google.gson.JsonElement,java.lang.Appendable) -> a
    com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer) -> a
    void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type) -> a
    java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type) -> a
    void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader) -> a
    java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type) -> a
    java.lang.String toString() -> toString
    void access$000(com.google.gson.Gson,double) -> a
com.google.gson.Gson$1 -> com.a.b.l:
    com.google.gson.Gson this$0 -> a
    java.util.Map initialValue() -> a
    java.lang.Object initialValue() -> initialValue
com.google.gson.Gson$2 -> com.a.b.m:
    com.google.gson.Gson this$0 -> a
com.google.gson.Gson$3 -> com.a.b.n:
    com.google.gson.Gson this$0 -> a
com.google.gson.Gson$4 -> com.a.b.o:
    com.google.gson.Gson this$0 -> a
    java.lang.Double read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$5 -> com.a.b.p:
    com.google.gson.Gson this$0 -> a
    java.lang.Float read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$6 -> com.a.b.q:
    com.google.gson.Gson this$0 -> a
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$FutureTypeAdapter -> com.a.b.r:
    com.google.gson.TypeAdapter delegate -> a
    void setDelegate(com.google.gson.TypeAdapter) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.GsonBuilder -> com.a.b.s:
    com.google.gson.internal.Excluder excluder -> a
    com.google.gson.LongSerializationPolicy longSerializationPolicy -> b
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> c
    java.util.Map instanceCreators -> d
    java.util.List factories -> e
    java.util.List hierarchyFactories -> f
    boolean serializeNulls -> g
    java.lang.String datePattern -> h
    int dateStyle -> i
    int timeStyle -> j
    boolean complexMapKeySerialization -> k
    boolean serializeSpecialFloatingPointValues -> l
    boolean escapeHtmlChars -> m
    boolean prettyPrinting -> n
    boolean generateNonExecutableJson -> o
    com.google.gson.GsonBuilder setDateFormat(java.lang.String) -> a
    com.google.gson.Gson create() -> a
    void addTypeAdaptersForDate(java.lang.String,int,int,java.util.List) -> a
com.google.gson.InstanceCreator -> com.a.b.t:
    java.lang.Object createInstance(java.lang.reflect.Type) -> a
com.google.gson.JsonArray -> com.a.b.u:
    java.util.List elements -> a
    void add(com.google.gson.JsonElement) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean getAsBoolean() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonDeserializationContext -> com.a.b.v:
com.google.gson.JsonDeserializer -> com.a.b.w:
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> b
com.google.gson.JsonElement -> com.a.b.x:
    boolean isJsonArray() -> g
    boolean isJsonObject() -> h
    boolean isJsonPrimitive() -> i
    boolean isJsonNull() -> j
    com.google.gson.JsonObject getAsJsonObject() -> k
    com.google.gson.JsonArray getAsJsonArray() -> l
    com.google.gson.JsonPrimitive getAsJsonPrimitive() -> m
    boolean getAsBoolean() -> f
    java.lang.Boolean getAsBooleanWrapper() -> n
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    java.lang.String toString() -> toString
com.google.gson.JsonIOException -> com.a.b.y:
com.google.gson.JsonNull -> com.a.b.z:
    com.google.gson.JsonNull INSTANCE -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.gson.JsonObject -> com.a.b.aa:
    com.google.gson.internal.StringMap members -> a
    void add(java.lang.String,com.google.gson.JsonElement) -> a
    java.util.Set entrySet() -> o
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonParseException -> com.a.b.ab:
com.google.gson.JsonPrimitive -> com.a.b.ac:
    java.lang.Class[] PRIMITIVE_TYPES -> a
    java.lang.Object value -> b
    void setValue(java.lang.Object) -> a
    boolean isBoolean() -> o
    java.lang.Boolean getAsBooleanWrapper() -> n
    boolean getAsBoolean() -> f
    boolean isNumber() -> p
    java.lang.Number getAsNumber() -> a
    boolean isString() -> q
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean isPrimitiveOrString(java.lang.Object) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isIntegral(com.google.gson.JsonPrimitive) -> a
com.google.gson.JsonSerializationContext -> com.a.b.ad:
com.google.gson.JsonSerializer -> com.a.b.ae:
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
com.google.gson.JsonSyntaxException -> com.a.b.af:
com.google.gson.LongSerializationPolicy -> com.a.b.ag:
    com.google.gson.LongSerializationPolicy DEFAULT -> a
    com.google.gson.LongSerializationPolicy STRING -> b
    com.google.gson.LongSerializationPolicy[] $VALUES -> c
    com.google.gson.LongSerializationPolicy[] values() -> values
    com.google.gson.LongSerializationPolicy valueOf(java.lang.String) -> valueOf
com.google.gson.LongSerializationPolicy$1 -> com.a.b.ah:
com.google.gson.LongSerializationPolicy$2 -> com.a.b.ai:
com.google.gson.TreeTypeAdapter -> com.a.b.aj:
    com.google.gson.JsonSerializer serializer -> a
    com.google.gson.JsonDeserializer deserializer -> b
    com.google.gson.Gson gson -> c
    com.google.gson.reflect.TypeToken typeToken -> d
    com.google.gson.TypeAdapterFactory skipPast -> e
    com.google.gson.TypeAdapter delegate -> f
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> a
    com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,java.lang.Object) -> a
com.google.gson.TreeTypeAdapter$1 -> com.a.b.ak:
com.google.gson.TreeTypeAdapter$SingleTypeFactory -> com.a.b.al:
    com.google.gson.reflect.TypeToken exactType -> a
    boolean matchRawType -> b
    java.lang.Class hierarchyType -> c
    com.google.gson.JsonSerializer serializer -> d
    com.google.gson.JsonDeserializer deserializer -> e
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.TypeAdapter -> com.a.b.am:
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
com.google.gson.TypeAdapterFactory -> com.a.b.an:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.annotations.Expose -> com.a.b.a.a:
    boolean serialize() -> a
    boolean deserialize() -> b
com.google.gson.annotations.SerializedName -> com.a.b.a.b:
    java.lang.String value() -> a
com.google.gson.annotations.Since -> com.a.b.a.c:
    double value() -> a
com.google.gson.annotations.Until -> com.a.b.a.d:
    double value() -> a
com.google.gson.internal.$Gson$Preconditions -> com.a.b.b.a:
    java.lang.Object checkNotNull(java.lang.Object) -> a
    void checkArgument(boolean) -> a
com.google.gson.internal.$Gson$Types -> com.a.b.b.b:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> a
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> a
    java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type) -> a
    java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> b
    java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> c
    java.lang.reflect.Type canonicalize(java.lang.reflect.Type) -> d
    java.lang.Class getRawType(java.lang.reflect.Type) -> e
    boolean equal(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> a
    int hashCodeOrZero(java.lang.Object) -> b
    java.lang.String typeToString(java.lang.reflect.Type) -> f
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> a
    java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> b
    java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type) -> g
    java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class) -> a
    java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> a
    java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> a
    int indexOf(java.lang.Object[],java.lang.Object) -> a
    java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable) -> a
    void checkNotPrimitive(java.lang.reflect.Type) -> i
    void access$000(java.lang.reflect.Type) -> h
    int access$100(java.lang.Object) -> a
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl -> com.a.b.b.c:
    java.lang.reflect.Type componentType -> a
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl -> com.a.b.b.d:
    java.lang.reflect.Type ownerType -> a
    java.lang.reflect.Type rawType -> b
    java.lang.reflect.Type[] typeArguments -> c
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$WildcardTypeImpl -> com.a.b.b.e:
    java.lang.reflect.Type upperBound -> a
    java.lang.reflect.Type lowerBound -> b
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor -> com.a.b.b.f:
    java.util.Map instanceCreators -> a
    com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.ObjectConstructor newDefaultConstructor(java.lang.Class) -> a
    com.google.gson.internal.ObjectConstructor newDefaultImplementationConstructor(java.lang.Class) -> b
    com.google.gson.internal.ObjectConstructor newUnsafeAllocator(java.lang.reflect.Type,java.lang.Class) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor$1 -> com.a.b.b.g:
    com.google.gson.InstanceCreator val$creator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$2 -> com.a.b.b.h:
    java.lang.reflect.Constructor val$constructor -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$3 -> com.a.b.b.i:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$4 -> com.a.b.b.j:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$5 -> com.a.b.b.k:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$6 -> com.a.b.b.l:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$7 -> com.a.b.b.m:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$8 -> com.a.b.b.n:
    com.google.gson.internal.UnsafeAllocator unsafeAllocator -> d
    java.lang.Class val$rawType -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.Excluder -> com.a.b.b.o:
    com.google.gson.internal.Excluder DEFAULT -> a
    double version -> b
    int modifiers -> c
    boolean serializeInnerClasses -> d
    boolean requireExpose -> e
    java.util.List serializationStrategies -> f
    java.util.List deserializationStrategies -> g
    com.google.gson.internal.Excluder clone() -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    boolean excludeClass(java.lang.Class,boolean) -> a
    boolean isAnonymousOrLocal(java.lang.Class) -> a
    boolean isInnerClass(java.lang.Class) -> b
    boolean isStatic(java.lang.Class) -> c
    boolean isValidVersion(com.google.gson.annotations.Since,com.google.gson.annotations.Until) -> a
    boolean isValidSince(com.google.gson.annotations.Since) -> a
    boolean isValidUntil(com.google.gson.annotations.Until) -> a
    java.lang.Object clone() -> clone
com.google.gson.internal.Excluder$1 -> com.a.b.b.p:
    com.google.gson.TypeAdapter delegate -> f
    boolean val$skipDeserialize -> a
    boolean val$skipSerialize -> b
    com.google.gson.Gson val$gson -> c
    com.google.gson.reflect.TypeToken val$type -> d
    com.google.gson.internal.Excluder this$0 -> e
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> a
com.google.gson.internal.JsonReaderInternalAccess -> com.a.b.b.q:
    com.google.gson.internal.JsonReaderInternalAccess INSTANCE -> a
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.internal.LazilyParsedNumber -> com.a.b.b.r:
    java.lang.String value -> a
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.lang.String toString() -> toString
com.google.gson.internal.ObjectConstructor -> com.a.b.b.s:
    java.lang.Object construct() -> a
com.google.gson.internal.Primitives -> com.a.b.b.t:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> a
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> b
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> a
    boolean isPrimitive(java.lang.reflect.Type) -> a
    java.lang.Class wrap(java.lang.Class) -> a
com.google.gson.internal.Streams -> com.a.b.b.u:
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> a
    java.io.Writer writerForAppendable(java.lang.Appendable) -> a
com.google.gson.internal.Streams$1 -> com.a.b.b.v:
com.google.gson.internal.Streams$AppendableWriter -> com.a.b.b.w:
    java.lang.Appendable appendable -> a
    com.google.gson.internal.Streams$AppendableWriter$CurrentWrite currentWrite -> b
    void write(char[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite -> com.a.b.b.x:
    char[] chars -> a
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
com.google.gson.internal.StringMap -> com.a.b.b.y:
    com.google.gson.internal.StringMap$LinkedEntry header -> a
    java.util.Map$Entry[] EMPTY_TABLE -> b
    com.google.gson.internal.StringMap$LinkedEntry[] table -> c
    int size -> d
    int threshold -> e
    java.util.Set keySet -> f
    java.util.Set entrySet -> g
    java.util.Collection values -> h
    int seed -> i
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    com.google.gson.internal.StringMap$LinkedEntry getEntry(java.lang.String) -> a
    java.lang.Object put(java.lang.String,java.lang.Object) -> a
    void addNewEntry(java.lang.String,java.lang.Object,int,int) -> a
    com.google.gson.internal.StringMap$LinkedEntry[] makeTable(int) -> a
    com.google.gson.internal.StringMap$LinkedEntry[] doubleCapacity() -> a
    java.lang.Object remove(java.lang.Object) -> remove
    void unlink(com.google.gson.internal.StringMap$LinkedEntry) -> a
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    boolean removeMapping(java.lang.Object,java.lang.Object) -> a
    int hash(java.lang.String) -> b
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    com.google.gson.internal.StringMap$LinkedEntry access$300(com.google.gson.internal.StringMap) -> a
    int access$500(com.google.gson.internal.StringMap) -> b
    boolean access$600(com.google.gson.internal.StringMap,java.lang.Object,java.lang.Object) -> a
com.google.gson.internal.StringMap$1 -> com.a.b.b.z:
com.google.gson.internal.StringMap$EntrySet -> com.a.b.b.aa:
    com.google.gson.internal.StringMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    void clear() -> clear
com.google.gson.internal.StringMap$EntrySet$1 -> com.a.b.b.ab:
    com.google.gson.internal.StringMap$EntrySet this$1 -> a
    java.util.Map$Entry next() -> a
    java.lang.Object next() -> next
com.google.gson.internal.StringMap$KeySet -> com.a.b.b.ac:
    com.google.gson.internal.StringMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.StringMap$KeySet$1 -> com.a.b.b.ad:
    com.google.gson.internal.StringMap$KeySet this$1 -> a
    java.lang.String next() -> a
    java.lang.Object next() -> next
com.google.gson.internal.StringMap$LinkedEntry -> com.a.b.b.ae:
    java.lang.String key -> a
    java.lang.Object value -> b
    int hash -> c
    com.google.gson.internal.StringMap$LinkedEntry next -> d
    com.google.gson.internal.StringMap$LinkedEntry nxt -> e
    com.google.gson.internal.StringMap$LinkedEntry prv -> f
    java.lang.String getKey() -> a
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object getKey() -> getKey
com.google.gson.internal.StringMap$LinkedHashIterator -> com.a.b.b.af:
    com.google.gson.internal.StringMap$LinkedEntry next -> b
    com.google.gson.internal.StringMap$LinkedEntry lastReturned -> c
    com.google.gson.internal.StringMap this$0 -> d
    boolean hasNext() -> hasNext
    com.google.gson.internal.StringMap$LinkedEntry nextEntry() -> b
    void remove() -> remove
com.google.gson.internal.StringMap$Values -> com.a.b.b.ag:
    com.google.gson.internal.StringMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.gson.internal.StringMap$Values$1 -> com.a.b.b.ah:
    com.google.gson.internal.StringMap$Values this$1 -> a
    java.lang.Object next() -> next
com.google.gson.internal.UnsafeAllocator -> com.a.b.b.ai:
    java.lang.Object newInstance(java.lang.Class) -> a
    com.google.gson.internal.UnsafeAllocator create() -> a
com.google.gson.internal.UnsafeAllocator$1 -> com.a.b.b.aj:
    java.lang.reflect.Method val$allocateInstance -> a
    java.lang.Object val$unsafe -> b
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$2 -> com.a.b.b.ak:
    java.lang.reflect.Method val$newInstance -> a
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$3 -> com.a.b.b.al:
    java.lang.reflect.Method val$newInstance -> a
    int val$constructorId -> b
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$4 -> com.a.b.b.am:
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.bind.ArrayTypeAdapter -> com.a.b.b.a.a:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.lang.Class componentType -> b
    com.google.gson.TypeAdapter componentTypeAdapter -> c
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ArrayTypeAdapter$1 -> com.a.b.b.a.b:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory -> com.a.b.b.a.c:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter -> com.a.b.b.a.d:
    com.google.gson.TypeAdapter elementTypeAdapter -> b
    com.google.gson.internal.ObjectConstructor constructor -> c
    com.google.gson.internal.bind.CollectionTypeAdapterFactory this$0 -> a
    java.util.Collection read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Collection) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter -> com.a.b.b.a.e:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat enUsFormat -> b
    java.text.DateFormat localFormat -> c
    java.text.DateFormat iso8601Format -> d
    java.text.DateFormat buildIso8601Format() -> a
    java.util.Date read(com.google.gson.stream.JsonReader) -> a
    java.util.Date deserializeToDate(java.lang.String) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter$1 -> com.a.b.b.a.f:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.JsonTreeReader -> com.a.b.b.a.g:
    java.io.Reader UNREADABLE_READER -> a
    java.lang.Object SENTINEL_CLOSED -> b
    java.util.List stack -> c
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    java.lang.Object peekStack() -> q
    java.lang.Object popStack() -> r
    void expect(com.google.gson.stream.JsonToken) -> a
    java.lang.String nextName() -> g
    java.lang.String nextString() -> h
    boolean nextBoolean() -> i
    void nextNull() -> j
    double nextDouble() -> k
    long nextLong() -> l
    int nextInt() -> m
    void close() -> close
    void skipValue() -> n
    java.lang.String toString() -> toString
    void promoteNameToValue() -> o
com.google.gson.internal.bind.JsonTreeReader$1 -> com.a.b.b.a.h:
    int read(char[],int,int) -> read
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter -> com.a.b.b.a.i:
    java.io.Writer UNWRITABLE_WRITER -> a
    com.google.gson.JsonPrimitive SENTINEL_CLOSED -> b
    java.util.List stack -> c
    java.lang.String pendingName -> d
    com.google.gson.JsonElement product -> e
    com.google.gson.JsonElement get() -> a
    com.google.gson.JsonElement peek() -> j
    void put(com.google.gson.JsonElement) -> a
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter$1 -> com.a.b.b.a.j:
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.MapTypeAdapterFactory -> com.a.b.b.a.k:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    boolean complexMapKeySerialization -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getKeyAdapter(com.google.gson.Gson,java.lang.reflect.Type) -> a
    boolean access$000(com.google.gson.internal.bind.MapTypeAdapterFactory) -> a
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter -> com.a.b.b.a.l:
    com.google.gson.TypeAdapter keyTypeAdapter -> b
    com.google.gson.TypeAdapter valueTypeAdapter -> c
    com.google.gson.internal.ObjectConstructor constructor -> d
    com.google.gson.internal.bind.MapTypeAdapterFactory this$0 -> a
    java.util.Map read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Map) -> a
    java.lang.String keyToString(com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter -> com.a.b.b.a.m:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    com.google.gson.Gson gson -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$1 -> com.a.b.b.a.n:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$2 -> com.a.b.b.a.o:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory -> com.a.b.b.a.p:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> b
    com.google.gson.internal.Excluder excluder -> c
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    java.lang.String getFieldName(java.lang.reflect.Field) -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(com.google.gson.Gson,java.lang.reflect.Field,java.lang.String,com.google.gson.reflect.TypeToken,boolean,boolean) -> a
    java.util.Map getBoundFields(com.google.gson.Gson,com.google.gson.reflect.TypeToken,java.lang.Class) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1 -> com.a.b.b.a.q:
    com.google.gson.TypeAdapter typeAdapter -> a
    com.google.gson.Gson val$context -> b
    com.google.gson.reflect.TypeToken val$fieldType -> c
    java.lang.reflect.Field val$field -> d
    boolean val$isPrimitive -> e
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> f
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter -> com.a.b.b.a.r:
    com.google.gson.internal.ObjectConstructor constructor -> b
    java.util.Map boundFields -> c
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField -> com.a.b.b.a.s:
    java.lang.String name -> g
    boolean serialized -> h
    boolean deserialized -> i
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter -> com.a.b.b.a.t:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    java.sql.Date read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter$1 -> com.a.b.b.a.u:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TimeTypeAdapter -> com.a.b.b.a.v:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    java.sql.Time read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Time) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TimeTypeAdapter$1 -> com.a.b.b.a.w:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper -> com.a.b.b.a.x:
    com.google.gson.Gson context -> a
    com.google.gson.TypeAdapter delegate -> b
    java.lang.reflect.Type type -> c
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters -> com.a.b.b.a.y:
    com.google.gson.TypeAdapter CLASS -> a
    com.google.gson.TypeAdapterFactory CLASS_FACTORY -> b
    com.google.gson.TypeAdapter BIT_SET -> c
    com.google.gson.TypeAdapterFactory BIT_SET_FACTORY -> d
    com.google.gson.TypeAdapter BOOLEAN -> e
    com.google.gson.TypeAdapter BOOLEAN_AS_STRING -> f
    com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY -> g
    com.google.gson.TypeAdapter BYTE -> h
    com.google.gson.TypeAdapterFactory BYTE_FACTORY -> i
    com.google.gson.TypeAdapter SHORT -> j
    com.google.gson.TypeAdapterFactory SHORT_FACTORY -> k
    com.google.gson.TypeAdapter INTEGER -> l
    com.google.gson.TypeAdapterFactory INTEGER_FACTORY -> m
    com.google.gson.TypeAdapter LONG -> n
    com.google.gson.TypeAdapter FLOAT -> o
    com.google.gson.TypeAdapter DOUBLE -> p
    com.google.gson.TypeAdapter NUMBER -> q
    com.google.gson.TypeAdapterFactory NUMBER_FACTORY -> r
    com.google.gson.TypeAdapter CHARACTER -> s
    com.google.gson.TypeAdapterFactory CHARACTER_FACTORY -> t
    com.google.gson.TypeAdapter STRING -> u
    com.google.gson.TypeAdapter BIG_DECIMAL -> v
    com.google.gson.TypeAdapter BIG_INTEGER -> w
    com.google.gson.TypeAdapterFactory STRING_FACTORY -> x
    com.google.gson.TypeAdapter STRING_BUILDER -> y
    com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY -> z
    com.google.gson.TypeAdapter STRING_BUFFER -> A
    com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY -> B
    com.google.gson.TypeAdapter URL -> C
    com.google.gson.TypeAdapterFactory URL_FACTORY -> D
    com.google.gson.TypeAdapter URI -> E
    com.google.gson.TypeAdapterFactory URI_FACTORY -> F
    com.google.gson.TypeAdapter INET_ADDRESS -> G
    com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY -> H
    com.google.gson.TypeAdapter UUID -> I
    com.google.gson.TypeAdapterFactory UUID_FACTORY -> J
    com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY -> K
    com.google.gson.TypeAdapter CALENDAR -> L
    com.google.gson.TypeAdapterFactory CALENDAR_FACTORY -> M
    com.google.gson.TypeAdapter LOCALE -> N
    com.google.gson.TypeAdapterFactory LOCALE_FACTORY -> O
    com.google.gson.TypeAdapter JSON_ELEMENT -> P
    com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY -> Q
    com.google.gson.TypeAdapterFactory ENUM_FACTORY -> R
    com.google.gson.TypeAdapterFactory newEnumTypeHierarchyFactory() -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> b
    com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter) -> b
com.google.gson.internal.bind.TypeAdapters$1 -> com.a.b.b.a.z:
    void write(com.google.gson.stream.JsonWriter,java.lang.Class) -> a
    java.lang.Class read(com.google.gson.stream.JsonReader) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$10 -> com.a.b.b.a.aa:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$11 -> com.a.b.b.a.ab:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$12 -> com.a.b.b.a.ac:
    java.lang.Character read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Character) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$13 -> com.a.b.b.a.ad:
    java.lang.String read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.String) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$14 -> com.a.b.b.a.ae:
    java.math.BigDecimal read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigDecimal) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$15 -> com.a.b.b.a.af:
    java.math.BigInteger read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigInteger) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$16 -> com.a.b.b.a.ag:
    java.lang.StringBuilder read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuilder) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$17 -> com.a.b.b.a.ah:
    java.lang.StringBuffer read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuffer) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$18 -> com.a.b.b.a.ai:
    java.net.URL read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URL) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$19 -> com.a.b.b.a.aj:
    java.net.URI read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URI) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$2 -> com.a.b.b.a.ak:
    java.util.BitSet read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.BitSet) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$20 -> com.a.b.b.a.al:
    java.net.InetAddress read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.InetAddress) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$21 -> com.a.b.b.a.am:
    java.util.UUID read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.UUID) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$22 -> com.a.b.b.a.an:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$22$1 -> com.a.b.b.a.ao:
    com.google.gson.TypeAdapter val$dateTypeAdapter -> a
    com.google.gson.internal.bind.TypeAdapters$22 this$0 -> b
    java.sql.Timestamp read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Timestamp) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$23 -> com.a.b.b.a.ap:
    java.util.Calendar read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Calendar) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$24 -> com.a.b.b.a.aq:
    java.util.Locale read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Locale) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$25 -> com.a.b.b.a.ar:
    com.google.gson.JsonElement read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$26 -> com.a.b.b.a.as:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$28 -> com.a.b.b.a.at:
    java.lang.Class val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$29 -> com.a.b.b.a.au:
    java.lang.Class val$unboxed -> a
    java.lang.Class val$boxed -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$3 -> com.a.b.b.a.av:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$30 -> com.a.b.b.a.aw:
    java.lang.Class val$base -> a
    java.lang.Class val$sub -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$31 -> com.a.b.b.a.ax:
    java.lang.Class val$clazz -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$32 -> com.a.b.b.a.ay:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
com.google.gson.internal.bind.TypeAdapters$4 -> com.a.b.b.a.az:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$5 -> com.a.b.b.a.ba:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$6 -> com.a.b.b.a.bb:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$7 -> com.a.b.b.a.bc:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$8 -> com.a.b.b.a.bd:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$9 -> com.a.b.b.a.be:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter -> com.a.b.b.a.bf:
    java.util.Map nameToConstant -> a
    java.util.Map constantToName -> b
    java.lang.Enum read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Enum) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.reflect.TypeToken -> com.a.b.c.a:
    java.lang.Class rawType -> a
    java.lang.reflect.Type type -> b
    int hashCode -> c
    java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class) -> a
    java.lang.Class getRawType() -> a
    java.lang.reflect.Type getType() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.gson.reflect.TypeToken get(java.lang.reflect.Type) -> a
    com.google.gson.reflect.TypeToken get(java.lang.Class) -> b
com.google.gson.stream.JsonReader -> com.a.b.d.a:
    char[] NON_EXECUTE_PREFIX -> a
    com.google.gson.stream.StringPool stringPool -> b
    java.io.Reader in -> c
    boolean lenient -> d
    char[] buffer -> e
    int pos -> f
    int limit -> g
    int bufferStartLine -> h
    int bufferStartColumn -> i
    com.google.gson.stream.JsonScope[] stack -> j
    int stackSize -> k
    com.google.gson.stream.JsonToken token -> l
    java.lang.String name -> m
    java.lang.String value -> n
    int valuePos -> o
    int valueLength -> p
    boolean skipping -> q
    void setLenient(boolean) -> a
    boolean isLenient() -> p
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    void expect(com.google.gson.stream.JsonToken) -> a
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    void consumeNonExecutePrefix() -> o
    com.google.gson.stream.JsonToken advance() -> q
    java.lang.String nextName() -> g
    java.lang.String nextString() -> h
    boolean nextBoolean() -> i
    void nextNull() -> j
    double nextDouble() -> k
    long nextLong() -> l
    int nextInt() -> m
    void close() -> close
    void skipValue() -> n
    void push(com.google.gson.stream.JsonScope) -> a
    com.google.gson.stream.JsonToken nextInArray(boolean) -> b
    com.google.gson.stream.JsonToken nextInObject(boolean) -> c
    com.google.gson.stream.JsonToken objectValue() -> r
    com.google.gson.stream.JsonToken nextValue() -> s
    boolean fillBuffer(int) -> a
    int getLineNumber() -> t
    int getColumnNumber() -> u
    int nextNonWhitespace(boolean) -> d
    void checkLenient() -> v
    void skipToEndOfLine() -> w
    boolean skipTo(java.lang.String) -> a
    java.lang.String nextString(char) -> a
    java.lang.String nextLiteral(boolean) -> e
    java.lang.String toString() -> toString
    char readEscapeCharacter() -> x
    com.google.gson.stream.JsonToken readLiteral() -> y
    com.google.gson.stream.JsonToken decodeLiteral() -> z
    com.google.gson.stream.JsonToken decodeNumber(char[],int,int) -> a
    java.io.IOException syntaxError(java.lang.String) -> b
    com.google.gson.stream.JsonToken access$000(com.google.gson.stream.JsonReader) -> a
    int access$100(com.google.gson.stream.JsonReader) -> b
    int access$200(com.google.gson.stream.JsonReader) -> c
    java.lang.String access$302(com.google.gson.stream.JsonReader,java.lang.String) -> a
    java.lang.String access$400(com.google.gson.stream.JsonReader) -> d
    java.lang.String access$402(com.google.gson.stream.JsonReader,java.lang.String) -> b
    com.google.gson.stream.JsonToken access$002(com.google.gson.stream.JsonReader,com.google.gson.stream.JsonToken) -> a
com.google.gson.stream.JsonReader$1 -> com.a.b.d.b:
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.stream.JsonReader$2 -> com.a.b.d.c:
    int[] $SwitchMap$com$google$gson$stream$JsonScope -> a
com.google.gson.stream.JsonScope -> com.a.b.d.d:
    com.google.gson.stream.JsonScope EMPTY_ARRAY -> a
    com.google.gson.stream.JsonScope NONEMPTY_ARRAY -> b
    com.google.gson.stream.JsonScope EMPTY_OBJECT -> c
    com.google.gson.stream.JsonScope DANGLING_NAME -> d
    com.google.gson.stream.JsonScope NONEMPTY_OBJECT -> e
    com.google.gson.stream.JsonScope EMPTY_DOCUMENT -> f
    com.google.gson.stream.JsonScope NONEMPTY_DOCUMENT -> g
    com.google.gson.stream.JsonScope CLOSED -> h
    com.google.gson.stream.JsonScope[] $VALUES -> i
    com.google.gson.stream.JsonScope[] values() -> values
    com.google.gson.stream.JsonScope valueOf(java.lang.String) -> valueOf
com.google.gson.stream.JsonToken -> com.a.b.d.e:
    com.google.gson.stream.JsonToken BEGIN_ARRAY -> a
    com.google.gson.stream.JsonToken END_ARRAY -> b
    com.google.gson.stream.JsonToken BEGIN_OBJECT -> c
    com.google.gson.stream.JsonToken END_OBJECT -> d
    com.google.gson.stream.JsonToken NAME -> e
    com.google.gson.stream.JsonToken STRING -> f
    com.google.gson.stream.JsonToken NUMBER -> g
    com.google.gson.stream.JsonToken BOOLEAN -> h
    com.google.gson.stream.JsonToken NULL -> i
    com.google.gson.stream.JsonToken END_DOCUMENT -> j
    com.google.gson.stream.JsonToken[] $VALUES -> k
    com.google.gson.stream.JsonToken[] values() -> values
    com.google.gson.stream.JsonToken valueOf(java.lang.String) -> valueOf
com.google.gson.stream.JsonWriter -> com.a.b.d.f:
    java.lang.String[] REPLACEMENT_CHARS -> a
    java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS -> b
    java.io.Writer out -> c
    java.util.List stack -> d
    java.lang.String indent -> e
    java.lang.String separator -> f
    boolean lenient -> g
    boolean htmlSafe -> h
    java.lang.String deferredName -> i
    boolean serializeNulls -> j
    void setIndent(java.lang.String) -> c
    void setLenient(boolean) -> b
    boolean isLenient() -> g
    void setHtmlSafe(boolean) -> c
    boolean isHtmlSafe() -> h
    void setSerializeNulls(boolean) -> d
    boolean getSerializeNulls() -> i
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String) -> a
    com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String) -> a
    com.google.gson.stream.JsonScope peek() -> a
    void replaceTop(com.google.gson.stream.JsonScope) -> a
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    void writeDeferredName() -> j
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
    void string(java.lang.String) -> d
    void newline() -> k
    void beforeName() -> l
    void beforeValue(boolean) -> e
com.google.gson.stream.JsonWriter$1 -> com.a.b.d.g:
    int[] $SwitchMap$com$google$gson$stream$JsonScope -> a
com.google.gson.stream.MalformedJsonException -> com.a.b.d.h:
com.google.gson.stream.StringPool -> com.a.b.d.i:
    java.lang.String[] pool -> a
    java.lang.String get(char[],int,int) -> a
com.j256.ormlite.android.AndroidCompiledStatement -> com.j256.ormlite.android.AndroidCompiledStatement:
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.String sql -> sql
    android.database.sqlite.SQLiteDatabase db -> db
    com.j256.ormlite.stmt.StatementBuilder$StatementType type -> type
    java.lang.String[] NO_STRING_ARGS -> NO_STRING_ARGS
    android.database.Cursor cursor -> cursor
    java.util.List args -> args
    java.lang.Integer max -> max
    int getColumnCount() -> getColumnCount
    java.lang.String getColumnName(int) -> getColumnName
    com.j256.ormlite.support.DatabaseResults runQuery(com.j256.ormlite.dao.ObjectCache) -> runQuery
    int runUpdate() -> runUpdate
    int runExecute() -> runExecute
    void close() -> close
    void closeQuietly() -> closeQuietly
    void setObject(int,java.lang.Object,com.j256.ormlite.field.SqlType) -> setObject
    void setMaxRows(int) -> setMaxRows
    void setQueryTimeout(long) -> setQueryTimeout
    android.database.Cursor getCursor() -> getCursor
    java.lang.String toString() -> toString
    int execSql(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.Object[]) -> execSql
    void isInPrep() -> isInPrep
    java.lang.Object[] getArgArray() -> getArgArray
    java.lang.String[] getStringArray() -> getStringArray
com.j256.ormlite.android.AndroidCompiledStatement$1 -> com.j256.ormlite.android.AndroidCompiledStatement$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
com.j256.ormlite.android.AndroidConnectionSource -> com.j256.ormlite.android.AndroidConnectionSource:
    com.j256.ormlite.logger.Logger logger -> logger
    android.database.sqlite.SQLiteOpenHelper helper -> helper
    android.database.sqlite.SQLiteDatabase sqliteDatabase -> sqliteDatabase
    com.j256.ormlite.android.AndroidDatabaseConnection connection -> connection
    boolean isOpen -> isOpen
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    com.j256.ormlite.support.DatabaseConnection getReadOnlyConnection() -> getReadOnlyConnection
    com.j256.ormlite.support.DatabaseConnection getReadWriteConnection() -> getReadWriteConnection
    void releaseConnection(com.j256.ormlite.support.DatabaseConnection) -> releaseConnection
    boolean saveSpecialConnection(com.j256.ormlite.support.DatabaseConnection) -> saveSpecialConnection
    void clearSpecialConnection(com.j256.ormlite.support.DatabaseConnection) -> clearSpecialConnection
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.db.DatabaseType getDatabaseType() -> getDatabaseType
    boolean isOpen() -> isOpen
    java.lang.String toString() -> toString
com.j256.ormlite.android.AndroidDatabaseConnection -> com.j256.ormlite.android.AndroidDatabaseConnection:
    java.lang.String ANDROID_VERSION -> ANDROID_VERSION
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.String[] NO_STRING_ARGS -> NO_STRING_ARGS
    android.database.sqlite.SQLiteDatabase db -> db
    boolean readWrite -> readWrite
    boolean isAutoCommitSupported() -> isAutoCommitSupported
    boolean isAutoCommit() -> isAutoCommit
    void setAutoCommit(boolean) -> setAutoCommit
    java.sql.Savepoint setSavePoint(java.lang.String) -> setSavePoint
    boolean isReadWrite() -> isReadWrite
    void commit(java.sql.Savepoint) -> commit
    void rollback(java.sql.Savepoint) -> rollback
    int executeStatement(java.lang.String,int) -> executeStatement
    com.j256.ormlite.support.CompiledStatement compileStatement(java.lang.String,com.j256.ormlite.stmt.StatementBuilder$StatementType,com.j256.ormlite.field.FieldType[]) -> compileStatement
    com.j256.ormlite.support.CompiledStatement compileStatement(java.lang.String,com.j256.ormlite.stmt.StatementBuilder$StatementType,com.j256.ormlite.field.FieldType[],int) -> compileStatement
    int insert(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.support.GeneratedKeyHolder) -> insert
    int update(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> update
    int delete(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> delete
    java.lang.Object queryForOne(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache) -> queryForOne
    long queryForLong(java.lang.String) -> queryForLong
    long queryForLong(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> queryForLong
    void close() -> close
    void closeQuietly() -> closeQuietly
    boolean isClosed() -> isClosed
    boolean isTableExists(java.lang.String) -> isTableExists
    int update(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],java.lang.String) -> update
    void bindArgs(android.database.sqlite.SQLiteStatement,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> bindArgs
    java.lang.String[] toStrings(java.lang.Object[]) -> toStrings
    java.lang.String toString() -> toString
com.j256.ormlite.android.AndroidDatabaseConnection$1 -> com.j256.ormlite.android.AndroidDatabaseConnection$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
com.j256.ormlite.android.AndroidDatabaseConnection$OurSavePoint -> com.j256.ormlite.android.AndroidDatabaseConnection$OurSavePoint:
    java.lang.String name -> name
    int getSavepointId() -> getSavepointId
    java.lang.String getSavepointName() -> getSavepointName
com.j256.ormlite.android.AndroidDatabaseResults -> com.j256.ormlite.android.AndroidDatabaseResults:
    int MIN_NUM_COLUMN_NAMES_MAP -> MIN_NUM_COLUMN_NAMES_MAP
    android.database.Cursor cursor -> cursor
    java.lang.String[] columnNames -> columnNames
    java.util.Map columnNameMap -> columnNameMap
    com.j256.ormlite.dao.ObjectCache objectCache -> objectCache
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    int getColumnCount() -> getColumnCount
    java.lang.String[] getColumnNames() -> getColumnNames
    boolean first() -> first
    boolean next() -> next
    boolean last() -> last
    boolean previous() -> previous
    boolean moveRelative(int) -> moveRelative
    boolean moveAbsolute(int) -> moveAbsolute
    int getCount() -> getCount
    int getPosition() -> getPosition
    int findColumn(java.lang.String) -> findColumn
    java.lang.String getString(int) -> getString
    boolean getBoolean(int) -> getBoolean
    char getChar(int) -> getChar
    byte getByte(int) -> getByte
    byte[] getBytes(int) -> getBytes
    short getShort(int) -> getShort
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    java.sql.Timestamp getTimestamp(int) -> getTimestamp
    java.io.InputStream getBlobStream(int) -> getBlobStream
    java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    boolean wasNull(int) -> wasNull
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void close() -> close
    void closeQuietly() -> closeQuietly
    android.database.Cursor getRawCursor() -> getRawCursor
    java.lang.String toString() -> toString
    int lookupColumn(java.lang.String) -> lookupColumn
com.j256.ormlite.android.AndroidLog -> com.j256.ormlite.android.AndroidLog:
    java.lang.String ALL_LOGS_NAME -> ALL_LOGS_NAME
    int REFRESH_LEVEL_CACHE_EVERY -> REFRESH_LEVEL_CACHE_EVERY
    int MAX_TAG_LENGTH -> MAX_TAG_LENGTH
    java.lang.String className -> className
    int levelCacheC -> levelCacheC
    boolean[] levelCache -> levelCache
    boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level) -> isLevelEnabled
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable) -> log
    void refreshLevelCache() -> refreshLevelCache
    boolean isLevelEnabledInternal(int) -> isLevelEnabledInternal
    int levelToAndroidLevel(com.j256.ormlite.logger.Log$Level) -> levelToAndroidLevel
com.j256.ormlite.android.AndroidLog$1 -> com.j256.ormlite.android.AndroidLog$1:
    int[] $SwitchMap$com$j256$ormlite$logger$Log$Level -> $SwitchMap$com$j256$ormlite$logger$Log$Level
com.j256.ormlite.android.DatabaseTableConfigUtil -> com.j256.ormlite.android.DatabaseTableConfigUtil:
    java.lang.Class annotationFactoryClazz -> annotationFactoryClazz
    java.lang.reflect.Field elementsField -> elementsField
    java.lang.Class annotationMemberClazz -> annotationMemberClazz
    java.lang.reflect.Field nameField -> nameField
    java.lang.reflect.Field valueField -> valueField
    int workedC -> workedC
    int[] configFieldNums -> configFieldNums
    int COLUMN_NAME -> COLUMN_NAME
    int DATA_TYPE -> DATA_TYPE
    int DEFAULT_VALUE -> DEFAULT_VALUE
    int WIDTH -> WIDTH
    int CAN_BE_NULL -> CAN_BE_NULL
    int ID -> ID
    int GENERATED_ID -> GENERATED_ID
    int GENERATED_ID_SEQUENCE -> GENERATED_ID_SEQUENCE
    int FOREIGN -> FOREIGN
    int USE_GET_SET -> USE_GET_SET
    int UNKNOWN_ENUM_NAME -> UNKNOWN_ENUM_NAME
    int THROW_IF_NULL -> THROW_IF_NULL
    int PERSISTED -> PERSISTED
    int FORMAT -> FORMAT
    int UNIQUE -> UNIQUE
    int UNIQUE_COMBO -> UNIQUE_COMBO
    int INDEX -> INDEX
    int UNIQUE_INDEX -> UNIQUE_INDEX
    int INDEX_NAME -> INDEX_NAME
    int UNIQUE_INDEX_NAME -> UNIQUE_INDEX_NAME
    int FOREIGN_AUTO_REFRESH -> FOREIGN_AUTO_REFRESH
    int MAX_FOREIGN_AUTO_REFRESH_LEVEL -> MAX_FOREIGN_AUTO_REFRESH_LEVEL
    int PERSISTER_CLASS -> PERSISTER_CLASS
    int ALLOW_GENERATED_ID_INSERT -> ALLOW_GENERATED_ID_INSERT
    int COLUMN_DEFINITON -> COLUMN_DEFINITON
    int FOREIGN_AUTO_CREATE -> FOREIGN_AUTO_CREATE
    int VERSION -> VERSION
    int FOREIGN_COLUMN_NAME -> FOREIGN_COLUMN_NAME
    com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> fromClass
    int getWorkedC() -> getWorkedC
    int[] lookupClasses() -> lookupClasses
    int configFieldNameToNum(java.lang.String) -> configFieldNameToNum
    com.j256.ormlite.field.DatabaseFieldConfig configFromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field) -> configFromField
    com.j256.ormlite.field.DatabaseFieldConfig buildConfig(com.j256.ormlite.field.DatabaseField,java.lang.String,java.lang.reflect.Field) -> buildConfig
    void assignConfigField(int,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.reflect.Field,java.lang.Object) -> assignConfigField
    java.lang.String valueIfNotBlank(java.lang.String) -> valueIfNotBlank
com.j256.ormlite.android.DatabaseTableConfigUtil$DatabaseFieldSample -> com.j256.ormlite.android.DatabaseTableConfigUtil$DatabaseFieldSample:
    java.lang.String field -> field
com.j256.ormlite.android.apptools.OpenHelperManager -> com.j256.ormlite.android.apptools.OpenHelperManager:
    java.lang.String HELPER_CLASS_RESOURCE_NAME -> HELPER_CLASS_RESOURCE_NAME
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.Class helperClass -> helperClass
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean wasClosed -> wasClosed
    int instanceCount -> instanceCount
    void setOpenHelperClass(java.lang.Class) -> setOpenHelperClass
    void setHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> setHelper
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper(android.content.Context,java.lang.Class) -> getHelper
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper(android.content.Context) -> getHelper
    void release() -> release
    void releaseHelper() -> releaseHelper
    void innerSetHelperClass(java.lang.Class) -> innerSetHelperClass
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper loadHelper(android.content.Context,java.lang.Class) -> loadHelper
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper constructHelper(android.content.Context,java.lang.Class) -> constructHelper
    java.lang.Class lookupHelperClass(android.content.Context,java.lang.Class) -> lookupHelperClass
com.j256.ormlite.android.apptools.OrmLiteBaseActivity -> com.j256.ormlite.android.apptools.OrmLiteBaseActivity:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
    java.lang.String toString() -> toString
com.j256.ormlite.android.apptools.OrmLiteBaseActivityGroup -> com.j256.ormlite.android.apptools.OrmLiteBaseActivityGroup:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
com.j256.ormlite.android.apptools.OrmLiteBaseListActivity -> com.j256.ormlite.android.apptools.OrmLiteBaseListActivity:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
com.j256.ormlite.android.apptools.OrmLiteBaseService -> com.j256.ormlite.android.apptools.OrmLiteBaseService:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
com.j256.ormlite.android.apptools.OrmLiteBaseTabActivity -> com.j256.ormlite.android.apptools.OrmLiteBaseTabActivity:
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper helper -> helper
    boolean created -> created
    boolean destroyed -> destroyed
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelper() -> getHelper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper getHelperInternal(android.content.Context) -> getHelperInternal
    void releaseHelper(com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper) -> releaseHelper
com.j256.ormlite.android.apptools.OrmLiteConfigUtil -> com.j256.ormlite.android.apptools.OrmLiteConfigUtil:
    java.lang.String RESOURCE_DIR_NAME -> RESOURCE_DIR_NAME
    java.lang.String RAW_DIR_NAME -> RAW_DIR_NAME
    int maxFindSourceLevel -> maxFindSourceLevel
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    void main(java.lang.String[]) -> main
    void writeConfigFile(java.lang.String) -> writeConfigFile
    void writeConfigFile(java.lang.String,java.lang.Class[]) -> writeConfigFile
    void writeConfigFile(java.io.File) -> writeConfigFile
    void writeConfigFile(java.io.File,java.io.File) -> writeConfigFile
    void writeConfigFile(java.io.File,java.lang.Class[]) -> writeConfigFile
    void writeConfigFile(java.io.OutputStream,java.io.File) -> writeConfigFile
    void writeConfigFile(java.io.OutputStream,java.lang.Class[]) -> writeConfigFile
    java.io.File findRawDir(java.io.File) -> findRawDir
    void writeHeader(java.io.BufferedWriter) -> writeHeader
    void findAnnotatedClasses(java.util.List,java.io.File,int) -> findAnnotatedClasses
    void writeConfigForTable(java.io.BufferedWriter,java.lang.Class) -> writeConfigForTable
    boolean classHasAnnotations(java.lang.Class) -> classHasAnnotations
    java.lang.String getPackageOfClass(java.io.File) -> getPackageOfClass
    java.io.File findResRawDir(java.io.File) -> findResRawDir
com.j256.ormlite.android.apptools.OrmLiteConfigUtil$1 -> com.j256.ormlite.android.apptools.OrmLiteConfigUtil$1:
    boolean accept(java.io.File) -> accept
com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper -> com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.android.AndroidConnectionSource connectionSource -> connectionSource
    boolean isOpen -> isOpen
    void onCreate(android.database.sqlite.SQLiteDatabase,com.j256.ormlite.support.ConnectionSource) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,com.j256.ormlite.support.ConnectionSource,int,int) -> onUpgrade
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void close() -> close
    boolean isOpen() -> isOpen
    com.j256.ormlite.dao.Dao getDao(java.lang.Class) -> getDao
    com.j256.ormlite.dao.RuntimeExceptionDao getRuntimeExceptionDao(java.lang.Class) -> getRuntimeExceptionDao
    java.lang.String toString() -> toString
    java.io.InputStream openFileId(android.content.Context,int) -> openFileId
    java.io.InputStream openFile(java.io.File) -> openFile
com.j256.ormlite.dao.BaseDaoImpl -> com.j256.ormlite.dao.BaseDaoImpl:
    boolean initialized -> initialized
    com.j256.ormlite.stmt.StatementExecutor statementExecutor -> statementExecutor
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    java.lang.Class dataClass -> dataClass
    com.j256.ormlite.table.DatabaseTableConfig tableConfig -> tableConfig
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    com.j256.ormlite.dao.CloseableIterator lastIterator -> lastIterator
    com.j256.ormlite.table.ObjectFactory objectFactory -> objectFactory
    java.lang.ThreadLocal daoConfigLevelLocal -> daoConfigLevelLocal
    com.j256.ormlite.dao.ReferenceObjectCache defaultObjectCache -> defaultObjectCache
    com.j256.ormlite.dao.ObjectCache objectCache -> objectCache
    void initialize() -> initialize
    java.lang.Object queryForId(java.lang.Object) -> queryForId
    java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery) -> queryForFirst
    java.util.List queryForAll() -> queryForAll
    java.util.List queryForEq(java.lang.String,java.lang.Object) -> queryForEq
    com.j256.ormlite.stmt.QueryBuilder queryBuilder() -> queryBuilder
    com.j256.ormlite.stmt.UpdateBuilder updateBuilder() -> updateBuilder
    com.j256.ormlite.stmt.DeleteBuilder deleteBuilder() -> deleteBuilder
    java.util.List query(com.j256.ormlite.stmt.PreparedQuery) -> query
    java.util.List queryForMatching(java.lang.Object) -> queryForMatching
    java.util.List queryForMatchingArgs(java.lang.Object) -> queryForMatchingArgs
    java.util.List queryForFieldValues(java.util.Map) -> queryForFieldValues
    java.util.List queryForFieldValuesArgs(java.util.Map) -> queryForFieldValuesArgs
    java.lang.Object queryForSameId(java.lang.Object) -> queryForSameId
    int create(java.lang.Object) -> create
    java.lang.Object createIfNotExists(java.lang.Object) -> createIfNotExists
    com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object) -> createOrUpdate
    int update(java.lang.Object) -> update
    int updateId(java.lang.Object,java.lang.Object) -> updateId
    int update(com.j256.ormlite.stmt.PreparedUpdate) -> update
    int refresh(java.lang.Object) -> refresh
    int delete(java.lang.Object) -> delete
    int deleteById(java.lang.Object) -> deleteById
    int delete(java.util.Collection) -> delete
    int deleteIds(java.util.Collection) -> deleteIds
    int delete(com.j256.ormlite.stmt.PreparedDelete) -> delete
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery) -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery) -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int) -> iterator
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[]) -> queryRaw
    long queryRawValue(java.lang.String,java.lang.String[]) -> queryRawValue
    int executeRaw(java.lang.String,java.lang.String[]) -> executeRaw
    int executeRawNoArgs(java.lang.String) -> executeRawNoArgs
    int updateRaw(java.lang.String,java.lang.String[]) -> updateRaw
    java.lang.Object callBatchTasks(java.util.concurrent.Callable) -> callBatchTasks
    java.lang.String objectToString(java.lang.Object) -> objectToString
    boolean objectsEqual(java.lang.Object,java.lang.Object) -> objectsEqual
    java.lang.Object extractId(java.lang.Object) -> extractId
    java.lang.Class getDataClass() -> getDataClass
    com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class) -> findForeignFieldType
    boolean isUpdatable() -> isUpdatable
    boolean isTableExists() -> isTableExists
    long countOf() -> countOf
    long countOf(com.j256.ormlite.stmt.PreparedQuery) -> countOf
    void assignEmptyForeignCollection(java.lang.Object,java.lang.String) -> assignEmptyForeignCollection
    com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String) -> getEmptyForeignCollection
    void setObjectCache(boolean) -> setObjectCache
    void setObjectCache(com.j256.ormlite.dao.ObjectCache) -> setObjectCache
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void clearObjectCache() -> clearObjectCache
    void clearAllInternalObjectCaches() -> clearAllInternalObjectCaches
    java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults) -> mapSelectStarRow
    com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper() -> getSelectStarRowMapper
    com.j256.ormlite.dao.RawRowMapper getRawRowMapper() -> getRawRowMapper
    boolean idExists(java.lang.Object) -> idExists
    com.j256.ormlite.support.DatabaseConnection startThreadConnection() -> startThreadConnection
    void endThreadConnection(com.j256.ormlite.support.DatabaseConnection) -> endThreadConnection
    void setAutoCommit(boolean) -> setAutoCommit
    void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean) -> setAutoCommit
    boolean isAutoCommit() -> isAutoCommit
    boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection) -> isAutoCommit
    void commit(com.j256.ormlite.support.DatabaseConnection) -> commit
    void rollBack(com.j256.ormlite.support.DatabaseConnection) -> rollBack
    com.j256.ormlite.table.ObjectFactory getObjectFactory() -> getObjectFactory
    void setObjectFactory(com.j256.ormlite.table.ObjectFactory) -> setObjectFactory
    com.j256.ormlite.table.DatabaseTableConfig getTableConfig() -> getTableConfig
    com.j256.ormlite.table.TableInfo getTableInfo() -> getTableInfo
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void setConnectionSource(com.j256.ormlite.support.ConnectionSource) -> setConnectionSource
    void setTableConfig(com.j256.ormlite.table.DatabaseTableConfig) -> setTableConfig
    com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createDao
    com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createDao
    void checkForInitialized() -> checkForInitialized
    com.j256.ormlite.dao.ForeignCollection makeEmptyForeignCollection(java.lang.Object,java.lang.String) -> makeEmptyForeignCollection
    com.j256.ormlite.dao.CloseableIterator createIterator(int) -> createIterator
    com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int) -> createIterator
    java.util.List queryForMatching(java.lang.Object,boolean) -> queryForMatching
    java.util.List queryForFieldValues(java.util.Map,boolean) -> queryForFieldValues
    java.util.Iterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator access$100(com.j256.ormlite.dao.BaseDaoImpl,int) -> access$100
    com.j256.ormlite.dao.CloseableIterator access$200(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery,int) -> access$200
com.j256.ormlite.dao.BaseDaoImpl$1 -> com.j256.ormlite.dao.BaseDaoImpl$1:
    com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.j256.ormlite.dao.BaseDaoImpl$2 -> com.j256.ormlite.dao.BaseDaoImpl$2:
    com.j256.ormlite.dao.BaseDaoImpl this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
com.j256.ormlite.dao.BaseDaoImpl$3 -> com.j256.ormlite.dao.BaseDaoImpl$3:
    com.j256.ormlite.stmt.PreparedQuery val$preparedQuery -> val$preparedQuery
    com.j256.ormlite.dao.BaseDaoImpl this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
com.j256.ormlite.dao.BaseDaoImpl$4 -> com.j256.ormlite.dao.BaseDaoImpl$4:
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.BaseDaoImpl$5 -> com.j256.ormlite.dao.BaseDaoImpl$5:
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray -> com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray:
    com.j256.ormlite.dao.BaseDaoImpl[] daoArray -> daoArray
    int daoArrayC -> daoArrayC
    void addDao(com.j256.ormlite.dao.BaseDaoImpl) -> addDao
    int size() -> size
    com.j256.ormlite.dao.BaseDaoImpl get(int) -> get
    void clear() -> clear
com.j256.ormlite.dao.BaseForeignCollection -> com.j256.ormlite.dao.BaseForeignCollection:
    long serialVersionUID -> serialVersionUID
    com.j256.ormlite.dao.Dao dao -> dao
    com.j256.ormlite.field.FieldType foreignFieldType -> foreignFieldType
    java.lang.Object parentId -> parentId
    com.j256.ormlite.stmt.PreparedQuery preparedQuery -> preparedQuery
    java.lang.String orderColumn -> orderColumn
    boolean orderAscending -> orderAscending
    java.lang.Object parent -> parent
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    int update(java.lang.Object) -> update
    int refresh(java.lang.Object) -> refresh
    com.j256.ormlite.stmt.PreparedQuery getPreparedQuery() -> getPreparedQuery
com.j256.ormlite.dao.CloseableIterable -> com.j256.ormlite.dao.CloseableIterable:
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
com.j256.ormlite.dao.CloseableIterator -> com.j256.ormlite.dao.CloseableIterator:
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.support.DatabaseResults getRawResults() -> getRawResults
    void moveToNext() -> moveToNext
    java.lang.Object first() -> first
    java.lang.Object previous() -> previous
    java.lang.Object current() -> current
    java.lang.Object nextThrow() -> nextThrow
    java.lang.Object moveRelative(int) -> moveRelative
com.j256.ormlite.dao.CloseableWrappedIterable -> com.j256.ormlite.dao.CloseableWrappedIterable:
    void close() -> close
com.j256.ormlite.dao.CloseableWrappedIterableImpl -> com.j256.ormlite.dao.CloseableWrappedIterableImpl:
    com.j256.ormlite.dao.CloseableIterable iterable -> iterable
    com.j256.ormlite.dao.CloseableIterator iterator -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    void close() -> close
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.Dao -> com.j256.ormlite.dao.Dao:
    java.lang.Object queryForId(java.lang.Object) -> queryForId
    java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery) -> queryForFirst
    java.util.List queryForAll() -> queryForAll
    java.util.List queryForEq(java.lang.String,java.lang.Object) -> queryForEq
    java.util.List queryForMatching(java.lang.Object) -> queryForMatching
    java.util.List queryForMatchingArgs(java.lang.Object) -> queryForMatchingArgs
    java.util.List queryForFieldValues(java.util.Map) -> queryForFieldValues
    java.util.List queryForFieldValuesArgs(java.util.Map) -> queryForFieldValuesArgs
    java.lang.Object queryForSameId(java.lang.Object) -> queryForSameId
    com.j256.ormlite.stmt.QueryBuilder queryBuilder() -> queryBuilder
    com.j256.ormlite.stmt.UpdateBuilder updateBuilder() -> updateBuilder
    com.j256.ormlite.stmt.DeleteBuilder deleteBuilder() -> deleteBuilder
    java.util.List query(com.j256.ormlite.stmt.PreparedQuery) -> query
    int create(java.lang.Object) -> create
    java.lang.Object createIfNotExists(java.lang.Object) -> createIfNotExists
    com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object) -> createOrUpdate
    int update(java.lang.Object) -> update
    int updateId(java.lang.Object,java.lang.Object) -> updateId
    int update(com.j256.ormlite.stmt.PreparedUpdate) -> update
    int refresh(java.lang.Object) -> refresh
    int delete(java.lang.Object) -> delete
    int deleteById(java.lang.Object) -> deleteById
    int delete(java.util.Collection) -> delete
    int deleteIds(java.util.Collection) -> deleteIds
    int delete(com.j256.ormlite.stmt.PreparedDelete) -> delete
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery) -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int) -> iterator
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery) -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[]) -> queryRaw
    long queryRawValue(java.lang.String,java.lang.String[]) -> queryRawValue
    int executeRaw(java.lang.String,java.lang.String[]) -> executeRaw
    int executeRawNoArgs(java.lang.String) -> executeRawNoArgs
    int updateRaw(java.lang.String,java.lang.String[]) -> updateRaw
    java.lang.Object callBatchTasks(java.util.concurrent.Callable) -> callBatchTasks
    java.lang.String objectToString(java.lang.Object) -> objectToString
    boolean objectsEqual(java.lang.Object,java.lang.Object) -> objectsEqual
    java.lang.Object extractId(java.lang.Object) -> extractId
    java.lang.Class getDataClass() -> getDataClass
    com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class) -> findForeignFieldType
    boolean isUpdatable() -> isUpdatable
    boolean isTableExists() -> isTableExists
    long countOf() -> countOf
    long countOf(com.j256.ormlite.stmt.PreparedQuery) -> countOf
    void assignEmptyForeignCollection(java.lang.Object,java.lang.String) -> assignEmptyForeignCollection
    com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String) -> getEmptyForeignCollection
    void setObjectCache(boolean) -> setObjectCache
    void setObjectCache(com.j256.ormlite.dao.ObjectCache) -> setObjectCache
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void clearObjectCache() -> clearObjectCache
    java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults) -> mapSelectStarRow
    com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper() -> getSelectStarRowMapper
    com.j256.ormlite.dao.RawRowMapper getRawRowMapper() -> getRawRowMapper
    boolean idExists(java.lang.Object) -> idExists
    com.j256.ormlite.support.DatabaseConnection startThreadConnection() -> startThreadConnection
    void endThreadConnection(com.j256.ormlite.support.DatabaseConnection) -> endThreadConnection
    void setAutoCommit(boolean) -> setAutoCommit
    void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean) -> setAutoCommit
    boolean isAutoCommit() -> isAutoCommit
    boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection) -> isAutoCommit
    void commit(com.j256.ormlite.support.DatabaseConnection) -> commit
    void rollBack(com.j256.ormlite.support.DatabaseConnection) -> rollBack
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void setObjectFactory(com.j256.ormlite.table.ObjectFactory) -> setObjectFactory
com.j256.ormlite.dao.Dao$CreateOrUpdateStatus -> com.j256.ormlite.dao.Dao$CreateOrUpdateStatus:
    boolean created -> created
    boolean updated -> updated
    int numLinesChanged -> numLinesChanged
    boolean isCreated() -> isCreated
    boolean isUpdated() -> isUpdated
    int getNumLinesChanged() -> getNumLinesChanged
com.j256.ormlite.dao.DaoManager -> com.j256.ormlite.dao.DaoManager:
    java.util.Map configMap -> configMap
    java.util.Map classMap -> classMap
    java.util.Map tableConfigMap -> tableConfigMap
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createDao
    com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> lookupDao
    com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createDao
    com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> lookupDao
    void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao) -> registerDao
    void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao) -> unregisterDao
    void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao) -> registerDaoWithTableConfig
    void clearCache() -> clearCache
    void clearDaoCache() -> clearDaoCache
    void addCachedDatabaseConfigs(java.util.Collection) -> addCachedDatabaseConfigs
    void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao) -> addDaoToClassMap
    void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao) -> removeDaoToClassMap
    void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao) -> addDaoToTableMap
    com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource) -> lookupDao
    com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource) -> lookupDao
    java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[]) -> findConstructor
    java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createDaoFromConfig
    com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> doCreateDao
com.j256.ormlite.dao.DaoManager$ClassConnectionSource -> com.j256.ormlite.dao.DaoManager$ClassConnectionSource:
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    java.lang.Class clazz -> clazz
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource -> com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource:
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    com.j256.ormlite.table.DatabaseTableConfig tableConfig -> tableConfig
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.j256.ormlite.dao.EagerForeignCollection -> com.j256.ormlite.dao.EagerForeignCollection:
    long serialVersionUID -> serialVersionUID
    java.util.List results -> results
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iteratorThrow() -> iteratorThrow
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    void close() -> close
    void closeLastIterator() -> closeLastIterator
    boolean isEager() -> isEager
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    int updateAll() -> updateAll
    int refreshAll() -> refreshAll
    int refreshCollection() -> refreshCollection
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Iterator iterator() -> iterator
    java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection) -> access$000
com.j256.ormlite.dao.EagerForeignCollection$1 -> com.j256.ormlite.dao.EagerForeignCollection$1:
    int offset -> offset
    com.j256.ormlite.dao.EagerForeignCollection this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object first() -> first
    java.lang.Object next() -> next
    java.lang.Object nextThrow() -> nextThrow
    java.lang.Object current() -> current
    java.lang.Object previous() -> previous
    java.lang.Object moveRelative(int) -> moveRelative
    void remove() -> remove
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.support.DatabaseResults getRawResults() -> getRawResults
    void moveToNext() -> moveToNext
com.j256.ormlite.dao.ForeignCollection -> com.j256.ormlite.dao.ForeignCollection:
    com.j256.ormlite.dao.CloseableIterator iteratorThrow() -> iteratorThrow
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    boolean isEager() -> isEager
    int update(java.lang.Object) -> update
    int updateAll() -> updateAll
    int refresh(java.lang.Object) -> refresh
    int refreshAll() -> refreshAll
    int refreshCollection() -> refreshCollection
    boolean add(java.lang.Object) -> add
com.j256.ormlite.dao.GenericRawResults -> com.j256.ormlite.dao.GenericRawResults:
    int getNumberColumns() -> getNumberColumns
    java.lang.String[] getColumnNames() -> getColumnNames
    java.util.List getResults() -> getResults
    java.lang.Object getFirstResult() -> getFirstResult
    void close() -> close
com.j256.ormlite.dao.LazyForeignCollection -> com.j256.ormlite.dao.LazyForeignCollection:
    long serialVersionUID -> serialVersionUID
    com.j256.ormlite.dao.CloseableIterator lastIterator -> lastIterator
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iteratorThrow() -> iteratorThrow
    com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow() -> seperateIteratorThrow
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    boolean isEager() -> isEager
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    int updateAll() -> updateAll
    int refreshAll() -> refreshAll
    int refreshCollection() -> refreshCollection
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.LazyForeignCollection$1 -> com.j256.ormlite.dao.LazyForeignCollection$1:
    com.j256.ormlite.dao.LazyForeignCollection this$0 -> this$0
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.dao.LruObjectCache -> com.j256.ormlite.dao.LruObjectCache:
    int capacity -> capacity
    java.util.concurrent.ConcurrentHashMap classMaps -> classMaps
    void registerClass(java.lang.Class) -> registerClass
    java.lang.Object get(java.lang.Class,java.lang.Object) -> get
    void put(java.lang.Class,java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Class) -> clear
    void clearAll() -> clearAll
    void remove(java.lang.Class,java.lang.Object) -> remove
    java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object) -> updateId
    int size(java.lang.Class) -> size
    int sizeAll() -> sizeAll
    java.util.Map getMapForClass(java.lang.Class) -> getMapForClass
com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap -> com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap:
    long serialVersionUID -> serialVersionUID
    int capacity -> capacity
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
com.j256.ormlite.dao.ObjectCache -> com.j256.ormlite.dao.ObjectCache:
    void registerClass(java.lang.Class) -> registerClass
    java.lang.Object get(java.lang.Class,java.lang.Object) -> get
    void put(java.lang.Class,java.lang.Object,java.lang.Object) -> put
    void remove(java.lang.Class,java.lang.Object) -> remove
    java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object) -> updateId
    void clear(java.lang.Class) -> clear
    void clearAll() -> clearAll
    int size(java.lang.Class) -> size
    int sizeAll() -> sizeAll
com.j256.ormlite.dao.RawRowMapper -> com.j256.ormlite.dao.RawRowMapper:
    java.lang.Object mapRow(java.lang.String[],java.lang.String[]) -> mapRow
com.j256.ormlite.dao.ReferenceObjectCache -> com.j256.ormlite.dao.ReferenceObjectCache:
    java.util.concurrent.ConcurrentHashMap classMaps -> classMaps
    boolean useWeak -> useWeak
    com.j256.ormlite.dao.ReferenceObjectCache makeWeakCache() -> makeWeakCache
    com.j256.ormlite.dao.ReferenceObjectCache makeSoftCache() -> makeSoftCache
    void registerClass(java.lang.Class) -> registerClass
    java.lang.Object get(java.lang.Class,java.lang.Object) -> get
    void put(java.lang.Class,java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Class) -> clear
    void clearAll() -> clearAll
    void remove(java.lang.Class,java.lang.Object) -> remove
    java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object) -> updateId
    int size(java.lang.Class) -> size
    int sizeAll() -> sizeAll
    void cleanNullReferences(java.lang.Class) -> cleanNullReferences
    void cleanNullReferencesAll() -> cleanNullReferencesAll
    void cleanMap(java.util.Map) -> cleanMap
    java.util.Map getMapForClass(java.lang.Class) -> getMapForClass
com.j256.ormlite.dao.RuntimeExceptionDao -> com.j256.ormlite.dao.RuntimeExceptionDao:
    com.j256.ormlite.logger.Log$Level LOG_LEVEL -> LOG_LEVEL
    com.j256.ormlite.dao.Dao dao -> dao
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createDao
    com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createDao
    java.lang.Object queryForId(java.lang.Object) -> queryForId
    java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery) -> queryForFirst
    java.util.List queryForAll() -> queryForAll
    java.util.List queryForEq(java.lang.String,java.lang.Object) -> queryForEq
    java.util.List queryForMatching(java.lang.Object) -> queryForMatching
    java.util.List queryForMatchingArgs(java.lang.Object) -> queryForMatchingArgs
    java.util.List queryForFieldValues(java.util.Map) -> queryForFieldValues
    java.util.List queryForFieldValuesArgs(java.util.Map) -> queryForFieldValuesArgs
    java.lang.Object queryForSameId(java.lang.Object) -> queryForSameId
    com.j256.ormlite.stmt.QueryBuilder queryBuilder() -> queryBuilder
    com.j256.ormlite.stmt.UpdateBuilder updateBuilder() -> updateBuilder
    com.j256.ormlite.stmt.DeleteBuilder deleteBuilder() -> deleteBuilder
    java.util.List query(com.j256.ormlite.stmt.PreparedQuery) -> query
    int create(java.lang.Object) -> create
    java.lang.Object createIfNotExists(java.lang.Object) -> createIfNotExists
    com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object) -> createOrUpdate
    int update(java.lang.Object) -> update
    int updateId(java.lang.Object,java.lang.Object) -> updateId
    int update(com.j256.ormlite.stmt.PreparedUpdate) -> update
    int refresh(java.lang.Object) -> refresh
    int delete(java.lang.Object) -> delete
    int deleteById(java.lang.Object) -> deleteById
    int delete(java.util.Collection) -> delete
    int deleteIds(java.util.Collection) -> deleteIds
    int delete(com.j256.ormlite.stmt.PreparedDelete) -> delete
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    com.j256.ormlite.dao.CloseableIterator iterator(int) -> iterator
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable() -> getWrappedIterable
    com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery) -> getWrappedIterable
    void closeLastIterator() -> closeLastIterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery) -> iterator
    com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int) -> iterator
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[]) -> queryRaw
    long queryRawValue(java.lang.String,java.lang.String[]) -> queryRawValue
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[]) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[]) -> queryRaw
    int executeRaw(java.lang.String,java.lang.String[]) -> executeRaw
    int executeRawNoArgs(java.lang.String) -> executeRawNoArgs
    int updateRaw(java.lang.String,java.lang.String[]) -> updateRaw
    java.lang.Object callBatchTasks(java.util.concurrent.Callable) -> callBatchTasks
    java.lang.String objectToString(java.lang.Object) -> objectToString
    boolean objectsEqual(java.lang.Object,java.lang.Object) -> objectsEqual
    java.lang.Object extractId(java.lang.Object) -> extractId
    java.lang.Class getDataClass() -> getDataClass
    com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class) -> findForeignFieldType
    boolean isUpdatable() -> isUpdatable
    boolean isTableExists() -> isTableExists
    long countOf() -> countOf
    long countOf(com.j256.ormlite.stmt.PreparedQuery) -> countOf
    void assignEmptyForeignCollection(java.lang.Object,java.lang.String) -> assignEmptyForeignCollection
    com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String) -> getEmptyForeignCollection
    void setObjectCache(boolean) -> setObjectCache
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void setObjectCache(com.j256.ormlite.dao.ObjectCache) -> setObjectCache
    void clearObjectCache() -> clearObjectCache
    java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults) -> mapSelectStarRow
    com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper() -> getSelectStarRowMapper
    boolean idExists(java.lang.Object) -> idExists
    com.j256.ormlite.support.DatabaseConnection startThreadConnection() -> startThreadConnection
    void endThreadConnection(com.j256.ormlite.support.DatabaseConnection) -> endThreadConnection
    void setAutoCommit(boolean) -> setAutoCommit
    void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean) -> setAutoCommit
    boolean isAutoCommit() -> isAutoCommit
    boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection) -> isAutoCommit
    void commit(com.j256.ormlite.support.DatabaseConnection) -> commit
    void rollBack(com.j256.ormlite.support.DatabaseConnection) -> rollBack
    void setObjectFactory(com.j256.ormlite.table.ObjectFactory) -> setObjectFactory
    com.j256.ormlite.dao.RawRowMapper getRawRowMapper() -> getRawRowMapper
    com.j256.ormlite.support.ConnectionSource getConnectionSource() -> getConnectionSource
    void logMessage(java.lang.Exception,java.lang.String) -> logMessage
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.db.BaseDatabaseType -> com.j256.ormlite.db.BaseDatabaseType:
    java.lang.String DEFAULT_SEQUENCE_SUFFIX -> DEFAULT_SEQUENCE_SUFFIX
    java.sql.Driver driver -> driver
    java.lang.String getDriverClassName() -> getDriverClassName
    void loadDriver() -> loadDriver
    void setDriver(java.sql.Driver) -> setDriver
    void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List) -> appendColumnArg
    void appendStringType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendStringType
    void appendLongStringType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendLongStringType
    void appendDateType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendDateType
    void appendBooleanType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendBooleanType
    void appendCharType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendCharType
    void appendByteType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendByteType
    void appendShortType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendShortType
    void appendIntegerType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendIntegerType
    void appendLongType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendLongType
    void appendFloatType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendFloatType
    void appendDoubleType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendDoubleType
    void appendByteArrayType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendByteArrayType
    void appendSerializableType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendSerializableType
    void appendBigDecimalNumericType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendBigDecimalNumericType
    void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object) -> appendDefaultValue
    void configureGeneratedIdSequence(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List) -> configureGeneratedIdSequence
    void configureGeneratedId(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List) -> configureGeneratedId
    void configureId(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List) -> configureId
    void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List) -> addPrimaryKeySql
    boolean generatedIdSqlAtEnd() -> generatedIdSqlAtEnd
    void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List) -> addUniqueComboSql
    void dropColumnArg(com.j256.ormlite.field.FieldType,java.util.List,java.util.List) -> dropColumnArg
    void appendEscapedWord(java.lang.StringBuilder,java.lang.String) -> appendEscapedWord
    void appendEscapedEntityName(java.lang.StringBuilder,java.lang.String) -> appendEscapedEntityName
    java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType) -> generateIdSequenceName
    java.lang.String getCommentLinePrefix() -> getCommentLinePrefix
    com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister) -> getFieldConverter
    boolean isIdSequenceNeeded() -> isIdSequenceNeeded
    boolean isVarcharFieldWidthSupported() -> isVarcharFieldWidthSupported
    boolean isLimitSqlSupported() -> isLimitSqlSupported
    boolean isOffsetSqlSupported() -> isOffsetSqlSupported
    boolean isOffsetLimitArgument() -> isOffsetLimitArgument
    boolean isLimitAfterSelect() -> isLimitAfterSelect
    void appendLimitValue(java.lang.StringBuilder,long,java.lang.Long) -> appendLimitValue
    void appendOffsetValue(java.lang.StringBuilder,long) -> appendOffsetValue
    void appendSelectNextValFromSequence(java.lang.StringBuilder,java.lang.String) -> appendSelectNextValFromSequence
    void appendCreateTableSuffix(java.lang.StringBuilder) -> appendCreateTableSuffix
    boolean isCreateTableReturnsZero() -> isCreateTableReturnsZero
    boolean isCreateTableReturnsNegative() -> isCreateTableReturnsNegative
    boolean isEntityNamesMustBeUpCase() -> isEntityNamesMustBeUpCase
    boolean isNestedSavePointsSupported() -> isNestedSavePointsSupported
    java.lang.String getPingStatement() -> getPingStatement
    boolean isBatchUseTransaction() -> isBatchUseTransaction
    boolean isTruncateSupported() -> isTruncateSupported
    boolean isCreateIfNotExistsSupported() -> isCreateIfNotExistsSupported
    boolean isCreateIndexIfNotExistsSupported() -> isCreateIndexIfNotExistsSupported
    boolean isSelectSequenceBeforeInsert() -> isSelectSequenceBeforeInsert
    boolean isAllowGeneratedIdInsertSupported() -> isAllowGeneratedIdInsertSupported
    com.j256.ormlite.table.DatabaseTableConfig extractDatabaseTableConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> extractDatabaseTableConfig
    void appendCanBeNull(java.lang.StringBuilder,com.j256.ormlite.field.FieldType) -> appendCanBeNull
    void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List) -> addSingleUnique
com.j256.ormlite.db.BaseDatabaseType$1 -> com.j256.ormlite.db.BaseDatabaseType$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter -> com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter:
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
com.j256.ormlite.db.BaseSqliteDatabaseType -> com.j256.ormlite.db.BaseSqliteDatabaseType:
    com.j256.ormlite.field.FieldConverter booleanConverter -> booleanConverter
    void appendLongType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendLongType
    void configureGeneratedId(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List) -> configureGeneratedId
    boolean generatedIdSqlAtEnd() -> generatedIdSqlAtEnd
    boolean isVarcharFieldWidthSupported() -> isVarcharFieldWidthSupported
    boolean isCreateTableReturnsZero() -> isCreateTableReturnsZero
    boolean isCreateIfNotExistsSupported() -> isCreateIfNotExistsSupported
    com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister) -> getFieldConverter
com.j256.ormlite.db.BaseSqliteDatabaseType$1 -> com.j256.ormlite.db.BaseSqliteDatabaseType$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
com.j256.ormlite.db.DatabaseType -> com.j256.ormlite.db.DatabaseType:
    boolean isDatabaseUrlThisType(java.lang.String,java.lang.String) -> isDatabaseUrlThisType
    void loadDriver() -> loadDriver
    void setDriver(java.sql.Driver) -> setDriver
    void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List) -> appendColumnArg
    void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List) -> addPrimaryKeySql
    void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List) -> addUniqueComboSql
    void dropColumnArg(com.j256.ormlite.field.FieldType,java.util.List,java.util.List) -> dropColumnArg
    void appendEscapedEntityName(java.lang.StringBuilder,java.lang.String) -> appendEscapedEntityName
    void appendEscapedWord(java.lang.StringBuilder,java.lang.String) -> appendEscapedWord
    java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType) -> generateIdSequenceName
    java.lang.String getCommentLinePrefix() -> getCommentLinePrefix
    boolean isIdSequenceNeeded() -> isIdSequenceNeeded
    com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister) -> getFieldConverter
    boolean isVarcharFieldWidthSupported() -> isVarcharFieldWidthSupported
    boolean isLimitSqlSupported() -> isLimitSqlSupported
    boolean isLimitAfterSelect() -> isLimitAfterSelect
    void appendLimitValue(java.lang.StringBuilder,long,java.lang.Long) -> appendLimitValue
    boolean isOffsetSqlSupported() -> isOffsetSqlSupported
    boolean isOffsetLimitArgument() -> isOffsetLimitArgument
    void appendOffsetValue(java.lang.StringBuilder,long) -> appendOffsetValue
    void appendSelectNextValFromSequence(java.lang.StringBuilder,java.lang.String) -> appendSelectNextValFromSequence
    void appendCreateTableSuffix(java.lang.StringBuilder) -> appendCreateTableSuffix
    boolean isCreateTableReturnsZero() -> isCreateTableReturnsZero
    boolean isCreateTableReturnsNegative() -> isCreateTableReturnsNegative
    boolean isEntityNamesMustBeUpCase() -> isEntityNamesMustBeUpCase
    boolean isNestedSavePointsSupported() -> isNestedSavePointsSupported
    java.lang.String getPingStatement() -> getPingStatement
    boolean isBatchUseTransaction() -> isBatchUseTransaction
    boolean isTruncateSupported() -> isTruncateSupported
    boolean isCreateIfNotExistsSupported() -> isCreateIfNotExistsSupported
    boolean isCreateIndexIfNotExistsSupported() -> isCreateIndexIfNotExistsSupported
    boolean isSelectSequenceBeforeInsert() -> isSelectSequenceBeforeInsert
    boolean isAllowGeneratedIdInsertSupported() -> isAllowGeneratedIdInsertSupported
    java.lang.String getDatabaseName() -> getDatabaseName
    com.j256.ormlite.table.DatabaseTableConfig extractDatabaseTableConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> extractDatabaseTableConfig
com.j256.ormlite.db.SqliteAndroidDatabaseType -> com.j256.ormlite.db.SqliteAndroidDatabaseType:
    void loadDriver() -> loadDriver
    boolean isDatabaseUrlThisType(java.lang.String,java.lang.String) -> isDatabaseUrlThisType
    java.lang.String getDriverClassName() -> getDriverClassName
    java.lang.String getDatabaseName() -> getDatabaseName
    void appendDateType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendDateType
    void appendBooleanType(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,int) -> appendBooleanType
    com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister) -> getFieldConverter
    boolean isNestedSavePointsSupported() -> isNestedSavePointsSupported
    boolean isBatchUseTransaction() -> isBatchUseTransaction
    com.j256.ormlite.table.DatabaseTableConfig extractDatabaseTableConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> extractDatabaseTableConfig
com.j256.ormlite.db.SqliteAndroidDatabaseType$1 -> com.j256.ormlite.db.SqliteAndroidDatabaseType$1:
    int[] $SwitchMap$com$j256$ormlite$field$SqlType -> $SwitchMap$com$j256$ormlite$field$SqlType
com.j256.ormlite.field.BaseFieldConverter -> com.j256.ormlite.field.BaseFieldConverter:
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToJava
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    boolean isStreamType() -> isStreamType
com.j256.ormlite.field.DataPersister -> com.j256.ormlite.field.DataPersister:
    java.lang.Class[] getAssociatedClasses() -> getAssociatedClasses
    java.lang.String[] getAssociatedClassNames() -> getAssociatedClassNames
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    java.lang.Object convertIdNumber(java.lang.Number) -> convertIdNumber
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    boolean isEscapedDefaultValue() -> isEscapedDefaultValue
    boolean isEscapedValue() -> isEscapedValue
    boolean isPrimitive() -> isPrimitive
    boolean isComparable() -> isComparable
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    boolean isSelfGeneratedId() -> isSelfGeneratedId
    java.lang.Object generateId() -> generateId
    int getDefaultWidth() -> getDefaultWidth
    boolean dataIsEqual(java.lang.Object,java.lang.Object) -> dataIsEqual
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
com.j256.ormlite.field.DataPersisterManager -> com.j256.ormlite.field.DataPersisterManager:
    com.j256.ormlite.field.DataPersister DEFAULT_ENUM_PERSISTER -> DEFAULT_ENUM_PERSISTER
    java.util.Map builtInMap -> builtInMap
    java.util.List registeredPersisters -> registeredPersisters
    void registerDataPersisters(com.j256.ormlite.field.DataPersister[]) -> registerDataPersisters
    void clear() -> clear
    com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field) -> lookupForField
com.j256.ormlite.field.DataType -> com.j256.ormlite.field.DataType:
    com.j256.ormlite.field.DataType STRING -> STRING
    com.j256.ormlite.field.DataType LONG_STRING -> LONG_STRING
    com.j256.ormlite.field.DataType STRING_BYTES -> STRING_BYTES
    com.j256.ormlite.field.DataType BOOLEAN -> BOOLEAN
    com.j256.ormlite.field.DataType BOOLEAN_OBJ -> BOOLEAN_OBJ
    com.j256.ormlite.field.DataType DATE -> DATE
    com.j256.ormlite.field.DataType DATE_LONG -> DATE_LONG
    com.j256.ormlite.field.DataType DATE_STRING -> DATE_STRING
    com.j256.ormlite.field.DataType CHAR -> CHAR
    com.j256.ormlite.field.DataType CHAR_OBJ -> CHAR_OBJ
    com.j256.ormlite.field.DataType BYTE -> BYTE
    com.j256.ormlite.field.DataType BYTE_ARRAY -> BYTE_ARRAY
    com.j256.ormlite.field.DataType BYTE_OBJ -> BYTE_OBJ
    com.j256.ormlite.field.DataType SHORT -> SHORT
    com.j256.ormlite.field.DataType SHORT_OBJ -> SHORT_OBJ
    com.j256.ormlite.field.DataType INTEGER -> INTEGER
    com.j256.ormlite.field.DataType INTEGER_OBJ -> INTEGER_OBJ
    com.j256.ormlite.field.DataType LONG -> LONG
    com.j256.ormlite.field.DataType LONG_OBJ -> LONG_OBJ
    com.j256.ormlite.field.DataType FLOAT -> FLOAT
    com.j256.ormlite.field.DataType FLOAT_OBJ -> FLOAT_OBJ
    com.j256.ormlite.field.DataType DOUBLE -> DOUBLE
    com.j256.ormlite.field.DataType DOUBLE_OBJ -> DOUBLE_OBJ
    com.j256.ormlite.field.DataType SERIALIZABLE -> SERIALIZABLE
    com.j256.ormlite.field.DataType ENUM_STRING -> ENUM_STRING
    com.j256.ormlite.field.DataType ENUM_INTEGER -> ENUM_INTEGER
    com.j256.ormlite.field.DataType UUID -> UUID
    com.j256.ormlite.field.DataType BIG_INTEGER -> BIG_INTEGER
    com.j256.ormlite.field.DataType BIG_DECIMAL -> BIG_DECIMAL
    com.j256.ormlite.field.DataType BIG_DECIMAL_NUMERIC -> BIG_DECIMAL_NUMERIC
    com.j256.ormlite.field.DataType DATE_TIME -> DATE_TIME
    com.j256.ormlite.field.DataType SQL_DATE -> SQL_DATE
    com.j256.ormlite.field.DataType TIME_STAMP -> TIME_STAMP
    com.j256.ormlite.field.DataType UNKNOWN -> UNKNOWN
    com.j256.ormlite.field.DataPersister dataPersister -> dataPersister
    com.j256.ormlite.field.DataType[] $VALUES -> $VALUES
    com.j256.ormlite.field.DataType[] values() -> values
    com.j256.ormlite.field.DataType valueOf(java.lang.String) -> valueOf
    com.j256.ormlite.field.DataPersister getDataPersister() -> getDataPersister
com.j256.ormlite.field.DatabaseField -> com.j256.ormlite.field.DatabaseField:
    java.lang.String DEFAULT_STRING -> DEFAULT_STRING
    int NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED -> NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED
    int DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL -> DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL
    java.lang.String columnName() -> columnName
    com.j256.ormlite.field.DataType dataType() -> dataType
    java.lang.String defaultValue() -> defaultValue
    int width() -> width
    boolean canBeNull() -> canBeNull
    boolean id() -> id
    boolean generatedId() -> generatedId
    java.lang.String generatedIdSequence() -> generatedIdSequence
    boolean foreign() -> foreign
    boolean useGetSet() -> useGetSet
    java.lang.String unknownEnumName() -> unknownEnumName
    boolean throwIfNull() -> throwIfNull
    boolean persisted() -> persisted
    java.lang.String format() -> format
    boolean unique() -> unique
    boolean uniqueCombo() -> uniqueCombo
    boolean index() -> index
    boolean uniqueIndex() -> uniqueIndex
    java.lang.String indexName() -> indexName
    java.lang.String uniqueIndexName() -> uniqueIndexName
    boolean foreignAutoRefresh() -> foreignAutoRefresh
    int maxForeignAutoRefreshLevel() -> maxForeignAutoRefreshLevel
    java.lang.Class persisterClass() -> persisterClass
    boolean allowGeneratedIdInsert() -> allowGeneratedIdInsert
    java.lang.String columnDefinition() -> columnDefinition
    boolean foreignAutoCreate() -> foreignAutoCreate
    boolean version() -> version
    java.lang.String foreignColumnName() -> foreignColumnName
com.j256.ormlite.field.DatabaseFieldConfig -> com.j256.ormlite.field.DatabaseFieldConfig:
    int DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL -> DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL
    java.lang.Class DEFAULT_PERSISTER_CLASS -> DEFAULT_PERSISTER_CLASS
    com.j256.ormlite.field.DataType DEFAULT_DATA_TYPE -> DEFAULT_DATA_TYPE
    boolean DEFAULT_CAN_BE_NULL -> DEFAULT_CAN_BE_NULL
    boolean DEFAULT_FOREIGN_COLLECTION_ORDER_ASCENDING -> DEFAULT_FOREIGN_COLLECTION_ORDER_ASCENDING
    java.lang.String fieldName -> fieldName
    java.lang.String columnName -> columnName
    com.j256.ormlite.field.DataType dataType -> dataType
    com.j256.ormlite.field.DataPersister dataPersister -> dataPersister
    java.lang.String defaultValue -> defaultValue
    int width -> width
    boolean canBeNull -> canBeNull
    boolean id -> id
    boolean generatedId -> generatedId
    java.lang.String generatedIdSequence -> generatedIdSequence
    boolean foreign -> foreign
    com.j256.ormlite.table.DatabaseTableConfig foreignTableConfig -> foreignTableConfig
    boolean useGetSet -> useGetSet
    java.lang.Enum unknownEnumValue -> unknownEnumValue
    boolean throwIfNull -> throwIfNull
    boolean persisted -> persisted
    java.lang.String format -> format
    boolean unique -> unique
    boolean uniqueCombo -> uniqueCombo
    boolean index -> index
    java.lang.String indexName -> indexName
    boolean uniqueIndex -> uniqueIndex
    java.lang.String uniqueIndexName -> uniqueIndexName
    boolean foreignAutoRefresh -> foreignAutoRefresh
    int maxForeignAutoRefreshLevel -> maxForeignAutoRefreshLevel
    java.lang.Class persisterClass -> persisterClass
    boolean allowGeneratedIdInsert -> allowGeneratedIdInsert
    java.lang.String columnDefinition -> columnDefinition
    boolean foreignAutoCreate -> foreignAutoCreate
    boolean version -> version
    java.lang.String foreignColumnName -> foreignColumnName
    boolean foreignCollection -> foreignCollection
    boolean foreignCollectionEager -> foreignCollectionEager
    int foreignCollectionMaxEagerLevel -> foreignCollectionMaxEagerLevel
    java.lang.String foreignCollectionColumnName -> foreignCollectionColumnName
    java.lang.String foreignCollectionOrderColumnName -> foreignCollectionOrderColumnName
    boolean foreignCollectionOrderAscending -> foreignCollectionOrderAscending
    java.lang.String foreignCollectionForeignFieldName -> foreignCollectionForeignFieldName
    java.lang.String getFieldName() -> getFieldName
    void setFieldName(java.lang.String) -> setFieldName
    java.lang.String getColumnName() -> getColumnName
    void setColumnName(java.lang.String) -> setColumnName
    com.j256.ormlite.field.DataType getDataType() -> getDataType
    void setDataType(com.j256.ormlite.field.DataType) -> setDataType
    com.j256.ormlite.field.DataPersister getDataPersister() -> getDataPersister
    void setDataPersister(com.j256.ormlite.field.DataPersister) -> setDataPersister
    java.lang.String getDefaultValue() -> getDefaultValue
    void setDefaultValue(java.lang.String) -> setDefaultValue
    int getWidth() -> getWidth
    void setWidth(int) -> setWidth
    boolean isCanBeNull() -> isCanBeNull
    void setCanBeNull(boolean) -> setCanBeNull
    boolean isId() -> isId
    void setId(boolean) -> setId
    boolean isGeneratedId() -> isGeneratedId
    void setGeneratedId(boolean) -> setGeneratedId
    java.lang.String getGeneratedIdSequence() -> getGeneratedIdSequence
    void setGeneratedIdSequence(java.lang.String) -> setGeneratedIdSequence
    boolean isForeign() -> isForeign
    void setForeign(boolean) -> setForeign
    com.j256.ormlite.table.DatabaseTableConfig getForeignTableConfig() -> getForeignTableConfig
    void setForeignTableConfig(com.j256.ormlite.table.DatabaseTableConfig) -> setForeignTableConfig
    boolean isUseGetSet() -> isUseGetSet
    void setUseGetSet(boolean) -> setUseGetSet
    java.lang.Enum getUnknownEnumValue() -> getUnknownEnumValue
    void setUnknownEnumValue(java.lang.Enum) -> setUnknownEnumValue
    boolean isThrowIfNull() -> isThrowIfNull
    void setThrowIfNull(boolean) -> setThrowIfNull
    boolean isPersisted() -> isPersisted
    void setPersisted(boolean) -> setPersisted
    java.lang.String getFormat() -> getFormat
    void setFormat(java.lang.String) -> setFormat
    boolean isUnique() -> isUnique
    void setUnique(boolean) -> setUnique
    boolean isUniqueCombo() -> isUniqueCombo
    void setUniqueCombo(boolean) -> setUniqueCombo
    boolean isIndex() -> isIndex
    void setIndex(boolean) -> setIndex
    java.lang.String getIndexName(java.lang.String) -> getIndexName
    void setIndexName(java.lang.String) -> setIndexName
    boolean isUniqueIndex() -> isUniqueIndex
    void setUniqueIndex(boolean) -> setUniqueIndex
    java.lang.String getUniqueIndexName(java.lang.String) -> getUniqueIndexName
    void setUniqueIndexName(java.lang.String) -> setUniqueIndexName
    void setForeignAutoRefresh(boolean) -> setForeignAutoRefresh
    boolean isForeignAutoRefresh() -> isForeignAutoRefresh
    int getMaxForeignAutoRefreshLevel() -> getMaxForeignAutoRefreshLevel
    void setMaxForeignAutoRefreshLevel(int) -> setMaxForeignAutoRefreshLevel
    boolean isForeignCollection() -> isForeignCollection
    void setForeignCollection(boolean) -> setForeignCollection
    boolean isForeignCollectionEager() -> isForeignCollectionEager
    void setForeignCollectionEager(boolean) -> setForeignCollectionEager
    int getForeignCollectionMaxEagerLevel() -> getForeignCollectionMaxEagerLevel
    void setForeignCollectionMaxEagerLevel(int) -> setForeignCollectionMaxEagerLevel
    void setMaxEagerForeignCollectionLevel(int) -> setMaxEagerForeignCollectionLevel
    void setForeignCollectionMaxEagerForeignCollectionLevel(int) -> setForeignCollectionMaxEagerForeignCollectionLevel
    java.lang.String getForeignCollectionColumnName() -> getForeignCollectionColumnName
    void setForeignCollectionColumnName(java.lang.String) -> setForeignCollectionColumnName
    java.lang.String getForeignCollectionOrderColumnName() -> getForeignCollectionOrderColumnName
    void setForeignCollectionOrderColumn(java.lang.String) -> setForeignCollectionOrderColumn
    void setForeignCollectionOrderColumnName(java.lang.String) -> setForeignCollectionOrderColumnName
    boolean isForeignCollectionOrderAscending() -> isForeignCollectionOrderAscending
    void setForeignCollectionOrderAscending(boolean) -> setForeignCollectionOrderAscending
    java.lang.String getForeignCollectionForeignFieldName() -> getForeignCollectionForeignFieldName
    void setForeignCollectionForeignColumnName(java.lang.String) -> setForeignCollectionForeignColumnName
    void setForeignCollectionForeignFieldName(java.lang.String) -> setForeignCollectionForeignFieldName
    java.lang.Class getPersisterClass() -> getPersisterClass
    void setPersisterClass(java.lang.Class) -> setPersisterClass
    boolean isAllowGeneratedIdInsert() -> isAllowGeneratedIdInsert
    void setAllowGeneratedIdInsert(boolean) -> setAllowGeneratedIdInsert
    java.lang.String getColumnDefinition() -> getColumnDefinition
    void setColumnDefinition(java.lang.String) -> setColumnDefinition
    boolean isForeignAutoCreate() -> isForeignAutoCreate
    void setForeignAutoCreate(boolean) -> setForeignAutoCreate
    boolean isVersion() -> isVersion
    void setVersion(boolean) -> setVersion
    java.lang.String getForeignColumnName() -> getForeignColumnName
    void setForeignColumnName(java.lang.String) -> setForeignColumnName
    com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field) -> fromField
    java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean) -> findGetMethod
    java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean) -> findSetMethod
    com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField) -> fromDatabaseField
    void postProcess() -> postProcess
    java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String) -> findMatchingEnumVal
    com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField) -> fromForeignCollection
    java.lang.String findIndexName(java.lang.String) -> findIndexName
    java.lang.String valueIfNotBlank(java.lang.String) -> valueIfNotBlank
    java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String) -> methodFromField
com.j256.ormlite.field.DatabaseFieldConfigLoader -> com.j256.ormlite.field.DatabaseFieldConfigLoader:
    java.lang.String CONFIG_FILE_START_MARKER -> CONFIG_FILE_START_MARKER
    java.lang.String CONFIG_FILE_END_MARKER -> CONFIG_FILE_END_MARKER
    int DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL -> DEFAULT_MAX_EAGER_FOREIGN_COLLECTION_LEVEL
    com.j256.ormlite.field.DataPersister DEFAULT_DATA_PERSISTER -> DEFAULT_DATA_PERSISTER
    java.lang.String FIELD_NAME_FIELD_NAME -> FIELD_NAME_FIELD_NAME
    java.lang.String FIELD_NAME_COLUMN_NAME -> FIELD_NAME_COLUMN_NAME
    java.lang.String FIELD_NAME_DATA_PERSISTER -> FIELD_NAME_DATA_PERSISTER
    java.lang.String FIELD_NAME_DEFAULT_VALUE -> FIELD_NAME_DEFAULT_VALUE
    java.lang.String FIELD_NAME_WIDTH -> FIELD_NAME_WIDTH
    java.lang.String FIELD_NAME_CAN_BE_NULL -> FIELD_NAME_CAN_BE_NULL
    java.lang.String FIELD_NAME_ID -> FIELD_NAME_ID
    java.lang.String FIELD_NAME_GENERATED_ID -> FIELD_NAME_GENERATED_ID
    java.lang.String FIELD_NAME_GENERATED_ID_SEQUENCE -> FIELD_NAME_GENERATED_ID_SEQUENCE
    java.lang.String FIELD_NAME_FOREIGN -> FIELD_NAME_FOREIGN
    java.lang.String FIELD_NAME_USE_GET_SET -> FIELD_NAME_USE_GET_SET
    java.lang.String FIELD_NAME_UNKNOWN_ENUM_VALUE -> FIELD_NAME_UNKNOWN_ENUM_VALUE
    java.lang.String FIELD_NAME_THROW_IF_NULL -> FIELD_NAME_THROW_IF_NULL
    java.lang.String FIELD_NAME_FORMAT -> FIELD_NAME_FORMAT
    java.lang.String FIELD_NAME_UNIQUE -> FIELD_NAME_UNIQUE
    java.lang.String FIELD_NAME_UNIQUE_COMBO -> FIELD_NAME_UNIQUE_COMBO
    java.lang.String FIELD_NAME_INDEX -> FIELD_NAME_INDEX
    java.lang.String FIELD_NAME_INDEX_NAME -> FIELD_NAME_INDEX_NAME
    java.lang.String FIELD_NAME_UNIQUE_INDEX -> FIELD_NAME_UNIQUE_INDEX
    java.lang.String FIELD_NAME_UNIQUE_INDEX_NAME -> FIELD_NAME_UNIQUE_INDEX_NAME
    java.lang.String FIELD_NAME_FOREIGN_AUTO_REFRESH -> FIELD_NAME_FOREIGN_AUTO_REFRESH
    java.lang.String FIELD_NAME_MAX_FOREIGN_AUTO_REFRESH_LEVEL -> FIELD_NAME_MAX_FOREIGN_AUTO_REFRESH_LEVEL
    java.lang.String FIELD_NAME_PERSISTER_CLASS -> FIELD_NAME_PERSISTER_CLASS
    java.lang.String FIELD_NAME_ALLOW_GENERATED_ID_INSERT -> FIELD_NAME_ALLOW_GENERATED_ID_INSERT
    java.lang.String FIELD_NAME_COLUMN_DEFINITION -> FIELD_NAME_COLUMN_DEFINITION
    java.lang.String FIELD_NAME_FOREIGN_AUTO_CREATE -> FIELD_NAME_FOREIGN_AUTO_CREATE
    java.lang.String FIELD_NAME_VERSION -> FIELD_NAME_VERSION
    java.lang.String FOREIGN_COLUMN_NAME -> FOREIGN_COLUMN_NAME
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION -> FIELD_NAME_FOREIGN_COLLECTION
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_EAGER -> FIELD_NAME_FOREIGN_COLLECTION_EAGER
    java.lang.String FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL_OLD -> FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL_OLD
    java.lang.String FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL -> FIELD_NAME_MAX_EAGER_FOREIGN_COLLECTION_LEVEL
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_COLUMN_NAME -> FIELD_NAME_FOREIGN_COLLECTION_COLUMN_NAME
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME_OLD -> FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME_OLD
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME -> FIELD_NAME_FOREIGN_COLLECTION_ORDER_COLUMN_NAME
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_ORDER_ASCENDING -> FIELD_NAME_FOREIGN_COLLECTION_ORDER_ASCENDING
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME_OLD -> FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME_OLD
    java.lang.String FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME -> FIELD_NAME_FOREIGN_COLLECTION_FOREIGN_FIELD_NAME
    com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader) -> fromReader
    void write(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String) -> write
    void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String) -> writeConfig
    void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String) -> readField
com.j256.ormlite.field.FieldConverter -> com.j256.ormlite.field.FieldConverter:
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToJava
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    boolean isStreamType() -> isStreamType
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
com.j256.ormlite.field.FieldType -> com.j256.ormlite.field.FieldType:
    java.lang.String FOREIGN_ID_FIELD_SUFFIX -> FOREIGN_ID_FIELD_SUFFIX
    boolean DEFAULT_VALUE_BOOLEAN -> DEFAULT_VALUE_BOOLEAN
    byte DEFAULT_VALUE_BYTE -> DEFAULT_VALUE_BYTE
    char DEFAULT_VALUE_CHAR -> DEFAULT_VALUE_CHAR
    short DEFAULT_VALUE_SHORT -> DEFAULT_VALUE_SHORT
    int DEFAULT_VALUE_INT -> DEFAULT_VALUE_INT
    long DEFAULT_VALUE_LONG -> DEFAULT_VALUE_LONG
    float DEFAULT_VALUE_FLOAT -> DEFAULT_VALUE_FLOAT
    double DEFAULT_VALUE_DOUBLE -> DEFAULT_VALUE_DOUBLE
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    java.lang.String tableName -> tableName
    java.lang.reflect.Field field -> field
    java.lang.String columnName -> columnName
    com.j256.ormlite.field.DatabaseFieldConfig fieldConfig -> fieldConfig
    boolean isId -> isId
    boolean isGeneratedId -> isGeneratedId
    java.lang.String generatedIdSequence -> generatedIdSequence
    java.lang.reflect.Method fieldGetMethod -> fieldGetMethod
    java.lang.reflect.Method fieldSetMethod -> fieldSetMethod
    com.j256.ormlite.field.DataPersister dataPersister -> dataPersister
    java.lang.Object defaultValue -> defaultValue
    java.lang.Object dataTypeConfigObj -> dataTypeConfigObj
    com.j256.ormlite.field.FieldConverter fieldConverter -> fieldConverter
    com.j256.ormlite.field.FieldType foreignIdField -> foreignIdField
    com.j256.ormlite.table.TableInfo foreignTableInfo -> foreignTableInfo
    com.j256.ormlite.field.FieldType foreignFieldType -> foreignFieldType
    com.j256.ormlite.dao.BaseDaoImpl foreignDao -> foreignDao
    com.j256.ormlite.stmt.mapped.MappedQueryForId mappedQueryForId -> mappedQueryForId
    java.lang.ThreadLocal threadLevelCounters -> threadLevelCounters
    void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> configDaoInformation
    java.lang.reflect.Field getField() -> getField
    java.lang.String getTableName() -> getTableName
    java.lang.String getFieldName() -> getFieldName
    java.lang.Class getType() -> getType
    java.lang.String getColumnName() -> getColumnName
    com.j256.ormlite.field.DataPersister getDataPersister() -> getDataPersister
    java.lang.Object getDataTypeConfigObj() -> getDataTypeConfigObj
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    java.lang.Object getDefaultValue() -> getDefaultValue
    int getWidth() -> getWidth
    boolean isCanBeNull() -> isCanBeNull
    boolean isId() -> isId
    boolean isGeneratedId() -> isGeneratedId
    boolean isGeneratedIdSequence() -> isGeneratedIdSequence
    java.lang.String getGeneratedIdSequence() -> getGeneratedIdSequence
    boolean isForeign() -> isForeign
    void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache) -> assignField
    java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache) -> assignIdValue
    java.lang.Object extractRawJavaFieldValue(java.lang.Object) -> extractRawJavaFieldValue
    java.lang.Object extractJavaFieldValue(java.lang.Object) -> extractJavaFieldValue
    java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object) -> extractJavaFieldToSqlArgValue
    java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object) -> convertJavaFieldToSqlArgValue
    java.lang.Object convertStringToJavaField(java.lang.String,int) -> convertStringToJavaField
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    com.j256.ormlite.field.FieldType getForeignIdField() -> getForeignIdField
    boolean isEscapedValue() -> isEscapedValue
    java.lang.Enum getUnknownEnumVal() -> getUnknownEnumVal
    java.lang.String getFormat() -> getFormat
    boolean isUnique() -> isUnique
    boolean isUniqueCombo() -> isUniqueCombo
    java.lang.String getIndexName() -> getIndexName
    java.lang.String getUniqueIndexName() -> getUniqueIndexName
    boolean isEscapedDefaultValue() -> isEscapedDefaultValue
    boolean isComparable() -> isComparable
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    boolean isForeignCollection() -> isForeignCollection
    com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object) -> buildForeignCollection
    java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map) -> resultToJava
    boolean isSelfGeneratedId() -> isSelfGeneratedId
    boolean isAllowGeneratedIdInsert() -> isAllowGeneratedIdInsert
    java.lang.String getColumnDefinition() -> getColumnDefinition
    boolean isForeignAutoCreate() -> isForeignAutoCreate
    boolean isVersion() -> isVersion
    java.lang.Object generateId() -> generateId
    java.lang.Object getFieldValueIfNotDefault(java.lang.Object) -> getFieldValueIfNotDefault
    boolean isObjectsFieldValueDefault(java.lang.Object) -> isObjectsFieldValueDefault
    java.lang.Object getJavaDefaultValueDefault() -> getJavaDefaultValueDefault
    int createWithForeignDao(java.lang.Object) -> createWithForeignDao
    com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class) -> createFieldType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isFieldValueDefault(java.lang.Object) -> isFieldValueDefault
    com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl) -> findForeignFieldType
    void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister) -> assignDataType
com.j256.ormlite.field.FieldType$1 -> com.j256.ormlite.field.FieldType$1:
    com.j256.ormlite.field.FieldType$LevelCounters initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.j256.ormlite.field.FieldType$LevelCounters -> com.j256.ormlite.field.FieldType$LevelCounters:
    int autoRefreshLevel -> autoRefreshLevel
    int autoRefreshLevelMax -> autoRefreshLevelMax
    int foreignCollectionLevel -> foreignCollectionLevel
    int foreignCollectionLevelMax -> foreignCollectionLevelMax
com.j256.ormlite.field.ForeignCollectionField -> com.j256.ormlite.field.ForeignCollectionField:
    int MAX_EAGER_LEVEL -> MAX_EAGER_LEVEL
    boolean eager() -> eager
    int maxEagerForeignCollectionLevel() -> maxEagerForeignCollectionLevel
    int maxEagerLevel() -> maxEagerLevel
    java.lang.String columnName() -> columnName
    java.lang.String orderColumnName() -> orderColumnName
    boolean orderAscending() -> orderAscending
    java.lang.String foreignColumnName() -> foreignColumnName
    java.lang.String foreignFieldName() -> foreignFieldName
com.j256.ormlite.field.SqlType -> com.j256.ormlite.field.SqlType:
    com.j256.ormlite.field.SqlType STRING -> STRING
    com.j256.ormlite.field.SqlType LONG_STRING -> LONG_STRING
    com.j256.ormlite.field.SqlType DATE -> DATE
    com.j256.ormlite.field.SqlType BOOLEAN -> BOOLEAN
    com.j256.ormlite.field.SqlType CHAR -> CHAR
    com.j256.ormlite.field.SqlType BYTE -> BYTE
    com.j256.ormlite.field.SqlType BYTE_ARRAY -> BYTE_ARRAY
    com.j256.ormlite.field.SqlType SHORT -> SHORT
    com.j256.ormlite.field.SqlType INTEGER -> INTEGER
    com.j256.ormlite.field.SqlType LONG -> LONG
    com.j256.ormlite.field.SqlType FLOAT -> FLOAT
    com.j256.ormlite.field.SqlType DOUBLE -> DOUBLE
    com.j256.ormlite.field.SqlType SERIALIZABLE -> SERIALIZABLE
    com.j256.ormlite.field.SqlType BLOB -> BLOB
    com.j256.ormlite.field.SqlType BIG_DECIMAL -> BIG_DECIMAL
    com.j256.ormlite.field.SqlType OTHER -> OTHER
    com.j256.ormlite.field.SqlType UNKNOWN -> UNKNOWN
    com.j256.ormlite.field.SqlType[] $VALUES -> $VALUES
    com.j256.ormlite.field.SqlType[] values() -> values
    com.j256.ormlite.field.SqlType valueOf(java.lang.String) -> valueOf
com.j256.ormlite.field.types.BaseDataType -> com.j256.ormlite.field.types.BaseDataType:
    com.j256.ormlite.field.SqlType sqlType -> sqlType
    java.lang.Class[] classes -> classes
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    java.lang.Class[] getAssociatedClasses() -> getAssociatedClasses
    java.lang.String[] getAssociatedClassNames() -> getAssociatedClassNames
    java.lang.Object convertIdNumber(java.lang.Number) -> convertIdNumber
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isEscapedDefaultValue() -> isEscapedDefaultValue
    boolean isEscapedValue() -> isEscapedValue
    boolean isPrimitive() -> isPrimitive
    boolean isComparable() -> isComparable
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    boolean isSelfGeneratedId() -> isSelfGeneratedId
    java.lang.Object generateId() -> generateId
    int getDefaultWidth() -> getDefaultWidth
    boolean dataIsEqual(java.lang.Object,java.lang.Object) -> dataIsEqual
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
com.j256.ormlite.field.types.BaseDateType -> com.j256.ormlite.field.types.BaseDateType:
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig defaultDateFormatConfig -> defaultDateFormatConfig
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig) -> convertDateStringConfig
    java.util.Date parseDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String) -> parseDateString
    java.lang.String normalizeDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String) -> normalizeDateString
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig -> com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig:
    java.lang.ThreadLocal threadLocal -> threadLocal
    java.lang.String dateFormatStr -> dateFormatStr
    java.text.DateFormat getDateFormat() -> getDateFormat
    java.lang.String toString() -> toString
com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig$1 -> com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig$1:
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig this$0 -> this$0
    java.text.DateFormat initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.j256.ormlite.field.types.BaseEnumType -> com.j256.ormlite.field.types.BaseEnumType:
    java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum) -> enumVal
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
com.j256.ormlite.field.types.BigDecimalNumericType -> com.j256.ormlite.field.types.BigDecimalNumericType:
    com.j256.ormlite.field.types.BigDecimalNumericType singleTon -> singleTon
    com.j256.ormlite.field.types.BigDecimalNumericType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isAppropriateId() -> isAppropriateId
    boolean isEscapedValue() -> isEscapedValue
    java.lang.Class getPrimaryClass() -> getPrimaryClass
com.j256.ormlite.field.types.BigDecimalStringType -> com.j256.ormlite.field.types.BigDecimalStringType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.BigDecimalStringType singleTon -> singleTon
    com.j256.ormlite.field.types.BigDecimalStringType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    int getDefaultWidth() -> getDefaultWidth
    boolean isAppropriateId() -> isAppropriateId
com.j256.ormlite.field.types.BigIntegerType -> com.j256.ormlite.field.types.BigIntegerType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.BigIntegerType singleTon -> singleTon
    com.j256.ormlite.field.types.BigIntegerType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    int getDefaultWidth() -> getDefaultWidth
    boolean isAppropriateId() -> isAppropriateId
com.j256.ormlite.field.types.BooleanObjectType -> com.j256.ormlite.field.types.BooleanObjectType:
    com.j256.ormlite.field.types.BooleanObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.BooleanObjectType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    boolean isAppropriateId() -> isAppropriateId
com.j256.ormlite.field.types.BooleanType -> com.j256.ormlite.field.types.BooleanType:
    com.j256.ormlite.field.types.BooleanType singleTon -> singleTon
    com.j256.ormlite.field.types.BooleanType getSingleton() -> getSingleton
    boolean isPrimitive() -> isPrimitive
com.j256.ormlite.field.types.ByteArrayType -> com.j256.ormlite.field.types.ByteArrayType:
    com.j256.ormlite.field.types.ByteArrayType singleTon -> singleTon
    com.j256.ormlite.field.types.ByteArrayType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    boolean dataIsEqual(java.lang.Object,java.lang.Object) -> dataIsEqual
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
com.j256.ormlite.field.types.ByteObjectType -> com.j256.ormlite.field.types.ByteObjectType:
    com.j256.ormlite.field.types.ByteObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.ByteObjectType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isEscapedValue() -> isEscapedValue
com.j256.ormlite.field.types.ByteType -> com.j256.ormlite.field.types.ByteType:
    com.j256.ormlite.field.types.ByteType singleTon -> singleTon
    com.j256.ormlite.field.types.ByteType getSingleton() -> getSingleton
    boolean isPrimitive() -> isPrimitive
com.j256.ormlite.field.types.CharType -> com.j256.ormlite.field.types.CharType:
    com.j256.ormlite.field.types.CharType singleTon -> singleTon
    com.j256.ormlite.field.types.CharType getSingleton() -> getSingleton
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isPrimitive() -> isPrimitive
com.j256.ormlite.field.types.CharacterObjectType -> com.j256.ormlite.field.types.CharacterObjectType:
    com.j256.ormlite.field.types.CharacterObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.CharacterObjectType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
com.j256.ormlite.field.types.DateLongType -> com.j256.ormlite.field.types.DateLongType:
    com.j256.ormlite.field.types.DateLongType singleTon -> singleTon
    com.j256.ormlite.field.types.DateLongType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
com.j256.ormlite.field.types.DateStringType -> com.j256.ormlite.field.types.DateStringType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.DateStringType singleTon -> singleTon
    com.j256.ormlite.field.types.DateStringType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    int getDefaultWidth() -> getDefaultWidth
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
com.j256.ormlite.field.types.DateTimeType -> com.j256.ormlite.field.types.DateTimeType:
    com.j256.ormlite.field.types.DateTimeType singleTon -> singleTon
    java.lang.Class dateTimeClass -> dateTimeClass
    java.lang.reflect.Method getMillisMethod -> getMillisMethod
    java.lang.reflect.Constructor millisConstructor -> millisConstructor
    java.lang.String[] associatedClassNames -> associatedClassNames
    com.j256.ormlite.field.types.DateTimeType getSingleton() -> getSingleton
    java.lang.String[] getAssociatedClassNames() -> getAssociatedClassNames
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    boolean isEscapedValue() -> isEscapedValue
    boolean isAppropriateId() -> isAppropriateId
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    java.lang.reflect.Method getMillisMethod() -> getMillisMethod
    java.lang.reflect.Constructor getConstructor() -> getConstructor
    java.lang.Class getDateTimeClass() -> getDateTimeClass
com.j256.ormlite.field.types.DateType -> com.j256.ormlite.field.types.DateType:
    com.j256.ormlite.field.types.DateType singleTon -> singleTon
    com.j256.ormlite.field.types.DateType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig() -> getDefaultDateFormatConfig
com.j256.ormlite.field.types.DoubleObjectType -> com.j256.ormlite.field.types.DoubleObjectType:
    com.j256.ormlite.field.types.DoubleObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.DoubleObjectType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isEscapedValue() -> isEscapedValue
com.j256.ormlite.field.types.DoubleType -> com.j256.ormlite.field.types.DoubleType:
    com.j256.ormlite.field.types.DoubleType singleTon -> singleTon
    com.j256.ormlite.field.types.DoubleType getSingleton() -> getSingleton
    boolean isPrimitive() -> isPrimitive
com.j256.ormlite.field.types.EnumIntegerType -> com.j256.ormlite.field.types.EnumIntegerType:
    com.j256.ormlite.field.types.EnumIntegerType singleTon -> singleTon
    com.j256.ormlite.field.types.EnumIntegerType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
com.j256.ormlite.field.types.EnumStringType -> com.j256.ormlite.field.types.EnumStringType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.EnumStringType singleTon -> singleTon
    com.j256.ormlite.field.types.EnumStringType getSingleton() -> getSingleton
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType) -> makeConfigObject
    int getDefaultWidth() -> getDefaultWidth
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
com.j256.ormlite.field.types.FloatObjectType -> com.j256.ormlite.field.types.FloatObjectType:
    com.j256.ormlite.field.types.FloatObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.FloatObjectType getSingleton() -> getSingleton
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    boolean isEscapedValue() -> isEscapedValue
com.j256.ormlite.field.types.FloatType -> com.j256.ormlite.field.types.FloatType:
    com.j256.ormlite.field.types.FloatType singleTon -> singleTon
    com.j256.ormlite.field.types.FloatType getSingleton() -> getSingleton
    boolean isPrimitive() -> isPrimitive
com.j256.ormlite.field.types.IntType -> com.j256.ormlite.field.types.IntType:
    com.j256.ormlite.field.types.IntType singleTon -> singleTon
    com.j256.ormlite.field.types.IntType getSingleton() -> getSingleton
    boolean isPrimitive() -> isPrimitive
com.j256.ormlite.field.types.IntegerObjectType -> com.j256.ormlite.field.types.IntegerObjectType:
    com.j256.ormlite.field.types.IntegerObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.IntegerObjectType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object convertIdNumber(java.lang.Number) -> convertIdNumber
    boolean isEscapedValue() -> isEscapedValue
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
com.j256.ormlite.field.types.LongObjectType -> com.j256.ormlite.field.types.LongObjectType:
    com.j256.ormlite.field.types.LongObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.LongObjectType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object convertIdNumber(java.lang.Number) -> convertIdNumber
    boolean isEscapedValue() -> isEscapedValue
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
com.j256.ormlite.field.types.LongStringType -> com.j256.ormlite.field.types.LongStringType:
    com.j256.ormlite.field.types.LongStringType singleTon -> singleTon
    com.j256.ormlite.field.types.LongStringType getSingleton() -> getSingleton
    boolean isAppropriateId() -> isAppropriateId
    int getDefaultWidth() -> getDefaultWidth
    java.lang.Class getPrimaryClass() -> getPrimaryClass
com.j256.ormlite.field.types.LongType -> com.j256.ormlite.field.types.LongType:
    com.j256.ormlite.field.types.LongType singleTon -> singleTon
    com.j256.ormlite.field.types.LongType getSingleton() -> getSingleton
    boolean isPrimitive() -> isPrimitive
com.j256.ormlite.field.types.SerializableType -> com.j256.ormlite.field.types.SerializableType:
    com.j256.ormlite.field.types.SerializableType singleTon -> singleTon
    com.j256.ormlite.field.types.SerializableType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
    boolean isStreamType() -> isStreamType
    boolean isComparable() -> isComparable
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
com.j256.ormlite.field.types.ShortObjectType -> com.j256.ormlite.field.types.ShortObjectType:
    com.j256.ormlite.field.types.ShortObjectType singleTon -> singleTon
    com.j256.ormlite.field.types.ShortObjectType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isEscapedValue() -> isEscapedValue
    boolean isValidForVersion() -> isValidForVersion
    java.lang.Object moveToNextValue(java.lang.Object) -> moveToNextValue
com.j256.ormlite.field.types.ShortType -> com.j256.ormlite.field.types.ShortType:
    com.j256.ormlite.field.types.ShortType singleTon -> singleTon
    com.j256.ormlite.field.types.ShortType getSingleton() -> getSingleton
    boolean isPrimitive() -> isPrimitive
com.j256.ormlite.field.types.SqlDateType -> com.j256.ormlite.field.types.SqlDateType:
    com.j256.ormlite.field.types.SqlDateType singleTon -> singleTon
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig sqlDateFormatConfig -> sqlDateFormatConfig
    com.j256.ormlite.field.types.SqlDateType getSingleton() -> getSingleton
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig() -> getDefaultDateFormatConfig
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
com.j256.ormlite.field.types.StringBytesType -> com.j256.ormlite.field.types.StringBytesType:
    java.lang.String DEFAULT_STRING_BYTES_CHARSET_NAME -> DEFAULT_STRING_BYTES_CHARSET_NAME
    com.j256.ormlite.field.types.StringBytesType singleTon -> singleTon
    com.j256.ormlite.field.types.StringBytesType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isAppropriateId() -> isAppropriateId
    boolean isArgumentHolderRequired() -> isArgumentHolderRequired
    java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int) -> resultStringToJava
    java.lang.Class getPrimaryClass() -> getPrimaryClass
    java.lang.String getCharsetName(com.j256.ormlite.field.FieldType) -> getCharsetName
com.j256.ormlite.field.types.StringType -> com.j256.ormlite.field.types.StringType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.StringType singleTon -> singleTon
    com.j256.ormlite.field.types.StringType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    int getDefaultWidth() -> getDefaultWidth
com.j256.ormlite.field.types.TimeStampType -> com.j256.ormlite.field.types.TimeStampType:
    com.j256.ormlite.field.types.TimeStampType singleTon -> singleTon
    com.j256.ormlite.field.types.TimeStampType getSingleton() -> getSingleton
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
com.j256.ormlite.field.types.UuidType -> com.j256.ormlite.field.types.UuidType:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    com.j256.ormlite.field.types.UuidType singleTon -> singleTon
    com.j256.ormlite.field.types.UuidType getSingleton() -> getSingleton
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int) -> sqlArgToJava
    java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object) -> javaToSqlArg
    boolean isValidGeneratedType() -> isValidGeneratedType
    boolean isSelfGeneratedId() -> isSelfGeneratedId
    java.lang.Object generateId() -> generateId
    int getDefaultWidth() -> getDefaultWidth
com.j256.ormlite.field.types.VoidType -> com.j256.ormlite.field.types.VoidType:
    java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String) -> parseDefaultString
    java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int) -> resultToSqlArg
    boolean isValidForField(java.lang.reflect.Field) -> isValidForField
com.j256.ormlite.logger.LocalLog -> com.j256.ormlite.logger.LocalLog:
    java.lang.String LOCAL_LOG_LEVEL_PROPERTY -> LOCAL_LOG_LEVEL_PROPERTY
    java.lang.String LOCAL_LOG_FILE_PROPERTY -> LOCAL_LOG_FILE_PROPERTY
    java.lang.String LOCAL_LOG_PROPERTIES_FILE -> LOCAL_LOG_PROPERTIES_FILE
    com.j256.ormlite.logger.Log$Level DEFAULT_LEVEL -> DEFAULT_LEVEL
    java.lang.ThreadLocal dateFormatThreadLocal -> dateFormatThreadLocal
    java.io.PrintStream printStream -> printStream
    java.util.List classLevels -> classLevels
    java.lang.String className -> className
    com.j256.ormlite.logger.Log$Level level -> level
    void openLogFile(java.lang.String) -> openLogFile
    boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level) -> isLevelEnabled
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable) -> log
    void flush() -> flush
    java.util.List readLevelResourceFile(java.io.InputStream) -> readLevelResourceFile
    java.util.List configureClassLevels(java.io.InputStream) -> configureClassLevels
    void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable) -> printMessage
com.j256.ormlite.logger.LocalLog$1 -> com.j256.ormlite.logger.LocalLog$1:
    java.text.DateFormat initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.j256.ormlite.logger.LocalLog$PatternLevel -> com.j256.ormlite.logger.LocalLog$PatternLevel:
    java.util.regex.Pattern pattern -> pattern
    com.j256.ormlite.logger.Log$Level level -> level
com.j256.ormlite.logger.Log -> com.j256.ormlite.logger.Log:
    boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level) -> isLevelEnabled
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable) -> log
com.j256.ormlite.logger.Log$Level -> com.j256.ormlite.logger.Log$Level:
    com.j256.ormlite.logger.Log$Level TRACE -> TRACE
    com.j256.ormlite.logger.Log$Level DEBUG -> DEBUG
    com.j256.ormlite.logger.Log$Level INFO -> INFO
    com.j256.ormlite.logger.Log$Level WARNING -> WARNING
    com.j256.ormlite.logger.Log$Level ERROR -> ERROR
    com.j256.ormlite.logger.Log$Level FATAL -> FATAL
    int level -> level
    com.j256.ormlite.logger.Log$Level[] $VALUES -> $VALUES
    com.j256.ormlite.logger.Log$Level[] values() -> values
    com.j256.ormlite.logger.Log$Level valueOf(java.lang.String) -> valueOf
    boolean isEnabled(com.j256.ormlite.logger.Log$Level) -> isEnabled
com.j256.ormlite.logger.Logger -> com.j256.ormlite.logger.Logger:
    java.lang.String ARG_STRING -> ARG_STRING
    int ARG_STRING_LENGTH -> ARG_STRING_LENGTH
    java.lang.Object UNKNOWN_ARG -> UNKNOWN_ARG
    com.j256.ormlite.logger.Log log -> log
    boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level) -> isLevelEnabled
    void trace(java.lang.String) -> trace
    void trace(java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object[]) -> trace
    void trace(java.lang.Throwable,java.lang.String) -> trace
    void trace(java.lang.Throwable,java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> trace
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object[]) -> debug
    void debug(java.lang.Throwable,java.lang.String) -> debug
    void debug(java.lang.Throwable,java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object[]) -> info
    void info(java.lang.Throwable,java.lang.String) -> info
    void info(java.lang.Throwable,java.lang.String,java.lang.Object) -> info
    void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object[]) -> warn
    void warn(java.lang.Throwable,java.lang.String) -> warn
    void warn(java.lang.Throwable,java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(java.lang.Throwable,java.lang.String) -> error
    void error(java.lang.Throwable,java.lang.String,java.lang.Object) -> error
    void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> error
    void fatal(java.lang.String) -> fatal
    void fatal(java.lang.String,java.lang.Object) -> fatal
    void fatal(java.lang.String,java.lang.Object,java.lang.Object) -> fatal
    void fatal(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> fatal
    void fatal(java.lang.String,java.lang.Object[]) -> fatal
    void fatal(java.lang.Throwable,java.lang.String) -> fatal
    void fatal(java.lang.Throwable,java.lang.String,java.lang.Object) -> fatal
    void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> fatal
    void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> fatal
    void fatal(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> fatal
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object[]) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> log
    void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> log
    void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> innerLog
    java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> buildFullMessage
    void appendArg(java.lang.StringBuilder,java.lang.Object) -> appendArg
com.j256.ormlite.logger.LoggerFactory -> com.j256.ormlite.logger.LoggerFactory:
    java.lang.String LOG_TYPE_SYSTEM_PROPERTY -> LOG_TYPE_SYSTEM_PROPERTY
    com.j256.ormlite.logger.LoggerFactory$LogType logType -> logType
    com.j256.ormlite.logger.Logger getLogger(java.lang.Class) -> getLogger
    com.j256.ormlite.logger.Logger getLogger(java.lang.String) -> getLogger
    java.lang.String getSimpleClassName(java.lang.String) -> getSimpleClassName
    com.j256.ormlite.logger.LoggerFactory$LogType findLogType() -> findLogType
com.j256.ormlite.logger.LoggerFactory$1 -> com.j256.ormlite.logger.LoggerFactory$1:
com.j256.ormlite.logger.LoggerFactory$LogType -> com.j256.ormlite.logger.LoggerFactory$LogType:
    com.j256.ormlite.logger.LoggerFactory$LogType ANDROID -> ANDROID
    com.j256.ormlite.logger.LoggerFactory$LogType SLF4J -> SLF4J
    com.j256.ormlite.logger.LoggerFactory$LogType COMMONS_LOGGING -> COMMONS_LOGGING
    com.j256.ormlite.logger.LoggerFactory$LogType LOG4J2 -> LOG4J2
    com.j256.ormlite.logger.LoggerFactory$LogType LOG4J -> LOG4J
    com.j256.ormlite.logger.LoggerFactory$LogType LOCAL -> LOCAL
    java.lang.String detectClassName -> detectClassName
    java.lang.String logClassName -> logClassName
    com.j256.ormlite.logger.LoggerFactory$LogType[] $VALUES -> $VALUES
    com.j256.ormlite.logger.LoggerFactory$LogType[] values() -> values
    com.j256.ormlite.logger.LoggerFactory$LogType valueOf(java.lang.String) -> valueOf
    com.j256.ormlite.logger.Log createLog(java.lang.String) -> createLog
    boolean isAvailable() -> isAvailable
    com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String) -> createLogFromClassName
    boolean isAvailableTestClass() -> isAvailableTestClass
com.j256.ormlite.logger.LoggerFactory$LogType$1 -> com.j256.ormlite.logger.LoggerFactory$LogType$1:
    com.j256.ormlite.logger.Log createLog(java.lang.String) -> createLog
    boolean isAvailable() -> isAvailable
com.j256.ormlite.misc.BaseDaoEnabled -> com.j256.ormlite.misc.BaseDaoEnabled:
    com.j256.ormlite.dao.Dao dao -> dao
    int create() -> create
    int refresh() -> refresh
    int update() -> update
    int updateId(java.lang.Object) -> updateId
    int delete() -> delete
    java.lang.String objectToString() -> objectToString
    java.lang.Object extractId() -> extractId
    boolean objectsEqual(java.lang.Object) -> objectsEqual
    void setDao(com.j256.ormlite.dao.Dao) -> setDao
    com.j256.ormlite.dao.Dao getDao() -> getDao
    void checkForDao() -> checkForDao
com.j256.ormlite.misc.JavaxPersistence -> com.j256.ormlite.misc.JavaxPersistence:
    com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field) -> createFieldConfig
    java.lang.String getEntityName(java.lang.Class) -> getEntityName
com.j256.ormlite.misc.SqlExceptionUtil -> com.j256.ormlite.misc.SqlExceptionUtil:
    java.sql.SQLException create(java.lang.String,java.lang.Throwable) -> create
com.j256.ormlite.misc.TransactionManager -> com.j256.ormlite.misc.TransactionManager:
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.String SAVE_POINT_PREFIX -> SAVE_POINT_PREFIX
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    java.util.concurrent.atomic.AtomicInteger savePointCounter -> savePointCounter
    void initialize() -> initialize
    java.lang.Object callInTransaction(java.util.concurrent.Callable) -> callInTransaction
    java.lang.Object callInTransaction(com.j256.ormlite.support.ConnectionSource,java.util.concurrent.Callable) -> callInTransaction
    java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable) -> callInTransaction
    java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable) -> callInTransaction
    void setConnectionSource(com.j256.ormlite.support.ConnectionSource) -> setConnectionSource
    void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint) -> commit
    void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint) -> rollBack
com.j256.ormlite.misc.VersionUtils -> com.j256.ormlite.misc.VersionUtils:
    java.lang.String CORE_VERSION -> CORE_VERSION
    com.j256.ormlite.logger.Logger logger -> logger
    boolean thrownOnErrors -> thrownOnErrors
    java.lang.String coreVersion -> coreVersion
    void checkCoreVersusJdbcVersions(java.lang.String) -> checkCoreVersusJdbcVersions
    void checkCoreVersusAndroidVersions(java.lang.String) -> checkCoreVersusAndroidVersions
    java.lang.String getCoreVersion() -> getCoreVersion
    void setThrownOnErrors(boolean) -> setThrownOnErrors
    void logVersionWarnings(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> logVersionWarnings
    void warning(java.lang.Throwable,java.lang.String,java.lang.String,java.lang.Object[]) -> warning
    com.j256.ormlite.logger.Logger getLogger() -> getLogger
com.j256.ormlite.stmt.ArgumentHolder -> com.j256.ormlite.stmt.ArgumentHolder:
    java.lang.String getColumnName() -> getColumnName
    void setMetaInfo(java.lang.String) -> setMetaInfo
    void setMetaInfo(com.j256.ormlite.field.FieldType) -> setMetaInfo
    void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType) -> setMetaInfo
    void setValue(java.lang.Object) -> setValue
    java.lang.Object getSqlArgValue() -> getSqlArgValue
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    com.j256.ormlite.field.FieldType getFieldType() -> getFieldType
com.j256.ormlite.stmt.BaseArgumentHolder -> com.j256.ormlite.stmt.BaseArgumentHolder:
    java.lang.String columnName -> columnName
    com.j256.ormlite.field.FieldType fieldType -> fieldType
    com.j256.ormlite.field.SqlType sqlType -> sqlType
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    boolean isValueSet() -> isValueSet
    java.lang.String getColumnName() -> getColumnName
    void setMetaInfo(java.lang.String) -> setMetaInfo
    void setMetaInfo(com.j256.ormlite.field.FieldType) -> setMetaInfo
    void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType) -> setMetaInfo
    java.lang.Object getSqlArgValue() -> getSqlArgValue
    com.j256.ormlite.field.FieldType getFieldType() -> getFieldType
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    java.lang.String toString() -> toString
com.j256.ormlite.stmt.ColumnArg -> com.j256.ormlite.stmt.ColumnArg:
    java.lang.String tableName -> tableName
    java.lang.String columnName -> columnName
    java.lang.String getTableName() -> getTableName
    java.lang.String getColumnName() -> getColumnName
com.j256.ormlite.stmt.DeleteBuilder -> com.j256.ormlite.stmt.DeleteBuilder:
    com.j256.ormlite.stmt.PreparedDelete prepare() -> prepare
    int delete() -> delete
    void clear() -> clear
    void appendStatementStart(java.lang.StringBuilder,java.util.List) -> appendStatementStart
    void appendStatementEnd(java.lang.StringBuilder,java.util.List) -> appendStatementEnd
com.j256.ormlite.stmt.GenericRowMapper -> com.j256.ormlite.stmt.GenericRowMapper:
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
com.j256.ormlite.stmt.NullArgHolder -> com.j256.ormlite.stmt.NullArgHolder:
    java.lang.String getColumnName() -> getColumnName
    void setValue(java.lang.Object) -> setValue
    void setMetaInfo(java.lang.String) -> setMetaInfo
    void setMetaInfo(com.j256.ormlite.field.FieldType) -> setMetaInfo
    void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType) -> setMetaInfo
    java.lang.Object getSqlArgValue() -> getSqlArgValue
    com.j256.ormlite.field.SqlType getSqlType() -> getSqlType
    com.j256.ormlite.field.FieldType getFieldType() -> getFieldType
com.j256.ormlite.stmt.PreparedDelete -> com.j256.ormlite.stmt.PreparedDelete:
com.j256.ormlite.stmt.PreparedQuery -> com.j256.ormlite.stmt.PreparedQuery:
com.j256.ormlite.stmt.PreparedStmt -> com.j256.ormlite.stmt.PreparedStmt:
    com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType) -> compile
    com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int) -> compile
    java.lang.String getStatement() -> getStatement
    com.j256.ormlite.stmt.StatementBuilder$StatementType getType() -> getType
    void setArgumentHolderValue(int,java.lang.Object) -> setArgumentHolderValue
com.j256.ormlite.stmt.PreparedUpdate -> com.j256.ormlite.stmt.PreparedUpdate:
com.j256.ormlite.stmt.QueryBuilder -> com.j256.ormlite.stmt.QueryBuilder:
    com.j256.ormlite.field.FieldType idField -> idField
    com.j256.ormlite.field.FieldType[] resultFieldTypes -> resultFieldTypes
    boolean distinct -> distinct
    boolean selectIdColumn -> selectIdColumn
    java.util.List selectColumnList -> selectColumnList
    java.util.List selectRawList -> selectRawList
    java.util.List orderByList -> orderByList
    java.lang.String orderByRaw -> orderByRaw
    com.j256.ormlite.stmt.ArgumentHolder[] orderByArgs -> orderByArgs
    java.util.List groupByList -> groupByList
    java.lang.String groupByRaw -> groupByRaw
    boolean isInnerQuery -> isInnerQuery
    boolean isCountOfQuery -> isCountOfQuery
    java.lang.String having -> having
    java.lang.Long limit -> limit
    java.lang.Long offset -> offset
    java.util.List joinList -> joinList
    void enableInnerQuery() -> enableInnerQuery
    int getSelectColumnCount() -> getSelectColumnCount
    java.util.List getSelectColumns() -> getSelectColumns
    com.j256.ormlite.stmt.PreparedQuery prepare() -> prepare
    com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.String[]) -> selectColumns
    com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable) -> selectColumns
    com.j256.ormlite.stmt.QueryBuilder selectRaw(java.lang.String[]) -> selectRaw
    com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String) -> groupBy
    com.j256.ormlite.stmt.QueryBuilder groupByRaw(java.lang.String) -> groupByRaw
    com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean) -> orderBy
    com.j256.ormlite.stmt.QueryBuilder orderByRaw(java.lang.String) -> orderByRaw
    com.j256.ormlite.stmt.QueryBuilder orderByRaw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[]) -> orderByRaw
    com.j256.ormlite.stmt.QueryBuilder distinct() -> distinct
    com.j256.ormlite.stmt.QueryBuilder limit(int) -> limit
    com.j256.ormlite.stmt.QueryBuilder limit(java.lang.Long) -> limit
    com.j256.ormlite.stmt.QueryBuilder offset(int) -> offset
    com.j256.ormlite.stmt.QueryBuilder offset(java.lang.Long) -> offset
    com.j256.ormlite.stmt.QueryBuilder setCountOf(boolean) -> setCountOf
    com.j256.ormlite.stmt.QueryBuilder having(java.lang.String) -> having
    com.j256.ormlite.stmt.QueryBuilder join(com.j256.ormlite.stmt.QueryBuilder) -> join
    com.j256.ormlite.stmt.QueryBuilder leftJoin(com.j256.ormlite.stmt.QueryBuilder) -> leftJoin
    java.util.List query() -> query
    com.j256.ormlite.dao.GenericRawResults queryRaw() -> queryRaw
    java.lang.Object queryForFirst() -> queryForFirst
    java.lang.String[] queryRawFirst() -> queryRawFirst
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    long countOf() -> countOf
    void clear() -> clear
    void appendStatementStart(java.lang.StringBuilder,java.util.List) -> appendStatementStart
    com.j256.ormlite.field.FieldType[] getResultFieldTypes() -> getResultFieldTypes
    void appendWhereStatement(java.lang.StringBuilder,java.util.List,boolean) -> appendWhereStatement
    void appendStatementEnd(java.lang.StringBuilder,java.util.List) -> appendStatementEnd
    boolean shouldPrependTableNameToColumns() -> shouldPrependTableNameToColumns
    void setAddTableName(boolean) -> setAddTableName
    void addJoinInfo(java.lang.String,com.j256.ormlite.stmt.QueryBuilder) -> addJoinInfo
    void matchJoinedFields(com.j256.ormlite.stmt.QueryBuilder$JoinInfo,com.j256.ormlite.stmt.QueryBuilder) -> matchJoinedFields
    void addSelectColumnToList(java.lang.String) -> addSelectColumnToList
    void appendJoinSql(java.lang.StringBuilder) -> appendJoinSql
    void appendSelectRaw(java.lang.StringBuilder) -> appendSelectRaw
    void appendColumns(java.lang.StringBuilder) -> appendColumns
    void appendFieldColumnName(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List) -> appendFieldColumnName
    void appendLimit(java.lang.StringBuilder) -> appendLimit
    void appendOffset(java.lang.StringBuilder) -> appendOffset
    void appendGroupBys(java.lang.StringBuilder) -> appendGroupBys
    boolean hasGroupStuff() -> hasGroupStuff
    void appendGroupBys(java.lang.StringBuilder,boolean) -> appendGroupBys
    void appendOrderBys(java.lang.StringBuilder,java.util.List) -> appendOrderBys
    boolean hasOrderStuff() -> hasOrderStuff
    void appendOrderBys(java.lang.StringBuilder,boolean,java.util.List) -> appendOrderBys
    void appendColumnName(java.lang.StringBuilder,java.lang.String) -> appendColumnName
    void appendHaving(java.lang.StringBuilder) -> appendHaving
    com.j256.ormlite.field.FieldType[] access$000(com.j256.ormlite.stmt.QueryBuilder) -> access$000
com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper -> com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper:
    com.j256.ormlite.stmt.QueryBuilder queryBuilder -> queryBuilder
    void appendStatementString(java.lang.StringBuilder,java.util.List) -> appendStatementString
    com.j256.ormlite.field.FieldType[] getResultFieldTypes() -> getResultFieldTypes
com.j256.ormlite.stmt.QueryBuilder$JoinInfo -> com.j256.ormlite.stmt.QueryBuilder$JoinInfo:
    java.lang.String type -> type
    com.j256.ormlite.stmt.QueryBuilder queryBuilder -> queryBuilder
    com.j256.ormlite.field.FieldType localField -> localField
    com.j256.ormlite.field.FieldType remoteField -> remoteField
    com.j256.ormlite.stmt.QueryBuilder this$0 -> this$0
com.j256.ormlite.stmt.RawResultsImpl -> com.j256.ormlite.stmt.RawResultsImpl:
    com.j256.ormlite.stmt.SelectIterator iterator -> iterator
    java.lang.String[] columnNames -> columnNames
    int getNumberColumns() -> getNumberColumns
    java.lang.String[] getColumnNames() -> getColumnNames
    java.util.List getResults() -> getResults
    java.lang.Object getFirstResult() -> getFirstResult
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.dao.CloseableIterator closeableIterator() -> closeableIterator
    void close() -> close
    java.util.Iterator iterator() -> iterator
com.j256.ormlite.stmt.RawRowMapperImpl -> com.j256.ormlite.stmt.RawRowMapperImpl:
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    java.lang.Object mapRow(java.lang.String[],java.lang.String[]) -> mapRow
com.j256.ormlite.stmt.SelectArg -> com.j256.ormlite.stmt.SelectArg:
    boolean hasBeenSet -> hasBeenSet
    java.lang.Object value -> value
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    boolean isValueSet() -> isValueSet
com.j256.ormlite.stmt.SelectIterator -> com.j256.ormlite.stmt.SelectIterator:
    com.j256.ormlite.logger.Logger logger -> logger
    java.lang.Class dataClass -> dataClass
    com.j256.ormlite.dao.Dao classDao -> classDao
    com.j256.ormlite.support.ConnectionSource connectionSource -> connectionSource
    com.j256.ormlite.support.DatabaseConnection connection -> connection
    com.j256.ormlite.support.CompiledStatement compiledStmt -> compiledStmt
    com.j256.ormlite.support.DatabaseResults results -> results
    com.j256.ormlite.stmt.GenericRowMapper rowMapper -> rowMapper
    java.lang.String statement -> statement
    boolean first -> first
    boolean closed -> closed
    boolean alreadyMoved -> alreadyMoved
    java.lang.Object last -> last
    int rowC -> rowC
    boolean hasNextThrow() -> hasNextThrow
    boolean hasNext() -> hasNext
    java.lang.Object first() -> first
    java.lang.Object previous() -> previous
    java.lang.Object current() -> current
    java.lang.Object nextThrow() -> nextThrow
    java.lang.Object next() -> next
    java.lang.Object moveRelative(int) -> moveRelative
    void removeThrow() -> removeThrow
    void remove() -> remove
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.support.DatabaseResults getRawResults() -> getRawResults
    void moveToNext() -> moveToNext
    java.lang.Object getCurrent() -> getCurrent
com.j256.ormlite.stmt.StatementBuilder -> com.j256.ormlite.stmt.StatementBuilder:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    java.lang.String tableName -> tableName
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    com.j256.ormlite.dao.Dao dao -> dao
    com.j256.ormlite.stmt.StatementBuilder$StatementType type -> type
    boolean addTableName -> addTableName
    com.j256.ormlite.stmt.Where where -> where
    com.j256.ormlite.stmt.Where where() -> where
    void setWhere(com.j256.ormlite.stmt.Where) -> setWhere
    com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long) -> prepareStatement
    java.lang.String prepareStatementString() -> prepareStatementString
    void clear() -> clear
    java.lang.String buildStatementString(java.util.List) -> buildStatementString
    void appendStatementString(java.lang.StringBuilder,java.util.List) -> appendStatementString
    void appendStatementStart(java.lang.StringBuilder,java.util.List) -> appendStatementStart
    void appendWhereStatement(java.lang.StringBuilder,java.util.List,boolean) -> appendWhereStatement
    void appendStatementEnd(java.lang.StringBuilder,java.util.List) -> appendStatementEnd
    boolean shouldPrependTableNameToColumns() -> shouldPrependTableNameToColumns
    com.j256.ormlite.field.FieldType[] getResultFieldTypes() -> getResultFieldTypes
    com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String) -> verifyColumnName
    com.j256.ormlite.stmt.StatementBuilder$StatementType getType() -> getType
com.j256.ormlite.stmt.StatementBuilder$StatementType -> com.j256.ormlite.stmt.StatementBuilder$StatementType:
    com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT -> SELECT
    com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT_LONG -> SELECT_LONG
    com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT_RAW -> SELECT_RAW
    com.j256.ormlite.stmt.StatementBuilder$StatementType UPDATE -> UPDATE
    com.j256.ormlite.stmt.StatementBuilder$StatementType DELETE -> DELETE
    com.j256.ormlite.stmt.StatementBuilder$StatementType EXECUTE -> EXECUTE
    boolean okForStatementBuilder -> okForStatementBuilder
    boolean okForQuery -> okForQuery
    boolean okForUpdate -> okForUpdate
    boolean okForExecute -> okForExecute
    com.j256.ormlite.stmt.StatementBuilder$StatementType[] $VALUES -> $VALUES
    com.j256.ormlite.stmt.StatementBuilder$StatementType[] values() -> values
    com.j256.ormlite.stmt.StatementBuilder$StatementType valueOf(java.lang.String) -> valueOf
    boolean isOkForStatementBuilder() -> isOkForStatementBuilder
    boolean isOkForQuery() -> isOkForQuery
    boolean isOkForUpdate() -> isOkForUpdate
    boolean isOkForExecute() -> isOkForExecute
com.j256.ormlite.stmt.StatementExecutor -> com.j256.ormlite.stmt.StatementExecutor:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.field.FieldType[] noFieldTypes -> noFieldTypes
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    com.j256.ormlite.dao.Dao dao -> dao
    com.j256.ormlite.stmt.mapped.MappedQueryForId mappedQueryForId -> mappedQueryForId
    com.j256.ormlite.stmt.PreparedQuery preparedQueryForAll -> preparedQueryForAll
    com.j256.ormlite.stmt.mapped.MappedCreate mappedInsert -> mappedInsert
    com.j256.ormlite.stmt.mapped.MappedUpdate mappedUpdate -> mappedUpdate
    com.j256.ormlite.stmt.mapped.MappedUpdateId mappedUpdateId -> mappedUpdateId
    com.j256.ormlite.stmt.mapped.MappedDelete mappedDelete -> mappedDelete
    com.j256.ormlite.stmt.mapped.MappedRefresh mappedRefresh -> mappedRefresh
    java.lang.String countStarQuery -> countStarQuery
    java.lang.String ifExistsQuery -> ifExistsQuery
    com.j256.ormlite.field.FieldType[] ifExistsFieldTypes -> ifExistsFieldTypes
    com.j256.ormlite.dao.RawRowMapper rawRowMapper -> rawRowMapper
    java.lang.Object queryForId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> queryForId
    java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache) -> queryForFirst
    java.util.List queryForAll(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.ObjectCache) -> queryForAll
    long queryForCountStar(com.j256.ormlite.support.DatabaseConnection) -> queryForCountStar
    long queryForLong(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt) -> queryForLong
    long queryForLong(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[]) -> queryForLong
    java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache) -> query
    com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,int,com.j256.ormlite.dao.ObjectCache) -> buildIterator
    com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper() -> getSelectStarRowMapper
    com.j256.ormlite.dao.RawRowMapper getRawRowMapper() -> getRawRowMapper
    com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int) -> buildIterator
    com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache) -> queryRaw
    com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache) -> queryRaw
    int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[]) -> updateRaw
    int executeRawNoArgs(com.j256.ormlite.support.DatabaseConnection,java.lang.String) -> executeRawNoArgs
    int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[]) -> executeRaw
    int create(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> create
    int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> update
    int updateId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> updateId
    int update(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedUpdate) -> update
    int refresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> refresh
    int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> delete
    int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> deleteById
    int deleteObjects(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache) -> deleteObjects
    int deleteIds(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache) -> deleteIds
    int delete(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedDelete) -> delete
    java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable) -> callBatchTasks
    java.lang.String[] mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object) -> ifExists
    void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[]) -> assignStatementArguments
    void prepareQueryForAll() -> prepareQueryForAll
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper -> com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper:
    com.j256.ormlite.field.DataType[] columnTypes -> columnTypes
    java.lang.Object[] mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper -> com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper:
    com.j256.ormlite.dao.RawRowMapper mapper -> mapper
    com.j256.ormlite.stmt.GenericRowMapper stringRowMapper -> stringRowMapper
    java.lang.String[] columnNames -> columnNames
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    java.lang.String[] getColumnNames(com.j256.ormlite.support.DatabaseResults) -> getColumnNames
com.j256.ormlite.stmt.ThreadLocalSelectArg -> com.j256.ormlite.stmt.ThreadLocalSelectArg:
    java.lang.ThreadLocal threadValue -> threadValue
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    boolean isValueSet() -> isValueSet
com.j256.ormlite.stmt.ThreadLocalSelectArg$ValueWrapper -> com.j256.ormlite.stmt.ThreadLocalSelectArg$ValueWrapper:
    java.lang.Object value -> value
com.j256.ormlite.stmt.UpdateBuilder -> com.j256.ormlite.stmt.UpdateBuilder:
    java.util.List updateClauseList -> updateClauseList
    com.j256.ormlite.stmt.PreparedUpdate prepare() -> prepare
    com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object) -> updateColumnValue
    com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String) -> updateColumnExpression
    void escapeColumnName(java.lang.StringBuilder,java.lang.String) -> escapeColumnName
    java.lang.String escapeColumnName(java.lang.String) -> escapeColumnName
    void escapeValue(java.lang.StringBuilder,java.lang.String) -> escapeValue
    java.lang.String escapeValue(java.lang.String) -> escapeValue
    int update() -> update
    void clear() -> clear
    void appendStatementStart(java.lang.StringBuilder,java.util.List) -> appendStatementStart
    void appendStatementEnd(java.lang.StringBuilder,java.util.List) -> appendStatementEnd
    void addUpdateColumnToList(java.lang.String,com.j256.ormlite.stmt.query.Clause) -> addUpdateColumnToList
com.j256.ormlite.stmt.Where -> com.j256.ormlite.stmt.Where:
    int START_CLAUSE_SIZE -> START_CLAUSE_SIZE
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    com.j256.ormlite.stmt.StatementBuilder statementBuilder -> statementBuilder
    com.j256.ormlite.field.FieldType idFieldType -> idFieldType
    java.lang.String idColumnName -> idColumnName
    com.j256.ormlite.db.DatabaseType databaseType -> databaseType
    com.j256.ormlite.stmt.query.Clause[] clauseStack -> clauseStack
    int clauseStackLevel -> clauseStackLevel
    com.j256.ormlite.stmt.query.NeedsFutureClause needsFuture -> needsFuture
    com.j256.ormlite.stmt.Where and() -> and
    com.j256.ormlite.stmt.Where and(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[]) -> and
    com.j256.ormlite.stmt.Where and(int) -> and
    com.j256.ormlite.stmt.Where between(java.lang.String,java.lang.Object,java.lang.Object) -> between
    com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object) -> eq
    com.j256.ormlite.stmt.Where ge(java.lang.String,java.lang.Object) -> ge
    com.j256.ormlite.stmt.Where gt(java.lang.String,java.lang.Object) -> gt
    com.j256.ormlite.stmt.Where in(java.lang.String,java.lang.Iterable) -> in
    com.j256.ormlite.stmt.Where notIn(java.lang.String,java.lang.Iterable) -> notIn
    com.j256.ormlite.stmt.Where in(java.lang.String,java.lang.Object[]) -> in
    com.j256.ormlite.stmt.Where notIn(java.lang.String,java.lang.Object[]) -> notIn
    com.j256.ormlite.stmt.Where in(java.lang.String,com.j256.ormlite.stmt.QueryBuilder) -> in
    com.j256.ormlite.stmt.Where notIn(java.lang.String,com.j256.ormlite.stmt.QueryBuilder) -> notIn
    com.j256.ormlite.stmt.Where exists(com.j256.ormlite.stmt.QueryBuilder) -> exists
    com.j256.ormlite.stmt.Where isNull(java.lang.String) -> isNull
    com.j256.ormlite.stmt.Where isNotNull(java.lang.String) -> isNotNull
    com.j256.ormlite.stmt.Where le(java.lang.String,java.lang.Object) -> le
    com.j256.ormlite.stmt.Where lt(java.lang.String,java.lang.Object) -> lt
    com.j256.ormlite.stmt.Where like(java.lang.String,java.lang.Object) -> like
    com.j256.ormlite.stmt.Where ne(java.lang.String,java.lang.Object) -> ne
    com.j256.ormlite.stmt.Where not() -> not
    com.j256.ormlite.stmt.Where not(com.j256.ormlite.stmt.Where) -> not
    com.j256.ormlite.stmt.Where or() -> or
    com.j256.ormlite.stmt.Where or(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[]) -> or
    com.j256.ormlite.stmt.Where or(int) -> or
    com.j256.ormlite.stmt.Where idEq(java.lang.Object) -> idEq
    com.j256.ormlite.stmt.Where idEq(com.j256.ormlite.dao.Dao,java.lang.Object) -> idEq
    com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[]) -> raw
    com.j256.ormlite.stmt.Where rawComparison(java.lang.String,java.lang.String,java.lang.Object) -> rawComparison
    com.j256.ormlite.stmt.PreparedQuery prepare() -> prepare
    java.util.List query() -> query
    com.j256.ormlite.dao.GenericRawResults queryRaw() -> queryRaw
    java.lang.Object queryForFirst() -> queryForFirst
    java.lang.String[] queryRawFirst() -> queryRawFirst
    long countOf() -> countOf
    com.j256.ormlite.dao.CloseableIterator iterator() -> iterator
    com.j256.ormlite.stmt.Where clear() -> clear
    java.lang.String getStatement() -> getStatement
    void appendSql(java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    java.lang.String toString() -> toString
    com.j256.ormlite.stmt.QueryBuilder checkQueryBuilderMethod(java.lang.String) -> checkQueryBuilderMethod
    com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[]) -> in
    com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder) -> in
    com.j256.ormlite.stmt.query.Clause[] buildClauseArray(com.j256.ormlite.stmt.Where[],java.lang.String) -> buildClauseArray
    void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause) -> addNeedsFuture
    void addClause(com.j256.ormlite.stmt.query.Clause) -> addClause
    com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String) -> findColumnFieldType
    void push(com.j256.ormlite.stmt.query.Clause) -> push
    com.j256.ormlite.stmt.query.Clause pop(java.lang.String) -> pop
    com.j256.ormlite.stmt.query.Clause peek() -> peek
com.j256.ormlite.stmt.mapped.BaseMappedQuery -> com.j256.ormlite.stmt.mapped.BaseMappedQuery:
    com.j256.ormlite.field.FieldType[] resultsFieldTypes -> resultsFieldTypes
    java.util.Map columnPositions -> columnPositions
    java.lang.Object parent -> parent
    java.lang.Object parentId -> parentId
    java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults) -> mapRow
    void setParentInformation(java.lang.Object,java.lang.Object) -> setParentInformation
com.j256.ormlite.stmt.mapped.BaseMappedStatement -> com.j256.ormlite.stmt.mapped.BaseMappedStatement:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.table.TableInfo tableInfo -> tableInfo
    java.lang.Class clazz -> clazz
    com.j256.ormlite.field.FieldType idField -> idField
    java.lang.String statement -> statement
    com.j256.ormlite.field.FieldType[] argFieldTypes -> argFieldTypes
    java.lang.Object[] getFieldObjects(java.lang.Object) -> getFieldObjects
    java.lang.Object convertIdToFieldObject(java.lang.Object) -> convertIdToFieldObject
    void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List) -> appendWhereFieldEq
    void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String) -> appendTableName
    void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List) -> appendFieldColumnName
    java.lang.String toString() -> toString
com.j256.ormlite.stmt.mapped.MappedCreate -> com.j256.ormlite.stmt.mapped.MappedCreate:
    java.lang.String queryNextSequenceStmt -> queryNextSequenceStmt
    java.lang.String dataClassName -> dataClassName
    int versionFieldTypeIndex -> versionFieldTypeIndex
    int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> insert
    com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
    boolean foreignCollectionsAreAssigned(com.j256.ormlite.field.FieldType[],java.lang.Object) -> foreignCollectionsAreAssigned
    boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType) -> isFieldCreatable
    java.lang.String buildQueryNextSequence(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType) -> buildQueryNextSequence
    void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> assignSequenceId
    void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache) -> assignIdValue
com.j256.ormlite.stmt.mapped.MappedCreate$1 -> com.j256.ormlite.stmt.mapped.MappedCreate$1:
com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder -> com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder:
    java.lang.Number key -> key
    java.lang.Number getKey() -> getKey
    void addKey(java.lang.Number) -> addKey
com.j256.ormlite.stmt.mapped.MappedDelete -> com.j256.ormlite.stmt.mapped.MappedDelete:
    com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
    int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> delete
    int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> deleteById
com.j256.ormlite.stmt.mapped.MappedDeleteCollection -> com.j256.ormlite.stmt.mapped.MappedDeleteCollection:
    int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache) -> deleteObjects
    int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache) -> deleteIds
    com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int) -> build
    int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache) -> updateRows
    void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[]) -> appendWhereIds
com.j256.ormlite.stmt.mapped.MappedPreparedStmt -> com.j256.ormlite.stmt.mapped.MappedPreparedStmt:
    com.j256.ormlite.stmt.ArgumentHolder[] argHolders -> argHolders
    java.lang.Long limit -> limit
    com.j256.ormlite.stmt.StatementBuilder$StatementType type -> type
    com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType) -> compile
    com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int) -> compile
    java.lang.String getStatement() -> getStatement
    com.j256.ormlite.stmt.StatementBuilder$StatementType getType() -> getType
    void setArgumentHolderValue(int,java.lang.Object) -> setArgumentHolderValue
    com.j256.ormlite.support.CompiledStatement assignStatementArguments(com.j256.ormlite.support.CompiledStatement) -> assignStatementArguments
com.j256.ormlite.stmt.mapped.MappedQueryForId -> com.j256.ormlite.stmt.mapped.MappedQueryForId:
    java.lang.String label -> label
    java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> execute
    com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType) -> build
    java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType) -> buildStatement
    void logArgs(java.lang.Object[]) -> logArgs
com.j256.ormlite.stmt.mapped.MappedRefresh -> com.j256.ormlite.stmt.mapped.MappedRefresh:
    int executeRefresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> executeRefresh
    com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
com.j256.ormlite.stmt.mapped.MappedUpdate -> com.j256.ormlite.stmt.mapped.MappedUpdate:
    com.j256.ormlite.field.FieldType versionFieldType -> versionFieldType
    int versionFieldTypeIndex -> versionFieldTypeIndex
    com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
    int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> update
    boolean isFieldUpdatable(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.FieldType) -> isFieldUpdatable
com.j256.ormlite.stmt.mapped.MappedUpdateId -> com.j256.ormlite.stmt.mapped.MappedUpdateId:
    int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache) -> execute
    com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo) -> build
    java.lang.Object extractIdToFieldObject(java.lang.Object) -> extractIdToFieldObject
com.j256.ormlite.stmt.query.BaseComparison -> com.j256.ormlite.stmt.query.BaseComparison:
    java.lang.String NUMBER_CHARACTERS -> NUMBER_CHARACTERS
    java.lang.String columnName -> columnName
    com.j256.ormlite.field.FieldType fieldType -> fieldType
    java.lang.Object value -> value
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    java.lang.String getColumnName() -> getColumnName
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object) -> appendArgOrValue
    java.lang.String toString() -> toString
com.j256.ormlite.stmt.query.Between -> com.j256.ormlite.stmt.query.Between:
    java.lang.Object low -> low
    java.lang.Object high -> high
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.Clause -> com.j256.ormlite.stmt.query.Clause:
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.Comparison -> com.j256.ormlite.stmt.query.Comparison:
    java.lang.String getColumnName() -> getColumnName
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
com.j256.ormlite.stmt.query.Exists -> com.j256.ormlite.stmt.query.Exists:
    com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper subQueryBuilder -> subQueryBuilder
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.In -> com.j256.ormlite.stmt.query.In:
    java.lang.Iterable objects -> objects
    boolean in -> in
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.InSubQuery -> com.j256.ormlite.stmt.query.InSubQuery:
    com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper subQueryBuilder -> subQueryBuilder
    boolean in -> in
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.IsNotNull -> com.j256.ormlite.stmt.query.IsNotNull:
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.IsNull -> com.j256.ormlite.stmt.query.IsNull:
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String toString() -> toString
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.ManyClause -> com.j256.ormlite.stmt.query.ManyClause:
    java.lang.String AND_OPERATION -> AND_OPERATION
    java.lang.String OR_OPERATION -> OR_OPERATION
    com.j256.ormlite.stmt.query.Clause first -> first
    com.j256.ormlite.stmt.query.Clause second -> second
    com.j256.ormlite.stmt.query.Clause[] others -> others
    int startOthersAt -> startOthersAt
    java.lang.String operation -> operation
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    void setMissingClause(com.j256.ormlite.stmt.query.Clause) -> setMissingClause
com.j256.ormlite.stmt.query.NeedsFutureClause -> com.j256.ormlite.stmt.query.NeedsFutureClause:
    void setMissingClause(com.j256.ormlite.stmt.query.Clause) -> setMissingClause
com.j256.ormlite.stmt.query.Not -> com.j256.ormlite.stmt.query.Not:
    com.j256.ormlite.stmt.query.Comparison comparison -> comparison
    com.j256.ormlite.stmt.query.Exists exists -> exists
    void setMissingClause(com.j256.ormlite.stmt.query.Clause) -> setMissingClause
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
    java.lang.String toString() -> toString
com.j256.ormlite.stmt.query.OrderBy -> com.j256.ormlite.stmt.query.OrderBy:
    java.lang.String columnName -> columnName
    boolean ascending -> ascending
    java.lang.String getColumnName() -> getColumnName
    boolean isAscending() -> isAscending
com.j256.ormlite.stmt.query.Raw -> com.j256.ormlite.stmt.query.Raw:
    java.lang.String statement -> statement
    com.j256.ormlite.stmt.ArgumentHolder[] args -> args
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.SetExpression -> com.j256.ormlite.stmt.query.SetExpression:
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object) -> appendArgOrValue
    java.lang.String toString() -> toString
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.SetValue -> com.j256.ormlite.stmt.query.SetValue:
    com.j256.ormlite.stmt.ArgumentHolder nullValue -> nullValue
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    java.lang.String toString() -> toString
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.stmt.query.SimpleComparison -> com.j256.ormlite.stmt.query.SimpleComparison:
    java.lang.String EQUAL_TO_OPERATION -> EQUAL_TO_OPERATION
    java.lang.String GREATER_THAN_OPERATION -> GREATER_THAN_OPERATION
    java.lang.String GREATER_THAN_EQUAL_TO_OPERATION -> GREATER_THAN_EQUAL_TO_OPERATION
    java.lang.String LESS_THAN_OPERATION -> LESS_THAN_OPERATION
    java.lang.String LESS_THAN_EQUAL_TO_OPERATION -> LESS_THAN_EQUAL_TO_OPERATION
    java.lang.String LIKE_OPERATION -> LIKE_OPERATION
    java.lang.String NOT_EQUAL_TO_OPERATION -> NOT_EQUAL_TO_OPERATION
    java.lang.String operation -> operation
    void appendOperation(java.lang.StringBuilder) -> appendOperation
    java.lang.String toString() -> toString
    void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List) -> appendValue
    java.lang.String getColumnName() -> getColumnName
    void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.StringBuilder,java.util.List) -> appendSql
com.j256.ormlite.support.BaseConnectionSource -> com.j256.ormlite.support.BaseConnectionSource:
    java.lang.ThreadLocal specialConnection -> specialConnection
    com.j256.ormlite.support.DatabaseConnection getSpecialConnection() -> getSpecialConnection
    com.j256.ormlite.support.DatabaseConnection getSavedConnection() -> getSavedConnection
    boolean isSavedConnection(com.j256.ormlite.support.DatabaseConnection) -> isSavedConnection
    boolean saveSpecial(com.j256.ormlite.support.DatabaseConnection) -> saveSpecial
    boolean clearSpecial(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.logger.Logger) -> clearSpecial
com.j256.ormlite.support.BaseConnectionSource$NestedConnection -> com.j256.ormlite.support.BaseConnectionSource$NestedConnection:
    com.j256.ormlite.support.DatabaseConnection connection -> connection
    int nestedC -> nestedC
    void increment() -> increment
    int decrementAndGet() -> decrementAndGet
com.j256.ormlite.support.CompiledStatement -> com.j256.ormlite.support.CompiledStatement:
    int getColumnCount() -> getColumnCount
    java.lang.String getColumnName(int) -> getColumnName
    int runUpdate() -> runUpdate
    com.j256.ormlite.support.DatabaseResults runQuery(com.j256.ormlite.dao.ObjectCache) -> runQuery
    int runExecute() -> runExecute
    void close() -> close
    void closeQuietly() -> closeQuietly
    void setObject(int,java.lang.Object,com.j256.ormlite.field.SqlType) -> setObject
    void setMaxRows(int) -> setMaxRows
    void setQueryTimeout(long) -> setQueryTimeout
com.j256.ormlite.support.ConnectionSource -> com.j256.ormlite.support.ConnectionSource:
    com.j256.ormlite.support.DatabaseConnection getReadOnlyConnection() -> getReadOnlyConnection
    com.j256.ormlite.support.DatabaseConnection getReadWriteConnection() -> getReadWriteConnection
    void releaseConnection(com.j256.ormlite.support.DatabaseConnection) -> releaseConnection
    boolean saveSpecialConnection(com.j256.ormlite.support.DatabaseConnection) -> saveSpecialConnection
    void clearSpecialConnection(com.j256.ormlite.support.DatabaseConnection) -> clearSpecialConnection
    com.j256.ormlite.support.DatabaseConnection getSpecialConnection() -> getSpecialConnection
    void close() -> close
    void closeQuietly() -> closeQuietly
    com.j256.ormlite.db.DatabaseType getDatabaseType() -> getDatabaseType
    boolean isOpen() -> isOpen
com.j256.ormlite.support.DatabaseConnection -> com.j256.ormlite.support.DatabaseConnection:
    java.lang.Object MORE_THAN_ONE -> MORE_THAN_ONE
    int DEFAULT_RESULT_FLAGS -> DEFAULT_RESULT_FLAGS
    boolean isAutoCommitSupported() -> isAutoCommitSupported
    boolean isAutoCommit() -> isAutoCommit
    void setAutoCommit(boolean) -> setAutoCommit
    java.sql.Savepoint setSavePoint(java.lang.String) -> setSavePoint
    void commit(java.sql.Savepoint) -> commit
    void rollback(java.sql.Savepoint) -> rollback
    int executeStatement(java.lang.String,int) -> executeStatement
    com.j256.ormlite.support.CompiledStatement compileStatement(java.lang.String,com.j256.ormlite.stmt.StatementBuilder$StatementType,com.j256.ormlite.field.FieldType[]) -> compileStatement
    com.j256.ormlite.support.CompiledStatement compileStatement(java.lang.String,com.j256.ormlite.stmt.StatementBuilder$StatementType,com.j256.ormlite.field.FieldType[],int) -> compileStatement
    int insert(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.support.GeneratedKeyHolder) -> insert
    int update(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> update
    int delete(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> delete
    java.lang.Object queryForOne(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache) -> queryForOne
    long queryForLong(java.lang.String) -> queryForLong
    long queryForLong(java.lang.String,java.lang.Object[],com.j256.ormlite.field.FieldType[]) -> queryForLong
    void close() -> close
    void closeQuietly() -> closeQuietly
    boolean isClosed() -> isClosed
    boolean isTableExists(java.lang.String) -> isTableExists
com.j256.ormlite.support.DatabaseResults -> com.j256.ormlite.support.DatabaseResults:
    int getColumnCount() -> getColumnCount
    java.lang.String[] getColumnNames() -> getColumnNames
    boolean first() -> first
    boolean previous() -> previous
    boolean next() -> next
    boolean last() -> last
    boolean moveRelative(int) -> moveRelative
    boolean moveAbsolute(int) -> moveAbsolute
    int findColumn(java.lang.String) -> findColumn
    java.lang.String getString(int) -> getString
    boolean getBoolean(int) -> getBoolean
    char getChar(int) -> getChar
    byte getByte(int) -> getByte
    byte[] getBytes(int) -> getBytes
    short getShort(int) -> getShort
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    java.sql.Timestamp getTimestamp(int) -> getTimestamp
    java.io.InputStream getBlobStream(int) -> getBlobStream
    java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    boolean wasNull(int) -> wasNull
    com.j256.ormlite.dao.ObjectCache getObjectCache() -> getObjectCache
    void close() -> close
    void closeQuietly() -> closeQuietly
com.j256.ormlite.support.GeneratedKeyHolder -> com.j256.ormlite.support.GeneratedKeyHolder:
    void addKey(java.lang.Number) -> addKey
com.j256.ormlite.table.DatabaseTable -> com.j256.ormlite.table.DatabaseTable:
    java.lang.String tableName() -> tableName
    java.lang.Class daoClass() -> daoClass
com.j256.ormlite.table.DatabaseTableConfig -> com.j256.ormlite.table.DatabaseTableConfig:
    java.lang.Class dataClass -> dataClass
    java.lang.String tableName -> tableName
    java.util.List fieldConfigs -> fieldConfigs
    com.j256.ormlite.field.FieldType[] fieldTypes -> fieldTypes
    java.lang.reflect.Constructor constructor -> constructor
    void initialize() -> initialize
    java.lang.Class getDataClass() -> getDataClass
    void setDataClass(java.lang.Class) -> setDataClass
    java.lang.String getTableName() -> getTableName
    void setTableName(java.lang.String) -> setTableName
    void setFieldConfigs(java.util.List) -> setFieldConfigs
    void extractFieldTypes(com.j256.ormlite.support.ConnectionSource) -> extractFieldTypes
    com.j256.ormlite.field.FieldType[] getFieldTypes(com.j256.ormlite.db.DatabaseType) -> getFieldTypes
    java.util.List getFieldConfigs() -> getFieldConfigs
    java.lang.reflect.Constructor getConstructor() -> getConstructor
    void setConstructor(java.lang.reflect.Constructor) -> setConstructor
    com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> fromClass
    java.lang.String extractTableName(java.lang.Class) -> extractTableName
    java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class) -> findNoArgConstructor
    com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String) -> extractFieldTypes
    com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List) -> convertFieldConfigs
com.j256.ormlite.table.DatabaseTableConfigLoader -> com.j256.ormlite.table.DatabaseTableConfigLoader:
    java.lang.String CONFIG_FILE_START_MARKER -> CONFIG_FILE_START_MARKER
    java.lang.String CONFIG_FILE_END_MARKER -> CONFIG_FILE_END_MARKER
    java.lang.String CONFIG_FILE_FIELDS_START -> CONFIG_FILE_FIELDS_START
    java.lang.String CONFIG_FILE_FIELDS_END -> CONFIG_FILE_FIELDS_END
    java.lang.String FIELD_NAME_DATA_CLASS -> FIELD_NAME_DATA_CLASS
    java.lang.String FIELD_NAME_TABLE_NAME -> FIELD_NAME_TABLE_NAME
    java.util.List loadDatabaseConfigFromReader(java.io.BufferedReader) -> loadDatabaseConfigFromReader
    com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader) -> fromReader
    void write(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig) -> write
    void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig) -> writeConfig
    void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String) -> readTableField
    void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig) -> readFields
com.j256.ormlite.table.ObjectFactory -> com.j256.ormlite.table.ObjectFactory:
    java.lang.Object createObject(java.lang.reflect.Constructor,java.lang.Class) -> createObject
com.j256.ormlite.table.TableInfo -> com.j256.ormlite.table.TableInfo:
    com.j256.ormlite.field.FieldType[] NO_FOREIGN_COLLECTIONS -> NO_FOREIGN_COLLECTIONS
    com.j256.ormlite.dao.BaseDaoImpl baseDaoImpl -> baseDaoImpl
    java.lang.Class dataClass -> dataClass
    java.lang.String tableName -> tableName
    com.j256.ormlite.field.FieldType[] fieldTypes -> fieldTypes
    com.j256.ormlite.field.FieldType[] foreignCollections -> foreignCollections
    com.j256.ormlite.field.FieldType idField -> idField
    java.lang.reflect.Constructor constructor -> constructor
    boolean foreignAutoCreate -> foreignAutoCreate
    java.util.Map fieldNameMap -> fieldNameMap
    java.lang.Class getDataClass() -> getDataClass
    java.lang.String getTableName() -> getTableName
    com.j256.ormlite.field.FieldType[] getFieldTypes() -> getFieldTypes
    com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String) -> getFieldTypeByColumnName
    com.j256.ormlite.field.FieldType getIdField() -> getIdField
    java.lang.reflect.Constructor getConstructor() -> getConstructor
    java.lang.String objectToString(java.lang.Object) -> objectToString
    java.lang.Object createObject() -> createObject
    boolean isUpdatable() -> isUpdatable
    boolean isForeignAutoCreate() -> isForeignAutoCreate
    com.j256.ormlite.field.FieldType[] getForeignCollections() -> getForeignCollections
    boolean hasColumnName(java.lang.String) -> hasColumnName
    void wireNewInstance(com.j256.ormlite.dao.BaseDaoImpl,java.lang.Object) -> wireNewInstance
com.j256.ormlite.table.TableUtils -> com.j256.ormlite.table.TableUtils:
    com.j256.ormlite.logger.Logger logger -> logger
    com.j256.ormlite.field.FieldType[] noFieldTypes -> noFieldTypes
    int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createTable
    int createTableIfNotExists(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> createTableIfNotExists
    int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createTable
    int createTableIfNotExists(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> createTableIfNotExists
    java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> getCreateTableStatements
    java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> getCreateTableStatements
    int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean) -> dropTable
    int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean) -> dropTable
    int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class) -> clearTable
    int clearTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig) -> clearTable
    int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean) -> createTable
    int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean) -> createTable
    int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String) -> clearTable
    int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean) -> doDropTable
    void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List) -> addDropIndexStatements
    void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean) -> addCreateTableStatements
    void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean) -> addCreateIndexStatements
    void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List) -> addDropTableStatements
    int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean) -> doCreateTable
    int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean) -> doStatements
    int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List) -> doCreateTestQueries
    java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean) -> addCreateTableStatements
com.mobsandgeeks.adapters.Sectionizer -> com.b.a.a:
    java.lang.String getSectionTitleForItem(java.lang.Object) -> a
com.mobsandgeeks.adapters.SimpleSectionAdapter -> com.b.a.b:
    java.lang.String TAG -> a
    android.content.Context mContext -> b
    android.widget.BaseAdapter mListAdapter -> c
    int mSectionHeaderLayoutId -> d
    int mSectionTitleTextViewId -> e
    com.mobsandgeeks.adapters.Sectionizer mSectionizer -> f
    java.util.LinkedHashMap mSections -> g
    boolean isTextView(android.content.Context,int,int) -> a
    int getCount() -> getCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    boolean isEnabled(int) -> isEnabled
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    void notifyDataSetChanged() -> notifyDataSetChanged
    int getIndexForPosition(int) -> a
    void findSections() -> a
    int getSectionCount() -> b
    java.lang.String sectionTitleForPosition(int) -> b
com.mobsandgeeks.adapters.SimpleSectionAdapter$SectionHolder -> com.b.a.c:
    android.widget.TextView titleTextView -> a
com.nostra13.universalimageloader.cache.disc.BaseDiscCache -> com.nostra13.universalimageloader.a.a.a:
    java.io.File cacheDir -> a
    com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator fileNameGenerator -> b
    java.io.File get(java.lang.String) -> a
com.nostra13.universalimageloader.cache.disc.DiscCacheAware -> com.nostra13.universalimageloader.a.a.b:
    void put(java.lang.String,java.io.File) -> a
    java.io.File get(java.lang.String) -> a
com.nostra13.universalimageloader.cache.disc.LimitedDiscCache -> com.nostra13.universalimageloader.a.a.c:
    java.util.concurrent.atomic.AtomicInteger cacheSize -> b
    int sizeLimit -> c
    java.util.Map lastUsageDates -> d
    void calculateCacheSizeAndFillUsageMap() -> a
    void put(java.lang.String,java.io.File) -> a
    java.io.File get(java.lang.String) -> a
    int removeNext() -> b
    int getSize(java.io.File) -> a
    java.util.Map access$000(com.nostra13.universalimageloader.cache.disc.LimitedDiscCache) -> a
    java.util.concurrent.atomic.AtomicInteger access$100(com.nostra13.universalimageloader.cache.disc.LimitedDiscCache) -> b
com.nostra13.universalimageloader.cache.disc.LimitedDiscCache$1 -> com.nostra13.universalimageloader.a.a.d:
    com.nostra13.universalimageloader.cache.disc.LimitedDiscCache this$0 -> a
    void run() -> run
com.nostra13.universalimageloader.cache.disc.impl.FileCountLimitedDiscCache -> com.nostra13.universalimageloader.a.a.a.a:
    int getSize(java.io.File) -> a
com.nostra13.universalimageloader.cache.disc.impl.TotalSizeLimitedDiscCache -> com.nostra13.universalimageloader.a.a.a.b:
    int getSize(java.io.File) -> a
com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache -> com.nostra13.universalimageloader.a.a.a.c:
    void put(java.lang.String,java.io.File) -> a
com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator -> com.nostra13.universalimageloader.a.a.b.a:
    java.lang.String generate(java.lang.String) -> a
com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator -> com.nostra13.universalimageloader.a.a.b.b:
    java.lang.String generate(java.lang.String) -> a
com.nostra13.universalimageloader.cache.memory.BaseMemoryCache -> com.nostra13.universalimageloader.a.b.a:
    java.util.Map softMap -> a
    java.lang.Object get(java.lang.Object) -> a
    boolean put(java.lang.Object,java.lang.Object) -> a
    void remove(java.lang.Object) -> b
    java.util.Collection keys() -> a
    java.lang.ref.Reference createReference(java.lang.Object) -> c
com.nostra13.universalimageloader.cache.memory.LimitedMemoryCache -> com.nostra13.universalimageloader.a.b.b:
    int sizeLimit -> a
    java.util.concurrent.atomic.AtomicInteger cacheSize -> b
    java.util.List hardCache -> c
    boolean put(java.lang.Object,java.lang.Object) -> a
    void remove(java.lang.Object) -> b
    int getSizeLimit() -> b
    int getSize(java.lang.Object) -> d
    java.lang.Object removeNext() -> c
com.nostra13.universalimageloader.cache.memory.MemoryCacheAware -> com.nostra13.universalimageloader.a.b.c:
    boolean put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    void remove(java.lang.Object) -> b
    java.util.Collection keys() -> a
com.nostra13.universalimageloader.cache.memory.impl.FuzzyKeyMemoryCache -> com.nostra13.universalimageloader.a.b.a.a:
    com.nostra13.universalimageloader.cache.memory.MemoryCacheAware cache -> a
    java.util.Comparator keyComparator -> b
    boolean put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    void remove(java.lang.Object) -> b
    java.util.Collection keys() -> a
com.nostra13.universalimageloader.cache.memory.impl.LRULimitedMemoryCache -> com.nostra13.universalimageloader.a.b.a.b:
    java.util.Map lruCache -> a
    boolean put(java.lang.String,android.graphics.Bitmap) -> a
    android.graphics.Bitmap get(java.lang.String) -> a
    void remove(java.lang.String) -> b
    int getSize(android.graphics.Bitmap) -> a
    android.graphics.Bitmap removeNext() -> d
    java.lang.ref.Reference createReference(android.graphics.Bitmap) -> b
    java.lang.Object removeNext() -> c
    int getSize(java.lang.Object) -> d
    void remove(java.lang.Object) -> b
    boolean put(java.lang.Object,java.lang.Object) -> a
    java.lang.ref.Reference createReference(java.lang.Object) -> c
    java.lang.Object get(java.lang.Object) -> a
com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache -> com.nostra13.universalimageloader.a.b.a.c:
    java.util.LinkedHashMap map -> a
    int maxSize -> b
    int size -> c
    android.graphics.Bitmap get(java.lang.String) -> a
    boolean put(java.lang.String,android.graphics.Bitmap) -> a
    void trimToSize(int) -> a
    void remove(java.lang.String) -> b
    java.util.Collection keys() -> a
    int sizeOf(java.lang.String,android.graphics.Bitmap) -> b
    java.lang.String toString() -> toString
    void remove(java.lang.Object) -> b
    java.lang.Object get(java.lang.Object) -> a
    boolean put(java.lang.Object,java.lang.Object) -> a
com.nostra13.universalimageloader.core.DefaultConfigurationFactory -> com.nostra13.universalimageloader.core.a:
    java.util.concurrent.Executor createExecutor(int,int,com.nostra13.universalimageloader.core.assist.QueueProcessingType) -> a
    com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator createFileNameGenerator() -> a
    com.nostra13.universalimageloader.cache.disc.DiscCacheAware createDiscCache(android.content.Context,com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator,int,int) -> a
    com.nostra13.universalimageloader.cache.disc.DiscCacheAware createReserveDiscCache(android.content.Context) -> a
    com.nostra13.universalimageloader.cache.memory.MemoryCacheAware createMemoryCache(int) -> a
    com.nostra13.universalimageloader.core.download.ImageDownloader createImageDownloader(android.content.Context) -> b
    com.nostra13.universalimageloader.core.decode.ImageDecoder createImageDecoder(boolean) -> a
    com.nostra13.universalimageloader.core.display.BitmapDisplayer createBitmapDisplayer() -> b
    java.util.concurrent.ThreadFactory createThreadFactory(int) -> b
com.nostra13.universalimageloader.core.DefaultConfigurationFactory$DefaultThreadFactory -> com.nostra13.universalimageloader.core.b:
    java.util.concurrent.atomic.AtomicInteger poolNumber -> a
    java.lang.ThreadGroup group -> b
    java.util.concurrent.atomic.AtomicInteger threadNumber -> c
    java.lang.String namePrefix -> d
    int threadPriority -> e
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.nostra13.universalimageloader.core.DisplayBitmapTask -> com.nostra13.universalimageloader.core.c:
    android.graphics.Bitmap bitmap -> a
    java.lang.String imageUri -> b
    android.widget.ImageView imageView -> c
    java.lang.String memoryCacheKey -> d
    com.nostra13.universalimageloader.core.display.BitmapDisplayer displayer -> e
    com.nostra13.universalimageloader.core.assist.ImageLoadingListener listener -> f
    com.nostra13.universalimageloader.core.ImageLoaderEngine engine -> g
    boolean loggingEnabled -> h
    void run() -> run
    boolean isViewWasReused() -> a
    void setLoggingEnabled(boolean) -> a
com.nostra13.universalimageloader.core.DisplayImageOptions -> com.nostra13.universalimageloader.core.d:
    int stubImage -> a
    int imageForEmptyUri -> b
    int imageOnFail -> c
    boolean resetViewBeforeLoading -> d
    boolean cacheInMemory -> e
    boolean cacheOnDisc -> f
    com.nostra13.universalimageloader.core.assist.ImageScaleType imageScaleType -> g
    android.graphics.BitmapFactory$Options decodingOptions -> h
    int delayBeforeLoading -> i
    java.lang.Object extraForDownloader -> j
    com.nostra13.universalimageloader.core.process.BitmapProcessor preProcessor -> k
    com.nostra13.universalimageloader.core.process.BitmapProcessor postProcessor -> l
    com.nostra13.universalimageloader.core.display.BitmapDisplayer displayer -> m
    android.os.Handler handler -> n
    boolean shouldShowStubImage() -> a
    boolean shouldShowImageForEmptyUri() -> b
    boolean shouldShowImageOnFail() -> c
    boolean shouldPreProcess() -> d
    boolean shouldPostProcess() -> e
    boolean shouldDelayBeforeLoading() -> f
    int getStubImage() -> g
    int getImageForEmptyUri() -> h
    int getImageOnFail() -> i
    boolean isResetViewBeforeLoading() -> j
    boolean isCacheInMemory() -> k
    boolean isCacheOnDisc() -> l
    com.nostra13.universalimageloader.core.assist.ImageScaleType getImageScaleType() -> m
    android.graphics.BitmapFactory$Options getDecodingOptions() -> n
    int getDelayBeforeLoading() -> o
    java.lang.Object getExtraForDownloader() -> p
    com.nostra13.universalimageloader.core.process.BitmapProcessor getPreProcessor() -> q
    com.nostra13.universalimageloader.core.process.BitmapProcessor getPostProcessor() -> r
    com.nostra13.universalimageloader.core.display.BitmapDisplayer getDisplayer() -> s
    android.os.Handler getHandler() -> t
    com.nostra13.universalimageloader.core.DisplayImageOptions createSimple() -> u
    int access$1400(com.nostra13.universalimageloader.core.DisplayImageOptions) -> a
    int access$1500(com.nostra13.universalimageloader.core.DisplayImageOptions) -> b
    int access$1600(com.nostra13.universalimageloader.core.DisplayImageOptions) -> c
    boolean access$1700(com.nostra13.universalimageloader.core.DisplayImageOptions) -> d
    boolean access$1800(com.nostra13.universalimageloader.core.DisplayImageOptions) -> e
    boolean access$1900(com.nostra13.universalimageloader.core.DisplayImageOptions) -> f
    com.nostra13.universalimageloader.core.assist.ImageScaleType access$2000(com.nostra13.universalimageloader.core.DisplayImageOptions) -> g
    android.graphics.BitmapFactory$Options access$2100(com.nostra13.universalimageloader.core.DisplayImageOptions) -> h
    int access$2200(com.nostra13.universalimageloader.core.DisplayImageOptions) -> i
    java.lang.Object access$2300(com.nostra13.universalimageloader.core.DisplayImageOptions) -> j
    com.nostra13.universalimageloader.core.process.BitmapProcessor access$2400(com.nostra13.universalimageloader.core.DisplayImageOptions) -> k
    com.nostra13.universalimageloader.core.process.BitmapProcessor access$2500(com.nostra13.universalimageloader.core.DisplayImageOptions) -> l
    com.nostra13.universalimageloader.core.display.BitmapDisplayer access$2600(com.nostra13.universalimageloader.core.DisplayImageOptions) -> m
    android.os.Handler access$2700(com.nostra13.universalimageloader.core.DisplayImageOptions) -> n
com.nostra13.universalimageloader.core.DisplayImageOptions$1 -> com.nostra13.universalimageloader.core.e:
com.nostra13.universalimageloader.core.DisplayImageOptions$Builder -> com.nostra13.universalimageloader.core.f:
    int stubImage -> a
    int imageForEmptyUri -> b
    int imageOnFail -> c
    boolean resetViewBeforeLoading -> d
    boolean cacheInMemory -> e
    boolean cacheOnDisc -> f
    com.nostra13.universalimageloader.core.assist.ImageScaleType imageScaleType -> g
    android.graphics.BitmapFactory$Options decodingOptions -> h
    int delayBeforeLoading -> i
    java.lang.Object extraForDownloader -> j
    com.nostra13.universalimageloader.core.process.BitmapProcessor preProcessor -> k
    com.nostra13.universalimageloader.core.process.BitmapProcessor postProcessor -> l
    com.nostra13.universalimageloader.core.display.BitmapDisplayer displayer -> m
    android.os.Handler handler -> n
    com.nostra13.universalimageloader.core.DisplayImageOptions$Builder cacheInMemory() -> a
    com.nostra13.universalimageloader.core.DisplayImageOptions$Builder cacheOnDisc() -> b
    com.nostra13.universalimageloader.core.DisplayImageOptions$Builder imageScaleType(com.nostra13.universalimageloader.core.assist.ImageScaleType) -> a
    com.nostra13.universalimageloader.core.DisplayImageOptions$Builder cloneFrom(com.nostra13.universalimageloader.core.DisplayImageOptions) -> a
    com.nostra13.universalimageloader.core.DisplayImageOptions build() -> c
    int access$000(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> a
    int access$100(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> b
    int access$200(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> c
    boolean access$300(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> d
    boolean access$400(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> e
    boolean access$500(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> f
    com.nostra13.universalimageloader.core.assist.ImageScaleType access$600(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> g
    android.graphics.BitmapFactory$Options access$700(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> h
    int access$800(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> i
    java.lang.Object access$900(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> j
    com.nostra13.universalimageloader.core.process.BitmapProcessor access$1000(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> k
    com.nostra13.universalimageloader.core.process.BitmapProcessor access$1100(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> l
    com.nostra13.universalimageloader.core.display.BitmapDisplayer access$1200(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> m
    android.os.Handler access$1300(com.nostra13.universalimageloader.core.DisplayImageOptions$Builder) -> n
com.nostra13.universalimageloader.core.ImageLoader -> com.nostra13.universalimageloader.core.g:
    java.lang.String TAG -> a
    com.nostra13.universalimageloader.core.ImageLoaderConfiguration configuration -> b
    com.nostra13.universalimageloader.core.ImageLoaderEngine engine -> c
    com.nostra13.universalimageloader.core.assist.ImageLoadingListener emptyListener -> d
    com.nostra13.universalimageloader.core.display.BitmapDisplayer fakeBitmapDisplayer -> e
    com.nostra13.universalimageloader.core.ImageLoader instance -> f
    com.nostra13.universalimageloader.core.ImageLoader getInstance() -> a
    void init(com.nostra13.universalimageloader.core.ImageLoaderConfiguration) -> a
    void displayImage(java.lang.String,android.widget.ImageView) -> a
    void displayImage(java.lang.String,android.widget.ImageView,com.nostra13.universalimageloader.core.DisplayImageOptions,com.nostra13.universalimageloader.core.assist.ImageLoadingListener) -> a
    void checkConfiguration() -> b
com.nostra13.universalimageloader.core.ImageLoaderConfiguration -> com.nostra13.universalimageloader.core.ImageLoaderConfiguration:
    android.content.Context context -> a
    int maxImageWidthForMemoryCache -> b
    int maxImageHeightForMemoryCache -> c
    int maxImageWidthForDiscCache -> d
    int maxImageHeightForDiscCache -> e
    android.graphics.Bitmap$CompressFormat imageCompressFormatForDiscCache -> f
    int imageQualityForDiscCache -> g
    java.util.concurrent.Executor taskExecutor -> h
    java.util.concurrent.Executor taskExecutorForCachedImages -> i
    boolean customExecutor -> j
    boolean customExecutorForCachedImages -> k
    int threadPoolSize -> l
    int threadPriority -> m
    com.nostra13.universalimageloader.core.assist.QueueProcessingType tasksProcessingType -> n
    com.nostra13.universalimageloader.cache.memory.MemoryCacheAware memoryCache -> o
    com.nostra13.universalimageloader.cache.disc.DiscCacheAware discCache -> p
    com.nostra13.universalimageloader.core.download.ImageDownloader downloader -> q
    com.nostra13.universalimageloader.core.decode.ImageDecoder decoder -> r
    com.nostra13.universalimageloader.core.DisplayImageOptions defaultDisplayImageOptions -> s
    boolean loggingEnabled -> t
    com.nostra13.universalimageloader.cache.disc.DiscCacheAware reserveDiscCache -> u
    com.nostra13.universalimageloader.core.download.ImageDownloader networkDeniedDownloader -> v
    com.nostra13.universalimageloader.core.download.ImageDownloader slowNetworkDownloader -> w
com.nostra13.universalimageloader.core.ImageLoaderConfiguration$1 -> com.nostra13.universalimageloader.core.h:
com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder -> com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder:
    com.nostra13.universalimageloader.core.assist.QueueProcessingType DEFAULT_TASK_PROCESSING_TYPE -> a
    android.content.Context context -> b
    int maxImageWidthForMemoryCache -> c
    int maxImageHeightForMemoryCache -> d
    int maxImageWidthForDiscCache -> e
    int maxImageHeightForDiscCache -> f
    android.graphics.Bitmap$CompressFormat imageCompressFormatForDiscCache -> g
    int imageQualityForDiscCache -> h
    java.util.concurrent.Executor taskExecutor -> i
    java.util.concurrent.Executor taskExecutorForCachedImages -> j
    boolean customExecutor -> k
    boolean customExecutorForCachedImages -> l
    int threadPoolSize -> m
    int threadPriority -> n
    boolean denyCacheImageMultipleSizesInMemory -> o
    com.nostra13.universalimageloader.core.assist.QueueProcessingType tasksProcessingType -> p
    int memoryCacheSize -> q
    int discCacheSize -> r
    int discCacheFileCount -> s
    com.nostra13.universalimageloader.cache.memory.MemoryCacheAware memoryCache -> t
    com.nostra13.universalimageloader.cache.disc.DiscCacheAware discCache -> u
    com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator discCacheFileNameGenerator -> v
    com.nostra13.universalimageloader.core.download.ImageDownloader downloader -> w
    com.nostra13.universalimageloader.core.decode.ImageDecoder decoder -> x
    com.nostra13.universalimageloader.core.DisplayImageOptions defaultDisplayImageOptions -> y
    boolean loggingEnabled -> z
    com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder memoryCache(com.nostra13.universalimageloader.cache.memory.MemoryCacheAware) -> a
    com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder discCache(com.nostra13.universalimageloader.cache.disc.DiscCacheAware) -> a
    com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder defaultDisplayImageOptions(com.nostra13.universalimageloader.core.DisplayImageOptions) -> a
    com.nostra13.universalimageloader.core.ImageLoaderConfiguration build() -> a
    void initEmptyFiledsWithDefaultValues() -> b
    android.content.Context access$000(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> a
    int access$100(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> b
    int access$200(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> c
    int access$300(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> d
    int access$400(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> e
    android.graphics.Bitmap$CompressFormat access$500(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> f
    int access$600(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> g
    java.util.concurrent.Executor access$700(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> h
    java.util.concurrent.Executor access$800(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> i
    int access$900(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> j
    int access$1000(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> k
    com.nostra13.universalimageloader.core.assist.QueueProcessingType access$1100(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> l
    com.nostra13.universalimageloader.cache.disc.DiscCacheAware access$1200(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> m
    com.nostra13.universalimageloader.cache.memory.MemoryCacheAware access$1300(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> n
    com.nostra13.universalimageloader.core.DisplayImageOptions access$1400(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> o
    boolean access$1500(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> p
    com.nostra13.universalimageloader.core.download.ImageDownloader access$1600(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> q
    com.nostra13.universalimageloader.core.decode.ImageDecoder access$1700(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> r
    boolean access$1800(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> s
    boolean access$1900(com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder) -> t
com.nostra13.universalimageloader.core.ImageLoaderEngine -> com.nostra13.universalimageloader.core.i:
    com.nostra13.universalimageloader.core.ImageLoaderConfiguration configuration -> a
    java.util.concurrent.Executor taskExecutor -> b
    java.util.concurrent.Executor taskExecutorForCachedImages -> c
    java.util.concurrent.ExecutorService taskDistributor -> d
    java.util.Map cacheKeysForImageViews -> e
    java.util.Map uriLocks -> f
    java.util.concurrent.atomic.AtomicBoolean paused -> g
    java.util.concurrent.atomic.AtomicBoolean networkDenied -> h
    java.util.concurrent.atomic.AtomicBoolean slowNetwork -> i
    void submit(com.nostra13.universalimageloader.core.LoadAndDisplayImageTask) -> a
    void submit(com.nostra13.universalimageloader.core.ProcessAndDisplayImageTask) -> a
    void initExecutorsIfNeed() -> d
    java.util.concurrent.Executor createTaskExecutor() -> e
    java.lang.String getLoadingUriForView(android.widget.ImageView) -> a
    void prepareDisplayTaskFor(android.widget.ImageView,java.lang.String) -> a
    void cancelDisplayTaskFor(android.widget.ImageView) -> b
    java.util.concurrent.locks.ReentrantLock getLockForUri(java.lang.String) -> a
    java.util.concurrent.atomic.AtomicBoolean getPause() -> a
    boolean isNetworkDenied() -> b
    boolean isSlowNetwork() -> c
    void access$000(com.nostra13.universalimageloader.core.ImageLoaderEngine) -> a
    java.util.concurrent.Executor access$100(com.nostra13.universalimageloader.core.ImageLoaderEngine) -> b
    java.util.concurrent.Executor access$200(com.nostra13.universalimageloader.core.ImageLoaderEngine) -> c
com.nostra13.universalimageloader.core.ImageLoaderEngine$1 -> com.nostra13.universalimageloader.core.j:
    com.nostra13.universalimageloader.core.LoadAndDisplayImageTask val$task -> a
    com.nostra13.universalimageloader.core.ImageLoaderEngine this$0 -> b
    void run() -> run
com.nostra13.universalimageloader.core.ImageLoadingInfo -> com.nostra13.universalimageloader.core.k:
    java.lang.String uri -> a
    java.lang.String memoryCacheKey -> b
    android.widget.ImageView imageView -> c
    com.nostra13.universalimageloader.core.assist.ImageSize targetSize -> d
    com.nostra13.universalimageloader.core.DisplayImageOptions options -> e
    com.nostra13.universalimageloader.core.assist.ImageLoadingListener listener -> f
    java.util.concurrent.locks.ReentrantLock loadFromUriLock -> g
com.nostra13.universalimageloader.core.LoadAndDisplayImageTask -> com.nostra13.universalimageloader.core.l:
    com.nostra13.universalimageloader.core.ImageLoaderEngine engine -> e
    com.nostra13.universalimageloader.core.ImageLoadingInfo imageLoadingInfo -> f
    android.os.Handler handler -> g
    com.nostra13.universalimageloader.core.ImageLoaderConfiguration configuration -> h
    com.nostra13.universalimageloader.core.download.ImageDownloader downloader -> i
    com.nostra13.universalimageloader.core.download.ImageDownloader networkDeniedDownloader -> j
    com.nostra13.universalimageloader.core.download.ImageDownloader slowNetworkDownloader -> k
    com.nostra13.universalimageloader.core.decode.ImageDecoder decoder -> l
    boolean loggingEnabled -> m
    java.lang.String uri -> a
    java.lang.String memoryCacheKey -> n
    android.widget.ImageView imageView -> b
    com.nostra13.universalimageloader.core.assist.ImageSize targetSize -> o
    com.nostra13.universalimageloader.core.DisplayImageOptions options -> c
    com.nostra13.universalimageloader.core.assist.ImageLoadingListener listener -> d
    void run() -> run
    boolean waitIfPaused() -> b
    boolean delayIfNeed() -> c
    boolean checkTaskIsNotActual() -> d
    boolean checkTaskIsInterrupted() -> e
    android.graphics.Bitmap tryLoadBitmap() -> f
    java.io.File getImageFileInDiscCache() -> g
    android.graphics.Bitmap decodeImage(java.lang.String) -> a
    java.lang.String tryCacheImageOnDisc(java.io.File) -> a
    boolean downloadSizedImage(java.io.File,int,int) -> a
    void downloadImage(java.io.File) -> b
    void fireImageLoadingFailedEvent(com.nostra13.universalimageloader.core.assist.FailReason$FailType,java.lang.Throwable) -> a
    com.nostra13.universalimageloader.core.download.ImageDownloader getDownloader() -> h
    java.lang.String getLoadingUri() -> a
    void log(java.lang.String) -> b
    void log(java.lang.String,java.lang.Object[]) -> a
com.nostra13.universalimageloader.core.LoadAndDisplayImageTask$1 -> com.nostra13.universalimageloader.core.m:
    com.nostra13.universalimageloader.core.LoadAndDisplayImageTask this$0 -> a
    void run() -> run
com.nostra13.universalimageloader.core.LoadAndDisplayImageTask$2 -> com.nostra13.universalimageloader.core.n:
    com.nostra13.universalimageloader.core.assist.FailReason$FailType val$failType -> a
    java.lang.Throwable val$failCause -> b
    com.nostra13.universalimageloader.core.LoadAndDisplayImageTask this$0 -> c
    void run() -> run
com.nostra13.universalimageloader.core.ProcessAndDisplayImageTask -> com.nostra13.universalimageloader.core.o:
    com.nostra13.universalimageloader.core.ImageLoaderEngine engine -> a
    android.graphics.Bitmap bitmap -> b
    com.nostra13.universalimageloader.core.ImageLoadingInfo imageLoadingInfo -> c
    android.os.Handler handler -> d
    void run() -> run
com.nostra13.universalimageloader.core.assist.FailReason -> com.nostra13.universalimageloader.core.a.a:
    com.nostra13.universalimageloader.core.assist.FailReason$FailType type -> a
    java.lang.Throwable cause -> b
com.nostra13.universalimageloader.core.assist.FailReason$FailType -> com.nostra13.universalimageloader.core.a.b:
    com.nostra13.universalimageloader.core.assist.FailReason$FailType IO_ERROR -> a
    com.nostra13.universalimageloader.core.assist.FailReason$FailType DECODING_ERROR -> b
    com.nostra13.universalimageloader.core.assist.FailReason$FailType NETWORK_DENIED -> c
    com.nostra13.universalimageloader.core.assist.FailReason$FailType OUT_OF_MEMORY -> d
    com.nostra13.universalimageloader.core.assist.FailReason$FailType UNKNOWN -> e
    com.nostra13.universalimageloader.core.assist.FailReason$FailType[] $VALUES -> f
    com.nostra13.universalimageloader.core.assist.FailReason$FailType[] values() -> values
    com.nostra13.universalimageloader.core.assist.FailReason$FailType valueOf(java.lang.String) -> valueOf
com.nostra13.universalimageloader.core.assist.FlushedInputStream -> com.nostra13.universalimageloader.core.a.c:
    long skip(long) -> skip
com.nostra13.universalimageloader.core.assist.ImageLoadingListener -> com.nostra13.universalimageloader.core.a.d:
    void onLoadingStarted(java.lang.String,android.view.View) -> a
    void onLoadingFailed(java.lang.String,android.view.View,com.nostra13.universalimageloader.core.assist.FailReason) -> a
    void onLoadingComplete(java.lang.String,android.view.View,android.graphics.Bitmap) -> a
    void onLoadingCancelled(java.lang.String,android.view.View) -> b
com.nostra13.universalimageloader.core.assist.ImageScaleType -> com.nostra13.universalimageloader.core.a.e:
    com.nostra13.universalimageloader.core.assist.ImageScaleType NONE -> a
    com.nostra13.universalimageloader.core.assist.ImageScaleType IN_SAMPLE_POWER_OF_2 -> b
    com.nostra13.universalimageloader.core.assist.ImageScaleType IN_SAMPLE_INT -> c
    com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY -> d
    com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY_STRETCHED -> e
    com.nostra13.universalimageloader.core.assist.ImageScaleType[] $VALUES -> f
    com.nostra13.universalimageloader.core.assist.ImageScaleType[] values() -> values
    com.nostra13.universalimageloader.core.assist.ImageScaleType valueOf(java.lang.String) -> valueOf
com.nostra13.universalimageloader.core.assist.ImageSize -> com.nostra13.universalimageloader.core.a.f:
    int width -> a
    int height -> b
    int getWidth() -> a
    int getHeight() -> b
    com.nostra13.universalimageloader.core.assist.ImageSize scaleDown(int) -> a
    com.nostra13.universalimageloader.core.assist.ImageSize scale(float) -> a
    java.lang.String toString() -> toString
com.nostra13.universalimageloader.core.assist.MemoryCacheUtil -> com.nostra13.universalimageloader.core.a.g:
    java.lang.String generateKey(java.lang.String,com.nostra13.universalimageloader.core.assist.ImageSize) -> a
    java.util.Comparator createFuzzyKeyComparator() -> a
com.nostra13.universalimageloader.core.assist.MemoryCacheUtil$1 -> com.nostra13.universalimageloader.core.a.h:
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.nostra13.universalimageloader.core.assist.QueueProcessingType -> com.nostra13.universalimageloader.core.a.i:
    com.nostra13.universalimageloader.core.assist.QueueProcessingType FIFO -> a
    com.nostra13.universalimageloader.core.assist.QueueProcessingType LIFO -> b
    com.nostra13.universalimageloader.core.assist.QueueProcessingType[] $VALUES -> c
    com.nostra13.universalimageloader.core.assist.QueueProcessingType[] values() -> values
    com.nostra13.universalimageloader.core.assist.QueueProcessingType valueOf(java.lang.String) -> valueOf
com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener -> com.nostra13.universalimageloader.core.a.j:
    void onLoadingStarted(java.lang.String,android.view.View) -> a
    void onLoadingFailed(java.lang.String,android.view.View,com.nostra13.universalimageloader.core.assist.FailReason) -> a
    void onLoadingComplete(java.lang.String,android.view.View,android.graphics.Bitmap) -> a
    void onLoadingCancelled(java.lang.String,android.view.View) -> b
com.nostra13.universalimageloader.core.assist.ViewScaleType -> com.nostra13.universalimageloader.core.a.k:
    com.nostra13.universalimageloader.core.assist.ViewScaleType FIT_INSIDE -> a
    com.nostra13.universalimageloader.core.assist.ViewScaleType CROP -> b
    com.nostra13.universalimageloader.core.assist.ViewScaleType[] $VALUES -> c
    com.nostra13.universalimageloader.core.assist.ViewScaleType[] values() -> values
    com.nostra13.universalimageloader.core.assist.ViewScaleType valueOf(java.lang.String) -> valueOf
    com.nostra13.universalimageloader.core.assist.ViewScaleType fromImageView(android.widget.ImageView) -> a
com.nostra13.universalimageloader.core.assist.ViewScaleType$1 -> com.nostra13.universalimageloader.core.a.l:
    int[] $SwitchMap$android$widget$ImageView$ScaleType -> a
com.nostra13.universalimageloader.core.assist.deque.BlockingDeque -> com.nostra13.universalimageloader.core.a.a.a:
com.nostra13.universalimageloader.core.assist.deque.Deque -> com.nostra13.universalimageloader.core.a.a.b:
com.nostra13.universalimageloader.core.assist.deque.LIFOLinkedBlockingDeque -> com.nostra13.universalimageloader.core.a.a.c:
    boolean offer(java.lang.Object) -> offer
    java.lang.Object remove() -> remove
com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque -> com.nostra13.universalimageloader.core.a.a.d:
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node first -> a
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node last -> b
    int count -> d
    int capacity -> e
    java.util.concurrent.locks.ReentrantLock lock -> c
    java.util.concurrent.locks.Condition notEmpty -> f
    java.util.concurrent.locks.Condition notFull -> g
    boolean linkFirst(com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node) -> b
    boolean linkLast(com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node) -> c
    java.lang.Object unlinkFirst() -> f
    java.lang.Object unlinkLast() -> g
    void unlink(com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node) -> a
    void addLast(java.lang.Object) -> a
    boolean offerFirst(java.lang.Object) -> b
    boolean offerLast(java.lang.Object) -> c
    void putLast(java.lang.Object) -> d
    boolean offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit) -> a
    java.lang.Object removeFirst() -> a
    java.lang.Object pollFirst() -> b
    java.lang.Object takeFirst() -> c
    java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit) -> a
    java.lang.Object getFirst() -> d
    java.lang.Object peekFirst() -> e
    boolean removeFirstOccurrence(java.lang.Object) -> e
    boolean add(java.lang.Object) -> add
    boolean offer(java.lang.Object) -> offer
    void put(java.lang.Object) -> put
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    java.lang.Object remove() -> remove
    java.lang.Object poll() -> poll
    java.lang.Object take() -> take
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    java.lang.Object element() -> element
    java.lang.Object peek() -> peek
    int remainingCapacity() -> remainingCapacity
    int drainTo(java.util.Collection) -> drainTo
    int drainTo(java.util.Collection,int) -> drainTo
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.String toString() -> toString
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$1 -> com.nostra13.universalimageloader.core.a.a.e:
com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$AbstractItr -> com.nostra13.universalimageloader.core.a.a.f:
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node next -> a
    java.lang.Object nextItem -> b
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node lastRet -> d
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque this$0 -> c
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node firstNode() -> a
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node nextNode(com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node) -> a
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node succ(com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node) -> b
    void advance() -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Itr -> com.nostra13.universalimageloader.core.a.a.g:
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque this$0 -> d
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node firstNode() -> a
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node nextNode(com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node) -> a
com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node -> com.nostra13.universalimageloader.core.a.a.h:
    java.lang.Object item -> a
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node prev -> b
    com.nostra13.universalimageloader.core.assist.deque.LinkedBlockingDeque$Node next -> c
com.nostra13.universalimageloader.core.decode.BaseImageDecoder -> com.nostra13.universalimageloader.core.b.a:
    boolean loggingEnabled -> a
    android.graphics.Bitmap decode(com.nostra13.universalimageloader.core.decode.ImageDecodingInfo) -> a
    java.io.InputStream getImageStream(com.nostra13.universalimageloader.core.decode.ImageDecodingInfo) -> b
    com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo defineImageSizeAndRotation(java.io.InputStream,java.lang.String) -> a
    com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo defineExifOrientation(java.lang.String,java.lang.String) -> a
    android.graphics.BitmapFactory$Options prepareDecodingOptions(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.decode.ImageDecodingInfo) -> a
    android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.BitmapFactory$Options) -> a
    android.graphics.Bitmap considerExactScaleAndOrientaiton(android.graphics.Bitmap,com.nostra13.universalimageloader.core.decode.ImageDecodingInfo,int,boolean) -> a
com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo -> com.nostra13.universalimageloader.core.b.b:
    int rotation -> a
    boolean flipHorizontal -> b
com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo -> com.nostra13.universalimageloader.core.b.c:
    com.nostra13.universalimageloader.core.assist.ImageSize imageSize -> a
    com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo exif -> b
com.nostra13.universalimageloader.core.decode.ImageDecoder -> com.nostra13.universalimageloader.core.b.d:
    android.graphics.Bitmap decode(com.nostra13.universalimageloader.core.decode.ImageDecodingInfo) -> a
com.nostra13.universalimageloader.core.decode.ImageDecodingInfo -> com.nostra13.universalimageloader.core.b.e:
    java.lang.String imageKey -> a
    java.lang.String imageUri -> b
    com.nostra13.universalimageloader.core.assist.ImageSize targetSize -> c
    com.nostra13.universalimageloader.core.assist.ImageScaleType imageScaleType -> d
    com.nostra13.universalimageloader.core.assist.ViewScaleType viewScaleType -> e
    com.nostra13.universalimageloader.core.download.ImageDownloader downloader -> f
    java.lang.Object extraForDownloader -> g
    android.graphics.BitmapFactory$Options decodingOptions -> h
    void copyOptions(android.graphics.BitmapFactory$Options,android.graphics.BitmapFactory$Options) -> a
    void copyOptions10(android.graphics.BitmapFactory$Options,android.graphics.BitmapFactory$Options) -> b
    void copyOptions11(android.graphics.BitmapFactory$Options,android.graphics.BitmapFactory$Options) -> c
    java.lang.String getImageKey() -> a
    java.lang.String getImageUri() -> b
    com.nostra13.universalimageloader.core.assist.ImageSize getTargetSize() -> c
    com.nostra13.universalimageloader.core.assist.ImageScaleType getImageScaleType() -> d
    com.nostra13.universalimageloader.core.assist.ViewScaleType getViewScaleType() -> e
    com.nostra13.universalimageloader.core.download.ImageDownloader getDownloader() -> f
    java.lang.Object getExtraForDownloader() -> g
    android.graphics.BitmapFactory$Options getDecodingOptions() -> h
com.nostra13.universalimageloader.core.display.BitmapDisplayer -> com.nostra13.universalimageloader.core.c.a:
    android.graphics.Bitmap display(android.graphics.Bitmap,android.widget.ImageView) -> a
com.nostra13.universalimageloader.core.display.FakeBitmapDisplayer -> com.nostra13.universalimageloader.core.c.b:
    android.graphics.Bitmap display(android.graphics.Bitmap,android.widget.ImageView) -> a
com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer -> com.nostra13.universalimageloader.core.c.c:
    android.graphics.Bitmap display(android.graphics.Bitmap,android.widget.ImageView) -> a
com.nostra13.universalimageloader.core.download.BaseImageDownloader -> com.nostra13.universalimageloader.core.download.BaseImageDownloader:
    android.content.Context context -> a
    int connectTimeout -> b
    int readTimeout -> c
    java.io.InputStream getStream(java.lang.String,java.lang.Object) -> a
    java.io.InputStream getStreamFromNetwork(java.lang.String,java.lang.Object) -> b
    java.net.HttpURLConnection connectTo(java.lang.String) -> a
    java.io.InputStream getStreamFromFile(java.lang.String,java.lang.Object) -> c
    java.io.InputStream getStreamFromContent(java.lang.String,java.lang.Object) -> d
    java.io.InputStream getStreamFromAssets(java.lang.String,java.lang.Object) -> e
    java.io.InputStream getStreamFromDrawable(java.lang.String,java.lang.Object) -> f
    java.io.InputStream getStreamFromOtherSource(java.lang.String,java.lang.Object) -> g
com.nostra13.universalimageloader.core.download.BaseImageDownloader$1 -> com.nostra13.universalimageloader.core.download.a:
    int[] $SwitchMap$com$nostra13$universalimageloader$core$download$ImageDownloader$Scheme -> a
com.nostra13.universalimageloader.core.download.ImageDownloader -> com.nostra13.universalimageloader.core.download.b:
    java.io.InputStream getStream(java.lang.String,java.lang.Object) -> a
com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme -> com.nostra13.universalimageloader.core.download.c:
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme HTTP -> a
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme HTTPS -> b
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme FILE -> c
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme CONTENT -> d
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme ASSETS -> e
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme DRAWABLE -> f
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme UNKNOWN -> g
    java.lang.String scheme -> h
    java.lang.String uriPrefix -> i
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme[] $VALUES -> j
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme[] values() -> values
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme valueOf(java.lang.String) -> valueOf
    com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme ofUri(java.lang.String) -> a
    boolean belongsTo(java.lang.String) -> d
    java.lang.String wrap(java.lang.String) -> b
    java.lang.String crop(java.lang.String) -> c
com.nostra13.universalimageloader.core.download.NetworkDeniedImageDownloader -> com.nostra13.universalimageloader.core.download.d:
    com.nostra13.universalimageloader.core.download.ImageDownloader wrappedDownloader -> a
    java.io.InputStream getStream(java.lang.String,java.lang.Object) -> a
com.nostra13.universalimageloader.core.download.NetworkDeniedImageDownloader$1 -> com.nostra13.universalimageloader.core.download.e:
    int[] $SwitchMap$com$nostra13$universalimageloader$core$download$ImageDownloader$Scheme -> a
com.nostra13.universalimageloader.core.download.SlowNetworkImageDownloader -> com.nostra13.universalimageloader.core.download.f:
    com.nostra13.universalimageloader.core.download.ImageDownloader wrappedDownloader -> a
    java.io.InputStream getStream(java.lang.String,java.lang.Object) -> a
com.nostra13.universalimageloader.core.download.SlowNetworkImageDownloader$1 -> com.nostra13.universalimageloader.core.download.g:
    int[] $SwitchMap$com$nostra13$universalimageloader$core$download$ImageDownloader$Scheme -> a
com.nostra13.universalimageloader.core.process.BitmapProcessor -> com.nostra13.universalimageloader.core.d.a:
    android.graphics.Bitmap process(android.graphics.Bitmap) -> a
com.nostra13.universalimageloader.utils.ImageSizeUtils -> com.nostra13.universalimageloader.b.a:
    com.nostra13.universalimageloader.core.assist.ImageSize defineTargetSizeForView(android.widget.ImageView,int,int) -> a
    int getImageViewFieldValue(java.lang.Object,java.lang.String) -> a
    int computeImageSampleSize(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ViewScaleType,boolean) -> a
    float computeImageScale(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ViewScaleType,boolean) -> b
com.nostra13.universalimageloader.utils.ImageSizeUtils$1 -> com.nostra13.universalimageloader.b.b:
    int[] $SwitchMap$com$nostra13$universalimageloader$core$assist$ViewScaleType -> a
com.nostra13.universalimageloader.utils.IoUtils -> com.nostra13.universalimageloader.b.c:
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    void closeSilently(java.io.Closeable) -> a
com.nostra13.universalimageloader.utils.L -> com.nostra13.universalimageloader.b.d:
    void d(java.lang.String,java.lang.Object[]) -> a
    void i(java.lang.String,java.lang.Object[]) -> b
    void w(java.lang.String,java.lang.Object[]) -> c
    void e(java.lang.Throwable) -> a
    void e(java.lang.String,java.lang.Object[]) -> d
    void log(int,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> a
com.nostra13.universalimageloader.utils.StorageUtils -> com.nostra13.universalimageloader.b.e:
    java.io.File getCacheDirectory(android.content.Context) -> a
    java.io.File getIndividualCacheDirectory(android.content.Context) -> b
    java.io.File getExternalCacheDir(android.content.Context) -> c
com.warmwit.bierapp.BierAppApplication -> com.warmwit.bierapp.BierAppApplication:
    com.warmwit.bierapp.data.RemoteClient remoteClient -> c
    java.io.File generalCache -> a
    java.io.File imageCache -> b
    void initCaches() -> d
    com.warmwit.bierapp.data.RemoteClient getRemoteClient() -> a
    java.lang.String getAuthorizeUrl() -> b
    java.lang.String getAccessTokenFromCode() -> c
    void onCreate() -> onCreate
com.warmwit.bierapp.R -> com.warmwit.bierapp.a:
com.warmwit.bierapp.R$styleable -> com.warmwit.bierapp.b:
    int[] FlowLayout -> FlowLayout
    int FlowLayout_horizontalSpacing -> FlowLayout_horizontalSpacing
    int FlowLayout_verticalSpacing -> FlowLayout_verticalSpacing
    int[] FlowLayout_LayoutParams -> FlowLayout_LayoutParams
    int FlowLayout_LayoutParams_layout_breakLine -> FlowLayout_LayoutParams_layout_breakLine
    int FlowLayout_LayoutParams_layout_horizontalSpacing -> FlowLayout_LayoutParams_layout_horizontalSpacing
com.warmwit.bierapp.actions.Action -> com.warmwit.bierapp.a.a:
com.warmwit.bierapp.actions.ExchangeTokenAction -> com.warmwit.bierapp.a.b:
    org.apache.http.client.HttpClient httpClient -> a
    java.lang.String code -> b
    com.warmwit.bierapp.utils.TokenInfo tokenInfo -> c
    int exchange() -> a
    com.warmwit.bierapp.utils.TokenInfo getTokenInfo() -> b
com.warmwit.bierapp.actions.RefreshTokenAction -> com.warmwit.bierapp.a.c:
    org.apache.http.client.HttpClient httpClient -> a
    com.warmwit.bierapp.utils.TokenInfo oldTokenInfo -> b
    com.warmwit.bierapp.utils.TokenInfo tokenInfo -> c
    int refresh() -> a
    com.warmwit.bierapp.utils.TokenInfo getTokenInfo() -> b
com.warmwit.bierapp.actions.SyncAction -> com.warmwit.bierapp.a.d:
    com.warmwit.bierapp.data.ApiConnector apiConnector -> a
    int basicSync() -> a
com.warmwit.bierapp.activities.AuthorizeActivity -> com.warmwit.bierapp.activities.AuthorizeActivity:
    android.webkit.WebView webView -> a
    android.app.ProgressDialog dialog -> b
    void onCreate(android.os.Bundle) -> onCreate
    void showMessage(java.lang.String,java.lang.String) -> a
    void onPause() -> onPause
    void onResume() -> onResume
    void access$0(com.warmwit.bierapp.activities.AuthorizeActivity,java.lang.String,java.lang.String) -> a
    android.app.ProgressDialog access$1(com.warmwit.bierapp.activities.AuthorizeActivity) -> a
com.warmwit.bierapp.activities.AuthorizeActivity$1 -> com.warmwit.bierapp.activities.a:
    com.warmwit.bierapp.activities.AuthorizeActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.warmwit.bierapp.activities.AuthorizeActivity$2 -> com.warmwit.bierapp.activities.b:
    com.warmwit.bierapp.activities.AuthorizeActivity this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
com.warmwit.bierapp.activities.AuthorizeActivity$ExchangeTokenTask -> com.warmwit.bierapp.activities.c:
    com.warmwit.bierapp.actions.ExchangeTokenAction exchangeTokenAction -> b
    com.warmwit.bierapp.activities.AuthorizeActivity this$0 -> a
    java.lang.Integer doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.warmwit.bierapp.activities.GuestsActivity -> com.warmwit.bierapp.activities.GuestsActivity:
    android.widget.ListView guestListView -> a
    com.warmwit.bierapp.data.adapters.GuestListAdapter guestListAdapter -> b
    void onCreate(android.os.Bundle) -> onCreate
    void bindData(android.os.Bundle) -> a
com.warmwit.bierapp.activities.GuestsActivity$1 -> com.warmwit.bierapp.activities.d:
    com.warmwit.bierapp.activities.GuestsActivity this$0 -> a
    java.lang.String getSectionTitleForItem(com.warmwit.bierapp.data.models.User) -> a
    java.lang.String getSectionTitleForItem(java.lang.Object) -> a
com.warmwit.bierapp.activities.HomeActivity -> com.warmwit.bierapp.activities.HomeActivity:
    com.warmwit.bierapp.data.ApiConnector apiConnector -> a
    com.warmwit.bierapp.data.adapters.UserListAdapter userListAdapter -> b
    android.widget.ListView userListView -> c
    android.view.MenuItem purchaseMenu -> d
    java.util.List inhabitants -> e
    java.util.List guests -> f
    java.util.List products -> g
    android.content.BroadcastReceiver broadcastReceiver -> h
    com.warmwit.bierapp.data.models.Transaction transaction -> i
    int amount -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onHandleIntent(android.content.Intent) -> a
    void initList() -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void cancelTransaction(com.warmwit.bierapp.data.models.User) -> a
    void applyToVisibleRows(com.google.common.base.Function) -> a
    void refreshMenu() -> a
    void refreshList() -> c
    void onProductClickListener(com.warmwit.bierapp.views.UserRowView,com.warmwit.bierapp.views.ProductView,com.warmwit.bierapp.data.models.User,boolean,com.warmwit.bierapp.data.models.Product,int) -> a
    void showTransactionSummary(com.warmwit.bierapp.data.models.Transaction,boolean) -> a
    com.warmwit.bierapp.data.models.Transaction access$0(com.warmwit.bierapp.activities.HomeActivity) -> a
    void access$1(com.warmwit.bierapp.activities.HomeActivity,com.warmwit.bierapp.data.models.Transaction) -> a
    void access$2(com.warmwit.bierapp.activities.HomeActivity,int) -> a
    com.warmwit.bierapp.data.ApiConnector access$3(com.warmwit.bierapp.activities.HomeActivity) -> b
    void access$4(com.warmwit.bierapp.activities.HomeActivity) -> c
    void access$5(com.warmwit.bierapp.activities.HomeActivity,com.warmwit.bierapp.data.models.Transaction,boolean) -> a
    void access$6(com.warmwit.bierapp.activities.HomeActivity,com.warmwit.bierapp.data.models.User) -> a
com.warmwit.bierapp.activities.HomeActivity$1 -> com.warmwit.bierapp.activities.e:
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.warmwit.bierapp.activities.HomeActivity$2 -> com.warmwit.bierapp.activities.f:
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    java.lang.String getSectionTitleForItem(com.warmwit.bierapp.data.models.User) -> a
    java.lang.String getSectionTitleForItem(java.lang.Object) -> a
com.warmwit.bierapp.activities.HomeActivity$3 -> com.warmwit.bierapp.activities.g:
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    android.widget.ArrayAdapter val$adapter -> b
    java.lang.String[] val$names -> c
    boolean[] val$states -> d
    java.util.List val$users -> e
    void onClick(android.content.DialogInterface,int) -> onClick
    com.warmwit.bierapp.activities.HomeActivity access$0(com.warmwit.bierapp.activities.HomeActivity$3) -> a
com.warmwit.bierapp.activities.HomeActivity$3$1 -> com.warmwit.bierapp.activities.h:
    com.warmwit.bierapp.activities.HomeActivity$3 this$1 -> a
    boolean[] val$states -> b
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
com.warmwit.bierapp.activities.HomeActivity$3$2 -> com.warmwit.bierapp.activities.i:
    com.warmwit.bierapp.activities.HomeActivity$3 this$1 -> a
    boolean[] val$states -> b
    java.util.List val$users -> c
    com.warmwit.bierapp.data.models.User val$guest -> d
    void onClick(android.content.DialogInterface,int) -> onClick
com.warmwit.bierapp.activities.HomeActivity$4 -> com.warmwit.bierapp.activities.j:
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    com.warmwit.bierapp.data.models.User val$user -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.warmwit.bierapp.activities.HomeActivity$5 -> com.warmwit.bierapp.activities.k:
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.warmwit.bierapp.activities.HomeActivity$6 -> com.warmwit.bierapp.activities.l:
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    java.lang.Boolean apply(com.warmwit.bierapp.views.UserRowView) -> a
    java.lang.Object apply(java.lang.Object) -> a
com.warmwit.bierapp.activities.HomeActivity$7 -> com.warmwit.bierapp.activities.m:
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    boolean val$byPayer -> b
    java.lang.String getSectionTitleForItem(com.warmwit.bierapp.data.models.TransactionItem) -> a
    java.lang.String getSectionTitleForItem(java.lang.Object) -> a
com.warmwit.bierapp.activities.HomeActivity$LoadDataTask -> com.warmwit.bierapp.activities.n:
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Integer doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.warmwit.bierapp.activities.HomeActivity$SaveTransactionTask -> com.warmwit.bierapp.activities.o:
    com.warmwit.bierapp.data.models.Transaction result -> b
    com.warmwit.bierapp.activities.HomeActivity this$0 -> a
    java.lang.Integer doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.warmwit.bierapp.activities.SettingsActivity -> com.warmwit.bierapp.activities.SettingsActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.warmwit.bierapp.activities.SettingsActivity$GeneralFragment -> com.warmwit.bierapp.activities.p:
    void onCreate(android.os.Bundle) -> onCreate
com.warmwit.bierapp.activities.SplashActivity -> com.warmwit.bierapp.activities.SplashActivity:
    com.warmwit.bierapp.data.ApiConnector apiConnector -> a
    void onCreate(android.os.Bundle) -> onCreate
    void start() -> a
    void showMessage(java.lang.String,java.lang.String) -> a
    com.warmwit.bierapp.data.ApiConnector access$0(com.warmwit.bierapp.activities.SplashActivity) -> a
    void access$1(com.warmwit.bierapp.activities.SplashActivity,java.lang.String,java.lang.String) -> a
    void access$2(com.warmwit.bierapp.activities.SplashActivity) -> b
com.warmwit.bierapp.activities.SplashActivity$1 -> com.warmwit.bierapp.activities.q:
    com.warmwit.bierapp.activities.SplashActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.warmwit.bierapp.activities.SplashActivity$LoadDataTask -> com.warmwit.bierapp.activities.r:
    com.warmwit.bierapp.activities.SplashActivity this$0 -> a
    java.lang.Integer doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    com.warmwit.bierapp.activities.SplashActivity access$3(com.warmwit.bierapp.activities.SplashActivity$LoadDataTask) -> a
com.warmwit.bierapp.activities.SplashActivity$LoadDataTask$1 -> com.warmwit.bierapp.activities.s:
    com.warmwit.bierapp.activities.SplashActivity$LoadDataTask this$1 -> a
    void run() -> run
com.warmwit.bierapp.activities.TransactionActivity -> com.warmwit.bierapp.activities.TransactionActivity:
    android.widget.ListView transactionListView -> a
    com.warmwit.bierapp.data.adapters.TransactionListAdapter transactionListAdapter -> b
    void onCreate(android.os.Bundle) -> onCreate
    void bindData(android.os.Bundle) -> a
    void showTransactionSummary(com.warmwit.bierapp.data.models.Transaction,boolean) -> a
    void access$0(com.warmwit.bierapp.activities.TransactionActivity,com.warmwit.bierapp.data.models.Transaction,boolean) -> a
com.warmwit.bierapp.activities.TransactionActivity$1 -> com.warmwit.bierapp.activities.t:
    com.warmwit.bierapp.activities.TransactionActivity this$0 -> a
    java.lang.String getSectionTitleForItem(com.warmwit.bierapp.data.models.Transaction) -> a
    java.lang.String getSectionTitleForItem(java.lang.Object) -> a
com.warmwit.bierapp.activities.TransactionActivity$2 -> com.warmwit.bierapp.activities.u:
    com.warmwit.bierapp.activities.TransactionActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.warmwit.bierapp.activities.TransactionActivity$3 -> com.warmwit.bierapp.activities.v:
    com.warmwit.bierapp.activities.TransactionActivity this$0 -> a
    boolean val$byPayer -> b
    java.lang.String getSectionTitleForItem(com.warmwit.bierapp.data.models.TransactionItem) -> a
    java.lang.String getSectionTitleForItem(java.lang.Object) -> a
com.warmwit.bierapp.callbacks.OnProductClickListener -> com.warmwit.bierapp.b.a:
    void onProductClickListener(com.warmwit.bierapp.views.UserRowView,com.warmwit.bierapp.views.ProductView,com.warmwit.bierapp.data.models.User,boolean,com.warmwit.bierapp.data.models.Product,int) -> a
com.warmwit.bierapp.data.ApiAccessToken -> com.warmwit.bierapp.c.a:
    java.lang.String access_token -> access_token
    java.lang.String scope -> scope
    int expires_in -> expires_in
    java.lang.String refresh_token -> refresh_token
com.warmwit.bierapp.data.ApiConnector -> com.warmwit.bierapp.c.b:
    com.warmwit.bierapp.data.RemoteClient remoteClient -> a
    com.warmwit.bierapp.database.DatabaseHelper databaseHelper -> b
    void loadUsers() -> a
    void loadUserInfo() -> b
    com.warmwit.bierapp.data.models.Transaction convertToTransaction(com.warmwit.bierapp.data.ApiTransaction) -> a
    void loadTransactions() -> c
    com.warmwit.bierapp.data.models.Transaction saveTransaction(com.warmwit.bierapp.data.models.Transaction) -> a
    void loadProducts() -> d
com.warmwit.bierapp.data.ApiPage -> com.warmwit.bierapp.c.c:
    int count -> count
    java.lang.String next -> next
    java.lang.String previous -> previous
com.warmwit.bierapp.data.ApiProduct -> com.warmwit.bierapp.c.d:
    int id -> id
    java.lang.String title -> title
    java.lang.String logo -> logo
    int cost -> cost
    java.util.Date date_changed -> date_changed
com.warmwit.bierapp.data.ApiProductPage -> com.warmwit.bierapp.c.e:
    com.warmwit.bierapp.data.ApiProduct[] results -> results
com.warmwit.bierapp.data.ApiRoot -> com.warmwit.bierapp.c.f:
    java.lang.String transactions -> transactions
    java.lang.String products -> products
    java.lang.String users -> users
    java.lang.String name -> name
com.warmwit.bierapp.data.ApiTransaction -> com.warmwit.bierapp.c.g:
    int id -> id
    java.lang.String description -> description
    com.warmwit.bierapp.data.ApiTransactionItem[] transaction_items -> transaction_items
    java.util.Date date_created -> date_created
com.warmwit.bierapp.data.ApiTransactionItem -> com.warmwit.bierapp.c.h:
    int id -> id
    int accounted_user -> accounted_user
    int executing_user -> executing_user
    int product -> product
    int count -> count
com.warmwit.bierapp.data.ApiTransactionPage -> com.warmwit.bierapp.c.i:
    com.warmwit.bierapp.data.ApiTransaction[] results -> results
com.warmwit.bierapp.data.ApiUser -> com.warmwit.bierapp.c.j:
    int id -> id
    java.lang.String first_name -> first_name
    java.lang.String last_name -> last_name
    java.lang.String avatar -> avatar
    int user_type -> user_type
    java.util.Date date_changed -> date_changed
    com.warmwit.bierapp.data.ApiUserInfo[] product_info -> product_info
com.warmwit.bierapp.data.ApiUserInfo -> com.warmwit.bierapp.c.k:
    int product -> product
    int count -> count
com.warmwit.bierapp.data.ApiUserPage -> com.warmwit.bierapp.c.l:
    com.warmwit.bierapp.data.ApiUser[] results -> results
com.warmwit.bierapp.data.RemoteClient -> com.warmwit.bierapp.c.m:
    java.lang.String baseUrl -> a
    com.warmwit.bierapp.utils.TokenInfo tokenInfo -> b
    org.apache.http.client.HttpClient client -> c
    android.content.Context context -> d
    com.warmwit.bierapp.utils.TokenInfo getTokenInfo() -> a
    void setTokenInfo(com.warmwit.bierapp.utils.TokenInfo) -> a
    java.lang.Object post(java.lang.Object,java.lang.String,java.lang.String) -> a
    java.lang.Object get(java.lang.String,java.lang.String) -> a
    org.apache.http.HttpResponse handleResponse(org.apache.http.HttpResponse) -> a
    org.apache.http.HttpResponse getRequest(java.lang.String) -> a
    org.apache.http.HttpResponse postRequest(java.lang.String,java.lang.String) -> b
com.warmwit.bierapp.data.adapters.GuestListAdapter -> com.warmwit.bierapp.c.a.a:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.warmwit.bierapp.data.adapters.TransactionItemListAdapter -> com.warmwit.bierapp.c.a.b:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.warmwit.bierapp.data.adapters.TransactionListAdapter -> com.warmwit.bierapp.c.a.c:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.warmwit.bierapp.data.adapters.UserListAdapter -> com.warmwit.bierapp.c.a.d:
    com.warmwit.bierapp.callbacks.OnProductClickListener callback -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.warmwit.bierapp.data.models.HostMapping -> com.warmwit.bierapp.c.b.a:
    int id -> id
    com.warmwit.bierapp.data.models.Hosting hosting -> hosting
    com.warmwit.bierapp.data.models.User host -> host
    int timesPaid -> timesPaid
    void setHosting(com.warmwit.bierapp.data.models.Hosting) -> a
    com.warmwit.bierapp.data.models.User getHost() -> a
    void setHost(com.warmwit.bierapp.data.models.User) -> a
    int getTimesPaid() -> b
    void setTimesPaid(int) -> a
com.warmwit.bierapp.data.models.Hosting -> com.warmwit.bierapp.c.b.b:
    int id -> id
    java.lang.String description -> description
    com.j256.ormlite.dao.ForeignCollection hosts -> hosts
    com.j256.ormlite.dao.ForeignCollection getHosts() -> a
    void setHosts(com.j256.ormlite.dao.ForeignCollection) -> a
    void setDescription(java.lang.String) -> a
com.warmwit.bierapp.data.models.Product -> com.warmwit.bierapp.c.b.c:
    int id -> id
    java.lang.String title -> title
    int cost -> cost
    java.lang.String logo -> logo
    java.util.Date dateChanged -> dateChanged
    int getId() -> a
    void setId(int) -> a
    java.lang.String getTitle() -> b
    void setTitle(java.lang.String) -> a
    java.lang.String getLogo() -> c
    void setLogo(java.lang.String) -> b
    void setCost(int) -> b
    java.lang.String toString() -> toString
    void setDateChanged(java.util.Date) -> a
com.warmwit.bierapp.data.models.Transaction -> com.warmwit.bierapp.c.b.d:
    int id -> id
    java.lang.String description -> description
    java.util.Date dateCreated -> dateCreated
    boolean dirty -> dirty
    boolean synced -> synced
    java.util.Date getDateCreated() -> a
    void setDateCreated(java.util.Date) -> a
    int getId() -> b
    void setId(int) -> a
    java.lang.String getDescription() -> c
    void setDescription(java.lang.String) -> a
    void setDirty(boolean) -> a
    boolean isSynced() -> d
    void setSynced(boolean) -> b
com.warmwit.bierapp.data.models.TransactionItem -> com.warmwit.bierapp.c.b.e:
    int id -> id
    com.warmwit.bierapp.data.models.User user -> user
    com.warmwit.bierapp.data.models.User payer -> payer
    com.warmwit.bierapp.data.models.Product product -> product
    int count -> count
    com.warmwit.bierapp.data.models.Transaction transaction -> transaction
    int getCount() -> a
    com.warmwit.bierapp.data.models.User getUser() -> b
    void setId(int) -> a
    com.warmwit.bierapp.data.models.User getPayer() -> c
    void setPayer(com.warmwit.bierapp.data.models.User) -> a
    com.warmwit.bierapp.data.models.Product getProduct() -> d
    void setProduct(com.warmwit.bierapp.data.models.Product) -> a
    void setUser(com.warmwit.bierapp.data.models.User) -> b
    void setCount(int) -> b
    void setTransaction(com.warmwit.bierapp.data.models.Transaction) -> a
com.warmwit.bierapp.data.models.User -> com.warmwit.bierapp.c.b.f:
    int id -> id
    java.lang.String firstName -> firstName
    java.lang.String lastName -> lastName
    java.lang.String avatarUrl -> avatarUrl
    int type -> type
    int score -> score
    com.warmwit.bierapp.data.models.Hosting hosting -> hosting
    boolean dirty -> dirty
    boolean synced -> synced
    java.util.Date dateChanged -> dateChanged
    java.util.Map productMap -> a
    java.lang.String getFullName() -> a
    java.lang.String toString() -> toString
    int getId() -> b
    void setId(int) -> a
    java.lang.String getAvatarUrl() -> c
    int getType() -> d
    java.lang.String getName() -> e
    void setFirstName(java.lang.String) -> a
    void setLastName(java.lang.String) -> b
    void setAvatarUrl(java.lang.String) -> c
    int getScore() -> f
    boolean equals(java.lang.Object) -> equals
    void setDirty(boolean) -> a
    void setSynced(boolean) -> b
    void setType(int) -> b
    void setProducts(java.util.Map) -> a
    java.util.Map getProducts() -> g
    com.warmwit.bierapp.data.models.Hosting getHosting() -> h
    void setHosting(com.warmwit.bierapp.data.models.Hosting) -> a
    void setDateChanged(java.util.Date) -> a
com.warmwit.bierapp.data.models.UserInfo -> com.warmwit.bierapp.c.b.g:
    int id -> id
    com.warmwit.bierapp.data.models.User user -> user
    com.warmwit.bierapp.data.models.Product product -> product
    int count -> count
    void setUser(com.warmwit.bierapp.data.models.User) -> a
    void setProduct(com.warmwit.bierapp.data.models.Product) -> a
    int getCount() -> a
    void setCount(int) -> a
com.warmwit.bierapp.database.DatabaseHelper -> com.warmwit.bierapp.database.DatabaseHelper:
    com.j256.ormlite.dao.Dao userDao -> a
    com.j256.ormlite.dao.Dao userInfoDao -> b
    com.j256.ormlite.dao.Dao productDao -> c
    com.j256.ormlite.dao.Dao transactionDao -> d
    com.j256.ormlite.dao.Dao transactionItemDao -> e
    com.j256.ormlite.dao.Dao hostingDao -> f
    com.j256.ormlite.dao.Dao hostMappingDao -> g
    void onCreate(android.database.sqlite.SQLiteDatabase,com.j256.ormlite.support.ConnectionSource) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,com.j256.ormlite.support.ConnectionSource,int,int) -> onUpgrade
    com.j256.ormlite.dao.Dao getUserDao() -> a
    com.j256.ormlite.dao.Dao getUserInfoDao() -> b
    com.j256.ormlite.dao.Dao getProductDao() -> c
    com.j256.ormlite.dao.Dao getTransactionDao() -> d
    com.j256.ormlite.dao.Dao getTransactionItemDao() -> e
    com.j256.ormlite.dao.Dao getHostingDao() -> f
    com.j256.ormlite.dao.Dao getHostMappingDao() -> g
com.warmwit.bierapp.database.HostQuery -> com.warmwit.bierapp.database.a:
    com.j256.ormlite.dao.Dao hostDao -> b
    com.j256.ormlite.dao.Dao hostMappingDao -> c
    com.j256.ormlite.dao.Dao userDao -> d
    void delete(com.warmwit.bierapp.data.models.User) -> a
    void create(com.warmwit.bierapp.data.models.User,java.util.List) -> a
com.warmwit.bierapp.database.ProductQuery -> com.warmwit.bierapp.database.b:
    com.j256.ormlite.dao.Dao productDao -> b
    boolean shouldSync(int,java.util.Date) -> a
    java.util.List all() -> a
    com.warmwit.bierapp.data.models.Product byId(int) -> a
com.warmwit.bierapp.database.QueryHelper -> com.warmwit.bierapp.database.c:
    com.warmwit.bierapp.database.DatabaseHelper databaseHelper -> a
    boolean throwAsRuntimeException -> b
    void handleException(java.lang.Exception) -> a
com.warmwit.bierapp.database.TransactionItemQuery -> com.warmwit.bierapp.database.d:
    com.j256.ormlite.dao.Dao transactionItemDao -> b
    java.util.List byTransaction(com.warmwit.bierapp.data.models.Transaction,java.lang.String) -> a
    java.util.List byTransaction(com.warmwit.bierapp.data.models.Transaction) -> a
    int deleteByTransactionAndUser(com.warmwit.bierapp.data.models.Transaction,com.warmwit.bierapp.data.models.User) -> a
com.warmwit.bierapp.database.TransactionQuery -> com.warmwit.bierapp.database.e:
    com.j256.ormlite.dao.Dao transactionDao -> b
    com.j256.ormlite.dao.Dao transactionItemDao -> c
    java.util.List bySynced(boolean) -> a
    com.warmwit.bierapp.data.models.Transaction create(java.lang.String) -> a
    int costByTransaction(com.warmwit.bierapp.data.models.Transaction) -> a
    int costByUserAndProduct(com.warmwit.bierapp.data.models.Transaction,com.warmwit.bierapp.data.models.User,com.warmwit.bierapp.data.models.Product) -> a
    void delete(com.warmwit.bierapp.data.models.Transaction) -> b
    com.warmwit.bierapp.data.models.Transaction resumeById(int) -> a
    com.warmwit.bierapp.data.models.Transaction resumeLatest() -> a
    void addTransactionItem(com.warmwit.bierapp.data.models.Transaction,com.warmwit.bierapp.data.models.Product,com.warmwit.bierapp.data.models.User,com.warmwit.bierapp.data.models.User,int) -> a
com.warmwit.bierapp.database.UserQuery -> com.warmwit.bierapp.database.f:
    com.j256.ormlite.dao.Dao userDao -> b
    com.j256.ormlite.dao.Dao userInfoDao -> c
    com.warmwit.bierapp.data.models.User byId(int) -> a
    java.util.List byType(int) -> b
    boolean shouldSync(int,java.util.Date) -> a
    java.util.List guests() -> a
    java.util.List inhabitants() -> b
    java.util.List activeGuests() -> c
    java.util.List inactiveGuests() -> d
    com.warmwit.bierapp.data.models.UserInfo userProductInfo(com.warmwit.bierapp.data.models.User,com.warmwit.bierapp.data.models.Product) -> a
com.warmwit.bierapp.exceptions.RetryException -> com.warmwit.bierapp.d.a:
com.warmwit.bierapp.exceptions.UnexpectedStatusCode -> com.warmwit.bierapp.d.b:
com.warmwit.bierapp.service.BatchIntentReceiver -> com.warmwit.bierapp.service.BatchIntentReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void onPendingIntent(android.content.Context,android.content.Intent) -> a
    void onInitialIntent(android.content.Context,android.content.Intent) -> b
    void scheduleService(android.content.Context,android.content.Intent,java.lang.Long) -> a
    void scheduleIntent(android.content.Context,android.app.PendingIntent,long) -> a
com.warmwit.bierapp.service.SyncService -> com.warmwit.bierapp.service.SyncService:
    android.os.PowerManager$WakeLock lock -> a
    android.os.PowerManager$WakeLock getLock(android.content.Context) -> a
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    void onSyncRequest() -> a
com.warmwit.bierapp.utils.FlowLayout -> com.warmwit.bierapp.utils.FlowLayout:
    int mHorizontalSpacing -> a
    int mVerticalSpacing -> b
    android.graphics.Paint mPaint -> c
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    com.warmwit.bierapp.utils.FlowLayout$LayoutParams generateDefaultLayoutParams() -> a
    com.warmwit.bierapp.utils.FlowLayout$LayoutParams generateLayoutParams(android.util.AttributeSet) -> a
    com.warmwit.bierapp.utils.FlowLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> a
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
com.warmwit.bierapp.utils.FlowLayout$LayoutParams -> com.warmwit.bierapp.utils.a:
    int x -> a
    int y -> b
    int horizontalSpacing -> c
    boolean breakLine -> d
com.warmwit.bierapp.utils.LogUtils -> com.warmwit.bierapp.utils.b:
    int logException(java.lang.String,java.lang.Exception,int) -> a
com.warmwit.bierapp.utils.ProductInfo -> com.warmwit.bierapp.utils.c:
    int count -> a
    int change -> b
    int getCount() -> a
    void setCount(int) -> a
    int getChange() -> b
    void setChange(int) -> b
com.warmwit.bierapp.utils.ProgressAsyncTask -> com.warmwit.bierapp.utils.ProgressAsyncTask:
    android.app.ProgressDialog dialog -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPreExecute() -> onPreExecute
    void setMessage(java.lang.String) -> a
com.warmwit.bierapp.utils.TokenInfo -> com.warmwit.bierapp.utils.d:
    java.lang.String accessToken -> a
    java.lang.String refreshToken -> b
    java.util.Calendar expires -> c
    boolean isValid() -> a
    void deleteInPreferences(android.content.Context) -> a
    void saveToPreferences(android.content.Context) -> b
    com.warmwit.bierapp.utils.TokenInfo createFromApi(com.warmwit.bierapp.data.ApiAccessToken) -> a
    com.warmwit.bierapp.utils.TokenInfo createFromPreferences(android.content.Context) -> c
    java.lang.String getAccessToken() -> b
    java.lang.String getRefreshToken() -> c
com.warmwit.bierapp.views.ProductView -> com.warmwit.bierapp.views.ProductView:
    void setProductMore() -> a
    void setProductLogo(java.lang.String) -> setProductLogo
    void setGuestProduct(boolean) -> setGuestProduct
    void setChange(int) -> setChange
    void setCount(int) -> setCount
com.warmwit.bierapp.views.ProductView$ViewHolder -> com.warmwit.bierapp.views.a:
    android.widget.TextView change -> a
    android.widget.TextView count -> b
    android.widget.ImageView logo -> c
    android.widget.RelativeLayout bar -> d
    void access$1(com.warmwit.bierapp.views.ProductView$ViewHolder,android.widget.TextView) -> a
    void access$2(com.warmwit.bierapp.views.ProductView$ViewHolder,android.widget.TextView) -> b
    void access$3(com.warmwit.bierapp.views.ProductView$ViewHolder,android.widget.ImageView) -> a
    void access$4(com.warmwit.bierapp.views.ProductView$ViewHolder,android.widget.RelativeLayout) -> a
    android.widget.ImageView access$5(com.warmwit.bierapp.views.ProductView$ViewHolder) -> a
    android.widget.TextView access$6(com.warmwit.bierapp.views.ProductView$ViewHolder) -> b
    android.widget.RelativeLayout access$7(com.warmwit.bierapp.views.ProductView$ViewHolder) -> c
    android.widget.TextView access$8(com.warmwit.bierapp.views.ProductView$ViewHolder) -> d
com.warmwit.bierapp.views.UserRowView -> com.warmwit.bierapp.views.UserRowView:
    com.warmwit.bierapp.data.models.User user -> a
    com.warmwit.bierapp.callbacks.OnProductClickListener callback -> b
    com.warmwit.bierapp.data.models.User getUser() -> getUser
    void setUser(com.warmwit.bierapp.data.models.User) -> setUser
    void setCallback(com.warmwit.bierapp.callbacks.OnProductClickListener) -> setCallback
    void refreshAll() -> a
    void refreshAvatar() -> b
    void refreshUser() -> c
    void refreshProducts() -> d
    void refreshProduct(com.warmwit.bierapp.views.ProductView,com.warmwit.bierapp.utils.ProductInfo) -> a
    void refreshProduct(com.warmwit.bierapp.views.ProductView,com.warmwit.bierapp.data.models.Product,com.warmwit.bierapp.utils.ProductInfo,boolean) -> a
    void access$0(com.warmwit.bierapp.views.UserRowView,com.warmwit.bierapp.views.ProductView,com.warmwit.bierapp.data.models.Product,com.warmwit.bierapp.utils.ProductInfo,boolean) -> a
    com.warmwit.bierapp.callbacks.OnProductClickListener access$1(com.warmwit.bierapp.views.UserRowView) -> a
    com.warmwit.bierapp.data.models.User access$2(com.warmwit.bierapp.views.UserRowView) -> b
com.warmwit.bierapp.views.UserRowView$1 -> com.warmwit.bierapp.views.b:
    com.warmwit.bierapp.views.UserRowView this$0 -> a
    java.util.Map val$productMap -> b
    void onClick(android.view.View) -> onClick
com.warmwit.bierapp.views.UserRowView$2 -> com.warmwit.bierapp.views.c:
    com.warmwit.bierapp.views.UserRowView this$0 -> a
    boolean val$inDialog -> b
    com.warmwit.bierapp.data.models.Product val$product -> c
    void onClick(android.view.View) -> onClick
com.warmwit.bierapp.views.UserRowView$3 -> com.warmwit.bierapp.views.d:
    com.warmwit.bierapp.views.UserRowView this$0 -> a
    com.warmwit.bierapp.data.models.Product val$product -> b
    boolean val$inDialog -> c
    boolean onLongClick(android.view.View) -> onLongClick
    com.warmwit.bierapp.views.UserRowView access$0(com.warmwit.bierapp.views.UserRowView$3) -> a
com.warmwit.bierapp.views.UserRowView$3$1 -> com.warmwit.bierapp.views.e:
    com.warmwit.bierapp.views.UserRowView$3 this$1 -> a
    android.view.View val$v -> b
    boolean val$inDialog -> c
    com.warmwit.bierapp.data.models.Product val$product -> d
    android.widget.NumberPicker val$picker -> e
    void onClick(android.content.DialogInterface,int) -> onClick
com.warmwit.bierapp.views.UserRowView$ViewHolder -> com.warmwit.bierapp.views.f:
    android.widget.TextView name -> a
    android.widget.TextView score -> b
    android.widget.ImageView avatar -> c
    com.warmwit.bierapp.views.ProductView[] products -> d
    com.warmwit.bierapp.views.ProductView more -> e
    void access$1(com.warmwit.bierapp.views.UserRowView$ViewHolder,android.widget.TextView) -> a
    void access$2(com.warmwit.bierapp.views.UserRowView$ViewHolder,android.widget.TextView) -> b
    void access$3(com.warmwit.bierapp.views.UserRowView$ViewHolder,android.widget.ImageView) -> a
    void access$4(com.warmwit.bierapp.views.UserRowView$ViewHolder,com.warmwit.bierapp.views.ProductView) -> a
    void access$5(com.warmwit.bierapp.views.UserRowView$ViewHolder,com.warmwit.bierapp.views.ProductView[]) -> a
    android.widget.ImageView access$6(com.warmwit.bierapp.views.UserRowView$ViewHolder) -> a
    android.widget.TextView access$7(com.warmwit.bierapp.views.UserRowView$ViewHolder) -> b
    android.widget.TextView access$8(com.warmwit.bierapp.views.UserRowView$ViewHolder) -> c
    com.warmwit.bierapp.views.ProductView[] access$9(com.warmwit.bierapp.views.UserRowView$ViewHolder) -> d
    com.warmwit.bierapp.views.ProductView access$10(com.warmwit.bierapp.views.UserRowView$ViewHolder) -> e
